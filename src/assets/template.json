{
  "background.ts": [
    {
      "neighbors": [
        "    ipcMainSend(win, \"DETECTED_ENGINE_ERROR\", { engineId });",
        "  } else {",
        "    log.error(`onEngineProcessError: win is undefined`);",
        "  }",
        " ",
        "  dialog.showErrorBox(\"音声合成エンジンエラー\", error.message);",
        "};",
        " ",
        "const configManager = getConfigManager();",
        " ",
        "const engineManager = new EngineManager({"
      ],
      "text": "音声合成エンジンエラー",
      "translation": ""
    },
    {
      "neighbors": [
        "  // path.resolveはWindowsだけバックスラッシュ区切りにしてくれるため、path.resolveを挟む。",
        "  shell.openPath(path.resolve(engineDirectory));",
        "}",
        " ",
        "/**",
        " * VVPPエンジンをインストールする。",
        " */",
        "async function installVvppEngine(vvppPath: string) {",
        "  try {",
        "    await vvppManager.install(vvppPath);",
        "    return true;"
      ],
      "text": "エンジンをインストールする",
      "translation": ""
    },
    {
      "neighbors": [
        "  try {",
        "    await vvppManager.install(vvppPath);",
        "    return true;",
        "  } catch (e) {",
        "    dialog.showErrorBox(",
        "      \"インストールエラー\",",
        "      `${vvppPath} をインストールできませんでした。`",
        "    );",
        "    log.error(`Failed to install ${vvppPath}, ${e}`);",
        "    return false;",
        "  }"
      ],
      "text": "インストールエラー",
      "translation": ""
    },
    {
      "neighbors": [
        "    await vvppManager.install(vvppPath);",
        "    return true;",
        "  } catch (e) {",
        "    dialog.showErrorBox(",
        "      \"インストールエラー\",",
        "      `${vvppPath} をインストールできませんでした。`",
        "    );",
        "    log.error(`Failed to install ${vvppPath}, ${e}`);",
        "    return false;",
        "  }",
        "}"
      ],
      "text": "をインストールできませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "    return false;",
        "  }",
        "}",
        " ",
        "/**",
        " * 危険性を案内してからVVPPエンジンをインストールする。",
        " * FIXME: こちらで案内せず、GUIでのインストール側に合流させる",
        " */",
        "async function installVvppEngineWithWarning({",
        "  vvppPath,",
        "  reloadNeeded,"
      ],
      "text": "危険性を案内してから エンジンをインストールする",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "}",
        " ",
        "/**",
        " * 危険性を案内してからVVPPエンジンをインストールする。",
        " * FIXME: こちらで案内せず、GUIでのインストール側に合流させる",
        " */",
        "async function installVvppEngineWithWarning({",
        "  vvppPath,",
        "  reloadNeeded,",
        "}: {"
      ],
      "text": "こちらで案内せず でのインストール側に合流させる",
      "translation": ""
    },
    {
      "neighbors": [
        "  vvppPath: string;",
        "  reloadNeeded: boolean;",
        "}) {",
        "  const result = dialog.showMessageBoxSync(win, {",
        "    type: \"warning\",",
        "    title: \"エンジン追加の確認\",",
        "    message: `この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。`,",
        "    buttons: [\"追加\", \"キャンセル\"],",
        "    noLink: true,",
        "    cancelId: 1,",
        "  });"
      ],
      "text": "エンジン追加の確認",
      "translation": ""
    },
    {
      "neighbors": [
        "  reloadNeeded: boolean;",
        "}) {",
        "  const result = dialog.showMessageBoxSync(win, {",
        "    type: \"warning\",",
        "    title: \"エンジン追加の確認\",",
        "    message: `この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。`,",
        "    buttons: [\"追加\", \"キャンセル\"],",
        "    noLink: true,",
        "    cancelId: 1,",
        "  });",
        "  if (result == 1) {"
      ],
      "text": "この操作はコンピュータに損害を与える可能性があります エンジンの配布元が信頼できない場合は追加しないでください",
      "translation": ""
    },
    {
      "neighbors": [
        "}) {",
        "  const result = dialog.showMessageBoxSync(win, {",
        "    type: \"warning\",",
        "    title: \"エンジン追加の確認\",",
        "    message: `この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。`,",
        "    buttons: [\"追加\", \"キャンセル\"],",
        "    noLink: true,",
        "    cancelId: 1,",
        "  });",
        "  if (result == 1) {",
        "    return;"
      ],
      "text": "追加 キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  if (reloadNeeded) {",
        "    dialog",
        "      .showMessageBox(win, {",
        "        type: \"info\",",
        "        title: \"再読み込みが必要です\",",
        "        message:",
        "          \"VVPPファイルを読み込みました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\",",
        "        buttons: [\"再読み込み\", \"キャンセル\"],",
        "        noLink: true,",
        "        cancelId: 1,"
      ],
      "text": "再読み込みが必要です",
      "translation": ""
    },
    {
      "neighbors": [
        "    dialog",
        "      .showMessageBox(win, {",
        "        type: \"info\",",
        "        title: \"再読み込みが必要です\",",
        "        message:",
        "          \"VVPPファイルを読み込みました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\",",
        "        buttons: [\"再読み込み\", \"キャンセル\"],",
        "        noLink: true,",
        "        cancelId: 1,",
        "      })",
        "      .then((result) => {"
      ],
      "text": "ファイルを読み込みました 反映には再読み込みが必要です 今すぐ再読み込みしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "      .showMessageBox(win, {",
        "        type: \"info\",",
        "        title: \"再読み込みが必要です\",",
        "        message:",
        "          \"VVPPファイルを読み込みました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\",",
        "        buttons: [\"再読み込み\", \"キャンセル\"],",
        "        noLink: true,",
        "        cancelId: 1,",
        "      })",
        "      .then((result) => {",
        "        if (result.response === 0) {"
      ],
      "text": "再読み込み キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "      });",
        "  }",
        "}",
        " ",
        "/**",
        " * マルチエンジン機能が有効だった場合はtrueを返す。",
        " * 無効だった場合はダイアログを表示してfalseを返す。",
        " */",
        "function checkMultiEngineEnabled(): boolean {",
        "  const enabled = configManager.get(\"enableMultiEngine\");",
        "  if (!enabled) {"
      ],
      "text": "マルチエンジン機能が有効だった場合は を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "}",
        " ",
        "/**",
        " * マルチエンジン機能が有効だった場合はtrueを返す。",
        " * 無効だった場合はダイアログを表示してfalseを返す。",
        " */",
        "function checkMultiEngineEnabled(): boolean {",
        "  const enabled = configManager.get(\"enableMultiEngine\");",
        "  if (!enabled) {",
        "    dialog.showMessageBoxSync(win, {"
      ],
      "text": "無効だった場合はダイアログを表示して を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "function checkMultiEngineEnabled(): boolean {",
        "  const enabled = configManager.get(\"enableMultiEngine\");",
        "  if (!enabled) {",
        "    dialog.showMessageBoxSync(win, {",
        "      type: \"info\",",
        "      title: \"マルチエンジン機能が無効です\",",
        "      message: `マルチエンジン機能が無効です。vvppファイルを使用するには設定からマルチエンジン機能を有効にしてください。`,",
        "      buttons: [\"OK\"],",
        "      noLink: true,",
        "    });",
        "  }"
      ],
      "text": "マルチエンジン機能が無効です",
      "translation": ""
    },
    {
      "neighbors": [
        "  const enabled = configManager.get(\"enableMultiEngine\");",
        "  if (!enabled) {",
        "    dialog.showMessageBoxSync(win, {",
        "      type: \"info\",",
        "      title: \"マルチエンジン機能が無効です\",",
        "      message: `マルチエンジン機能が無効です。vvppファイルを使用するには設定からマルチエンジン機能を有効にしてください。`,",
        "      buttons: [\"OK\"],",
        "      noLink: true,",
        "    });",
        "  }",
        "  return enabled;"
      ],
      "text": "マルチエンジン機能が無効です ファイルを使用するには設定からマルチエンジン機能を有効にしてください",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "  return enabled;",
        "}",
        " ",
        "/**",
        " * VVPPエンジンをアンインストールする。",
        " * 関数を呼んだタイミングでアンインストール処理を途中まで行い、アプリ終了時に完遂する。",
        " */",
        "async function uninstallVvppEngine(engineId: EngineId) {",
        "  let engineInfo: EngineInfo | undefined = undefined;",
        "  try {"
      ],
      "text": "エンジンをアンインストールする",
      "translation": ""
    },
    {
      "neighbors": [
        "  return enabled;",
        "}",
        " ",
        "/**",
        " * VVPPエンジンをアンインストールする。",
        " * 関数を呼んだタイミングでアンインストール処理を途中まで行い、アプリ終了時に完遂する。",
        " */",
        "async function uninstallVvppEngine(engineId: EngineId) {",
        "  let engineInfo: EngineInfo | undefined = undefined;",
        "  try {",
        "    engineInfo = engineManager.fetchEngineInfo(engineId);"
      ],
      "text": "関数を呼んだタイミングでアンインストール処理を途中まで行い アプリ終了時に完遂する",
      "translation": ""
    },
    {
      "neighbors": [
        "    vvppManager.markWillDelete(engineId);",
        "    return true;",
        "  } catch (e) {",
        "    const engineName = engineInfo?.name ?? engineId;",
        "    dialog.showErrorBox(",
        "      \"アンインストールエラー\",",
        "      `${engineName} をアンインストールできませんでした。`",
        "    );",
        "    log.error(`Failed to uninstall ${engineId}, ${e}`);",
        "    return false;",
        "  }"
      ],
      "text": "アンインストールエラー",
      "translation": ""
    },
    {
      "neighbors": [
        "    return true;",
        "  } catch (e) {",
        "    const engineName = engineInfo?.name ?? engineId;",
        "    dialog.showErrorBox(",
        "      \"アンインストールエラー\",",
        "      `${engineName} をアンインストールできませんでした。`",
        "    );",
        "    log.error(`Failed to uninstall ${engineId}, ${e}`);",
        "    return false;",
        "  }",
        "}"
      ],
      "text": "をアンインストールできませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  mainWindowState.manage(win);",
        "}",
        " ",
        "/**",
        " * 画面の読み込みを開始する。",
        " * @param obj.isMultiEngineOffMode マルチエンジンオフモードにするかどうか。無指定時はfalse扱いになる。",
        " * @param obj.projectFilePath 初期化時に読み込むプロジェクトファイル。無指定時は何も読み込まない。",
        " * @returns ロードの完了を待つPromise。",
        " */",
        "async function loadUrl(obj: {"
      ],
      "text": "画面の読み込みを開始する",
      "translation": ""
    },
    {
      "neighbors": [
        "  mainWindowState.manage(win);",
        "}",
        " ",
        "/**",
        " * 画面の読み込みを開始する。",
        " * @param obj.isMultiEngineOffMode マルチエンジンオフモードにするかどうか。無指定時はfalse扱いになる。",
        " * @param obj.projectFilePath 初期化時に読み込むプロジェクトファイル。無指定時は何も読み込まない。",
        " * @returns ロードの完了を待つPromise。",
        " */",
        "async function loadUrl(obj: {",
        "  isMultiEngineOffMode?: boolean;"
      ],
      "text": "マルチエンジンオフモードにするかどうか 無指定時は 扱いになる",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * 画面の読み込みを開始する。",
        " * @param obj.isMultiEngineOffMode マルチエンジンオフモードにするかどうか。無指定時はfalse扱いになる。",
        " * @param obj.projectFilePath 初期化時に読み込むプロジェクトファイル。無指定時は何も読み込まない。",
        " * @returns ロードの完了を待つPromise。",
        " */",
        "async function loadUrl(obj: {",
        "  isMultiEngineOffMode?: boolean;",
        "  projectFilePath?: string;"
      ],
      "text": "初期化時に読み込むプロジェクトファイル 無指定時は何も読み込まない",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * 画面の読み込みを開始する。",
        " * @param obj.isMultiEngineOffMode マルチエンジンオフモードにするかどうか。無指定時はfalse扱いになる。",
        " * @param obj.projectFilePath 初期化時に読み込むプロジェクトファイル。無指定時は何も読み込まない。",
        " * @returns ロードの完了を待つPromise。",
        " */",
        "async function loadUrl(obj: {",
        "  isMultiEngineOffMode?: boolean;",
        "  projectFilePath?: string;",
        "}) {"
      ],
      "text": "ロードの完了を待つ",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  await engineManager.runEngineAll();",
        "}",
        " ",
        "/**",
        " * エンジンの停止とエンジン終了後処理を行う。",
        " * 全処理が完了済みの場合 alreadyCompleted を返す。",
        " * そうでない場合は Promise を返す。",
        " */",
        "function cleanupEngines(): Promise<void> | \"alreadyCompleted\" {",
        "  const killingProcessPromises = engineManager.killEngineAll();"
      ],
      "text": "エンジンの停止とエンジン終了後処理を行う",
      "translation": ""
    },
    {
      "neighbors": [
        "  await engineManager.runEngineAll();",
        "}",
        " ",
        "/**",
        " * エンジンの停止とエンジン終了後処理を行う。",
        " * 全処理が完了済みの場合 alreadyCompleted を返す。",
        " * そうでない場合は Promise を返す。",
        " */",
        "function cleanupEngines(): Promise<void> | \"alreadyCompleted\" {",
        "  const killingProcessPromises = engineManager.killEngineAll();",
        "  const numLivingEngineProcess = Object.entries(killingProcessPromises).length;"
      ],
      "text": "全処理が完了済みの場合 を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * エンジンの停止とエンジン終了後処理を行う。",
        " * 全処理が完了済みの場合 alreadyCompleted を返す。",
        " * そうでない場合は Promise を返す。",
        " */",
        "function cleanupEngines(): Promise<void> | \"alreadyCompleted\" {",
        "  const killingProcessPromises = engineManager.killEngineAll();",
        "  const numLivingEngineProcess = Object.entries(killingProcessPromises).length;",
        " "
      ],
      "text": "そうでない場合は を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "  // エンジン情報を設定ファイルに保存しないためにstoreは使わない",
        "  return engineManager.fetchEngineInfos();",
        "});",
        " ",
        "/**",
        " * エンジンを再起動する。",
        " * エンジンの起動が開始したらresolve、起動が失敗したらreject。",
        " */",
        "ipcMainHandle(\"RESTART_ENGINE\", async (_, { engineId }) => {",
        "  await engineManager.restartEngine(engineId);",
        "});"
      ],
      "text": "エンジンを再起動する",
      "translation": ""
    },
    {
      "neighbors": [
        "  return engineManager.fetchEngineInfos();",
        "});",
        " ",
        "/**",
        " * エンジンを再起動する。",
        " * エンジンの起動が開始したらresolve、起動が失敗したらreject。",
        " */",
        "ipcMainHandle(\"RESTART_ENGINE\", async (_, { engineId }) => {",
        "  await engineManager.restartEngine(engineId);",
        "});",
        " "
      ],
      "text": "エンジンの起動が開始したら 起動が失敗したら",
      "translation": ""
    },
    {
      "neighbors": [
        "    // 実利用時はconfigファイル削除で解決する可能性があることを案内して終了",
        "    if (!isDevelopment) {",
        "      await dialog",
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー\",",
        "          message: `設定ファイルの読み込みに失敗しました。${app.getPath(",
        "            \"userData\"",
        "          )} にある config.json の名前を変えることで解決することがあります（ただし設定がすべてリセットされます）。設定ファイルがあるフォルダを開きますか？`,",
        "          buttons: [\"いいえ\", \"はい\"],",
        "          noLink: true,"
      ],
      "text": "設定ファイルの読み込みエラー",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (!isDevelopment) {",
        "      await dialog",
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー\",",
        "          message: `設定ファイルの読み込みに失敗しました。${app.getPath(",
        "            \"userData\"",
        "          )} にある config.json の名前を変えることで解決することがあります（ただし設定がすべてリセットされます）。設定ファイルがあるフォルダを開きますか？`,",
        "          buttons: [\"いいえ\", \"はい\"],",
        "          noLink: true,",
        "          cancelId: 0,"
      ],
      "text": "設定ファイルの読み込みに失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー\",",
        "          message: `設定ファイルの読み込みに失敗しました。${app.getPath(",
        "            \"userData\"",
        "          )} にある config.json の名前を変えることで解決することがあります（ただし設定がすべてリセットされます）。設定ファイルがあるフォルダを開きますか？`,",
        "          buttons: [\"いいえ\", \"はい\"],",
        "          noLink: true,",
        "          cancelId: 0,",
        "        })",
        "        .then(async ({ response }) => {"
      ],
      "text": "にある の名前を変えることで解決することがあります ただし設定がすべてリセットされます 設定ファイルがあるフォルダを開きますか",
      "translation": ""
    },
    {
      "neighbors": [
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー\",",
        "          message: `設定ファイルの読み込みに失敗しました。${app.getPath(",
        "            \"userData\"",
        "          )} にある config.json の名前を変えることで解決することがあります（ただし設定がすべてリセットされます）。設定ファイルがあるフォルダを開きますか？`,",
        "          buttons: [\"いいえ\", \"はい\"],",
        "          noLink: true,",
        "          cancelId: 0,",
        "        })",
        "        .then(async ({ response }) => {",
        "          switch (response) {"
      ],
      "text": "いいえ はい",
      "translation": ""
    },
    {
      "neighbors": [
        "    // 開発時はconfigをリセットして起動を続行するかも問う",
        "    else {",
        "      await dialog",
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー（開発者向け案内）\",",
        "          message: `設定ファイルの読み込みに失敗しました。設定ファイルの名前を変更するか、設定をリセットしてください。`,",
        "          buttons: [",
        "            \"何もせず終了\",",
        "            \"設定ファイルのフォルダを開いて終了\",",
        "            \"設定をリセットして続行\","
      ],
      "text": "設定ファイルの読み込みエラー 開発者向け案内",
      "translation": ""
    },
    {
      "neighbors": [
        "    else {",
        "      await dialog",
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー（開発者向け案内）\",",
        "          message: `設定ファイルの読み込みに失敗しました。設定ファイルの名前を変更するか、設定をリセットしてください。`,",
        "          buttons: [",
        "            \"何もせず終了\",",
        "            \"設定ファイルのフォルダを開いて終了\",",
        "            \"設定をリセットして続行\",",
        "          ],"
      ],
      "text": "設定ファイルの読み込みに失敗しました 設定ファイルの名前を変更するか 設定をリセットしてください",
      "translation": ""
    },
    {
      "neighbors": [
        "        .showMessageBox({",
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー（開発者向け案内）\",",
        "          message: `設定ファイルの読み込みに失敗しました。設定ファイルの名前を変更するか、設定をリセットしてください。`,",
        "          buttons: [",
        "            \"何もせず終了\",",
        "            \"設定ファイルのフォルダを開いて終了\",",
        "            \"設定をリセットして続行\",",
        "          ],",
        "          noLink: true,",
        "          cancelId: 0,"
      ],
      "text": "何もせず終了",
      "translation": ""
    },
    {
      "neighbors": [
        "          type: \"error\",",
        "          title: \"設定ファイルの読み込みエラー（開発者向け案内）\",",
        "          message: `設定ファイルの読み込みに失敗しました。設定ファイルの名前を変更するか、設定をリセットしてください。`,",
        "          buttons: [",
        "            \"何もせず終了\",",
        "            \"設定ファイルのフォルダを開いて終了\",",
        "            \"設定をリセットして続行\",",
        "          ],",
        "          noLink: true,",
        "          cancelId: 0,",
        "        })"
      ],
      "text": "設定ファイルのフォルダを開いて終了",
      "translation": ""
    },
    {
      "neighbors": [
        "          title: \"設定ファイルの読み込みエラー（開発者向け案内）\",",
        "          message: `設定ファイルの読み込みに失敗しました。設定ファイルの名前を変更するか、設定をリセットしてください。`,",
        "          buttons: [",
        "            \"何もせず終了\",",
        "            \"設定ファイルのフォルダを開いて終了\",",
        "            \"設定をリセットして続行\",",
        "          ],",
        "          noLink: true,",
        "          cancelId: 0,",
        "        })",
        "        .then(async ({ response }) => {"
      ],
      "text": "設定をリセットして続行",
      "translation": ""
    }
  ],
  "ConfigManager.ts": [
    {
      "neighbors": [
        "      const hotkeySettings =",
        "        config.hotkeySettings as ConfigType[\"hotkeySettings\"];",
        "      const newHotkeySettings: ConfigType[\"hotkeySettings\"] =",
        "        hotkeySettings.map((hotkeySetting) => {",
        "          /// @ts-expect-error 名前変更なので合わない。",
        "          if (hotkeySetting.action === \"一つだけ書き出し\") {",
        "            return {",
        "              ...hotkeySetting,",
        "              action: \"選択音声を書き出し\",",
        "            };",
        "          }"
      ],
      "text": "一つだけ書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "        hotkeySettings.map((hotkeySetting) => {",
        "          /// @ts-expect-error 名前変更なので合わない。",
        "          if (hotkeySetting.action === \"一つだけ書き出し\") {",
        "            return {",
        "              ...hotkeySetting,",
        "              action: \"選択音声を書き出し\",",
        "            };",
        "          }",
        "          return hotkeySetting;",
        "        });",
        "      config.hotkeySettings = newHotkeySettings;"
      ],
      "text": "選択音声を書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "    };",
        "  };",
        "};",
        " ",
        "/**",
        " * 設定管理の基底クラス",
        " *",
        " * # ロジックメモ",
        " * 保存呼び出しのカウンターを用意する。",
        " * set（save）が呼ばれる度、カウンターをインクリメントし、保存のPromiseをspawnする。",
        " *"
      ],
      "text": "設定管理の基底クラス",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "/**",
        " * 設定管理の基底クラス",
        " *",
        " * # ロジックメモ",
        " * 保存呼び出しのカウンターを用意する。",
        " * set（save）が呼ばれる度、カウンターをインクリメントし、保存のPromiseをspawnする。",
        " *",
        " * 必ず保存されることを保証したい時（アプリ終了時など）は、await ensureSaved()を呼ぶ。",
        " */"
      ],
      "text": "ロジックメモ",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * 設定管理の基底クラス",
        " *",
        " * # ロジックメモ",
        " * 保存呼び出しのカウンターを用意する。",
        " * set（save）が呼ばれる度、カウンターをインクリメントし、保存のPromiseをspawnする。",
        " *",
        " * 必ず保存されることを保証したい時（アプリ終了時など）は、await ensureSaved()を呼ぶ。",
        " */",
        "export abstract class BaseConfigManager {"
      ],
      "text": "保存呼び出しのカウンターを用意する",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * 設定管理の基底クラス",
        " *",
        " * # ロジックメモ",
        " * 保存呼び出しのカウンターを用意する。",
        " * set（save）が呼ばれる度、カウンターをインクリメントし、保存のPromiseをspawnする。",
        " *",
        " * 必ず保存されることを保証したい時（アプリ終了時など）は、await ensureSaved()を呼ぶ。",
        " */",
        "export abstract class BaseConfigManager {",
        "  protected config: ConfigType | undefined;"
      ],
      "text": "が呼ばれる度 カウンターをインクリメントし 保存の を する",
      "translation": ""
    },
    {
      "neighbors": [
        " *",
        " * # ロジックメモ",
        " * 保存呼び出しのカウンターを用意する。",
        " * set（save）が呼ばれる度、カウンターをインクリメントし、保存のPromiseをspawnする。",
        " *",
        " * 必ず保存されることを保証したい時（アプリ終了時など）は、await ensureSaved()を呼ぶ。",
        " */",
        "export abstract class BaseConfigManager {",
        "  protected config: ConfigType | undefined;",
        " ",
        "  private lock = new AsyncLock();"
      ],
      "text": "必ず保存されることを保証したい時 アプリ終了時など は を呼ぶ",
      "translation": ""
    }
  ],
  "vvppManager.ts": [
    {
      "neighbors": [
        "      throw e;",
        "    }",
        "  }",
        " ",
        "  /**",
        "   * 追加",
        "   */",
        "  async install(vvppPath: string) {",
        "    await this.lock.acquire(lockKey, () => this._install(vvppPath));",
        "  }",
        "  private async _install(vvppPath: string) {"
      ],
      "text": "追加",
      "translation": ""
    },
    {
      "neighbors": [
        "            deletingEngineDir = path.join(this.vvppEngineDir, engineDir);",
        "            break;",
        "          }",
        "        }",
        "        if (deletingEngineDir == null) {",
        "          throw new Error(\"エンジンが見つかりませんでした。\");",
        "        }",
        " ",
        "        for (let i = 0; i < 5; i++) {",
        "          try {",
        "            await fs.promises.rm(deletingEngineDir, {"
      ],
      "text": "エンジンが見つかりませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "            break;",
        "          } catch (e) {",
        "            if (i === 4) {",
        "              log.error(e);",
        "              dialog.showErrorBox(",
        "                \"エンジン削除エラー\",",
        "                `エンジンの削除に失敗しました。エンジンのフォルダを手動で削除してください。\\n${deletingEngineDir}\\nエラー内容: ${e}`",
        "              );",
        "            } else {",
        "              log.error(`Failed to rename engine directory: ${e}, retrying`);",
        "              await new Promise((resolve) => setTimeout(resolve, 1000));"
      ],
      "text": "エンジン削除エラー",
      "translation": ""
    },
    {
      "neighbors": [
        "          } catch (e) {",
        "            if (i === 4) {",
        "              log.error(e);",
        "              dialog.showErrorBox(",
        "                \"エンジン削除エラー\",",
        "                `エンジンの削除に失敗しました。エンジンのフォルダを手動で削除してください。\\n${deletingEngineDir}\\nエラー内容: ${e}`",
        "              );",
        "            } else {",
        "              log.error(`Failed to rename engine directory: ${e}, retrying`);",
        "              await new Promise((resolve) => setTimeout(resolve, 1000));",
        "            }"
      ],
      "text": "エンジンの削除に失敗しました エンジンのフォルダを手動で削除してください エラー内容",
      "translation": ""
    },
    {
      "neighbors": [
        "            break;",
        "          } catch (e) {",
        "            if (i === 4) {",
        "              log.error(e);",
        "              dialog.showErrorBox(",
        "                \"エンジン追加エラー\",",
        "                `エンジンの追加に失敗しました。エンジンのフォルダを手動で移動してください。\\n${from}\\nエラー内容: ${e}`",
        "              );",
        "            } else {",
        "              log.error(`Failed to rename engine directory: ${e}, retrying`);",
        "              await new Promise((resolve) => setTimeout(resolve, 1000));"
      ],
      "text": "エンジン追加エラー",
      "translation": ""
    },
    {
      "neighbors": [
        "          } catch (e) {",
        "            if (i === 4) {",
        "              log.error(e);",
        "              dialog.showErrorBox(",
        "                \"エンジン追加エラー\",",
        "                `エンジンの追加に失敗しました。エンジンのフォルダを手動で移動してください。\\n${from}\\nエラー内容: ${e}`",
        "              );",
        "            } else {",
        "              log.error(`Failed to rename engine directory: ${e}, retrying`);",
        "              await new Promise((resolve) => setTimeout(resolve, 1000));",
        "            }"
      ],
      "text": "エンジンの追加に失敗しました エンジンのフォルダを手動で移動してください エラー内容",
      "translation": ""
    }
  ],
  "engineManager.ts": [
    {
      "neighbors": [
        "  willQuitEngine: boolean;",
        "  engineProcess?: ChildProcess;",
        "};",
        " ",
        "/**",
        " * デフォルトエンジンの情報を作成する",
        " */",
        "function createDefaultEngineInfos(defaultEngineDir: string): EngineInfo[] {",
        "  // TODO: envから直接ではなく、envに書いたengine_manifest.jsonから情報を得るようにする",
        "  const defaultEngineInfosEnv =",
        "    import.meta.env.VITE_DEFAULT_ENGINE_INFOS ?? \"[]\";"
      ],
      "text": "デフォルトエンジンの情報を作成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "    this.engineProcessContainers = {};",
        "  }",
        " ",
        "  /**",
        "   * 追加エンジンの一覧を作成する。",
        "   * FIXME: store.get(\"registeredEngineDirs\")への副作用をEngineManager外に移動する",
        "   */",
        "  private createAdditionalEngineInfos(): EngineInfo[] {",
        "    const engines: EngineInfo[] = [];",
        "    const addEngine = (engineDir: string, type: \"vvpp\" | \"path\") => {"
      ],
      "text": "追加エンジンの一覧を作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "    this.engineProcessContainers = {};",
        "  }",
        " ",
        "  /**",
        "   * 追加エンジンの一覧を作成する。",
        "   * FIXME: store.get(\"registeredEngineDirs\")への副作用をEngineManager外に移動する",
        "   */",
        "  private createAdditionalEngineInfos(): EngineInfo[] {",
        "    const engines: EngineInfo[] = [];",
        "    const addEngine = (engineDir: string, type: \"vvpp\" | \"path\") => {",
        "      const manifestPath = path.join(engineDir, \"engine_manifest.json\");"
      ],
      "text": "への副作用を 外に移動する",
      "translation": ""
    },
    {
      "neighbors": [
        "      if (result !== \"ok\") {",
        "        log.log(`Failed to load engine: ${result}, ${engineDir}`);",
        "        // 動かないエンジンは追加できないので削除",
        "        // FIXME: エンジン管理UIで削除可能にする",
        "        dialog.showErrorBox(",
        "          \"エンジンの読み込みに失敗しました。\",",
        "          `${engineDir}を読み込めませんでした。このエンジンは削除されます。`",
        "        );",
        "        this.configManager.set(",
        "          \"registeredEngineDirs\",",
        "          this.configManager"
      ],
      "text": "エンジンの読み込みに失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "        log.log(`Failed to load engine: ${result}, ${engineDir}`);",
        "        // 動かないエンジンは追加できないので削除",
        "        // FIXME: エンジン管理UIで削除可能にする",
        "        dialog.showErrorBox(",
        "          \"エンジンの読み込みに失敗しました。\",",
        "          `${engineDir}を読み込めませんでした。このエンジンは削除されます。`",
        "        );",
        "        this.configManager.set(",
        "          \"registeredEngineDirs\",",
        "          this.configManager",
        "            .get(\"registeredEngineDirs\")"
      ],
      "text": "を読み込めませんでした このエンジンは削除されます",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        "    return engines;",
        "  }",
        " ",
        "  /**",
        "   * 全てのエンジンの一覧を取得する。デフォルトエンジン＋追加エンジン。",
        "   */",
        "  fetchEngineInfos(): EngineInfo[] {",
        "    return [...this.defaultEngineInfos, ...this.additionalEngineInfos];",
        "  }",
        " "
      ],
      "text": "全てのエンジンの一覧を取得する デフォルトエンジン 追加エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "  fetchEngineInfos(): EngineInfo[] {",
        "    return [...this.defaultEngineInfos, ...this.additionalEngineInfos];",
        "  }",
        " ",
        "  /**",
        "   * エンジンの情報を取得する。存在しない場合はエラーを返す。",
        "   */",
        "  fetchEngineInfo(engineId: EngineId): EngineInfo {",
        "    const engineInfos = this.fetchEngineInfos();",
        "    const engineInfo = engineInfos.find(",
        "      (engineInfo) => engineInfo.uuid === engineId"
      ],
      "text": "エンジンの情報を取得する 存在しない場合はエラーを返す",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        "    return engineInfo;",
        "  }",
        " ",
        "  /**",
        "   * エンジンのディレクトリを取得する。存在しない場合はエラーを返す。",
        "   */",
        "  fetchEngineDirectory(engineId: EngineId): string {",
        "    const engineInfo = this.fetchEngineInfo(engineId);",
        "    const engineDirectory = engineInfo.path;",
        "    if (engineDirectory == undefined) {"
      ],
      "text": "エンジンのディレクトリを取得する 存在しない場合はエラーを返す",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "    return engineDirectory;",
        "  }",
        " ",
        "  /**",
        "   * EngineInfosとAltPortInfoを初期化する。",
        "   */",
        "  initializeEngineInfosAndAltPortInfo() {",
        "    this.defaultEngineInfos = createDefaultEngineInfos(this.defaultEngineDir);",
        "    this.additionalEngineInfos = this.createAdditionalEngineInfos();",
        "    this.altPortInfo = {};"
      ],
      "text": "と を初期化する",
      "translation": ""
    },
    {
      "neighbors": [
        "    this.additionalEngineInfos = this.createAdditionalEngineInfos();",
        "    this.altPortInfo = {};",
        "  }",
        " ",
        "  /**",
        "   * 全てのエンジンを起動する。",
        "   */",
        "  async runEngineAll() {",
        "    const engineInfos = this.fetchEngineInfos();",
        "    log.info(`Starting ${engineInfos.length} engine/s...`);",
        " "
      ],
      "text": "全てのエンジンを起動する",
      "translation": ""
    },
    {
      "neighbors": [
        "      await this.runEngine(engineInfo.uuid);",
        "    }",
        "  }",
        " ",
        "  /**",
        "   * エンジンを起動する。",
        "   */",
        "  async runEngine(engineId: EngineId) {",
        "    const engineInfos = this.fetchEngineInfos();",
        "    const engineInfo = engineInfos.find(",
        "      (engineInfo) => engineInfo.uuid === engineId"
      ],
      "text": "エンジンを起動する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      // 代替ポートが見つからないとき",
        "      if (altPort == undefined) {",
        "        log.error(`ENGINE ${engineId}: No Alternative Port Found`);",
        "        dialog.showErrorBox(",
        "          `${engineInfo.name} の起動に失敗しました`,",
        "          `${engineHostInfo.port}番ポートの代わりに利用可能なポートが見つかりませんでした。PCを再起動してください。`",
        "        );",
        "        app.exit(1);",
        "        throw new Error(\"No Alternative Port Found\");",
        "      }"
      ],
      "text": "の起動に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "      // 代替ポートが見つからないとき",
        "      if (altPort == undefined) {",
        "        log.error(`ENGINE ${engineId}: No Alternative Port Found`);",
        "        dialog.showErrorBox(",
        "          `${engineInfo.name} の起動に失敗しました`,",
        "          `${engineHostInfo.port}番ポートの代わりに利用可能なポートが見つかりませんでした。PCを再起動してください。`",
        "        );",
        "        app.exit(1);",
        "        throw new Error(\"No Alternative Port Found\");",
        "      }",
        " "
      ],
      "text": "番ポートの代わりに利用可能なポートが見つかりませんでした を再起動してください",
      "translation": ""
    },
    {
      "neighbors": [
        "      log.info(`ENGINE ${engineId}: Process exited with code ${code}`);",
        " ",
        "      if (!engineProcessContainer.willQuitEngine) {",
        "        const errorMessage =",
        "          engineInfos.length === 1",
        "            ? \"音声合成エンジンが異常終了しました。エンジンを再起動してください。\"",
        "            : `${engineInfo.name}が異常終了しました。エンジンを再起動してください。`;",
        "        if (!errorNotified) {",
        "          errorNotified = true;",
        "          this.onEngineProcessError(engineInfo, new Error(errorMessage));",
        "        }"
      ],
      "text": "音声合成エンジンが異常終了しました エンジンを再起動してください",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      if (!engineProcessContainer.willQuitEngine) {",
        "        const errorMessage =",
        "          engineInfos.length === 1",
        "            ? \"音声合成エンジンが異常終了しました。エンジンを再起動してください。\"",
        "            : `${engineInfo.name}が異常終了しました。エンジンを再起動してください。`;",
        "        if (!errorNotified) {",
        "          errorNotified = true;",
        "          this.onEngineProcessError(engineInfo, new Error(errorMessage));",
        "        }",
        "      }"
      ],
      "text": "が異常終了しました エンジンを再起動してください",
      "translation": ""
    },
    {
      "neighbors": [
        "      }",
        "    });",
        "  }",
        " ",
        "  /**",
        "   * 全てのエンジンに対し、各エンジンを終了するPromiseを返す。",
        "   */",
        "  killEngineAll(): Record<EngineId, Promise<void>> {",
        "    const killingProcessPromises: Record<EngineId, Promise<void>> = {};",
        " ",
        "    // FIXME: engineProcessContainersをMapにする"
      ],
      "text": "全てのエンジンに対し 各エンジンを終了する を返す",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "    return killingProcessPromises;",
        "  }",
        " ",
        "  /**",
        "   * エンジンを終了するPromiseを返す。",
        "   * @returns",
        "   * Promise<void> | undefined",
        "   * Promise.resolve: エンジンプロセスのキルに成功した（非同期）",
        "   * Promise.reject: エンジンプロセスのキルに失敗した（非同期）",
        "   * undefined: エンジンプロセスのキルが開始されなかった＝エンジンプロセスがすでに停止している（同期）"
      ],
      "text": "エンジンを終了する を返す",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  /**",
        "   * エンジンを終了するPromiseを返す。",
        "   * @returns",
        "   * Promise<void> | undefined",
        "   * Promise.resolve: エンジンプロセスのキルに成功した（非同期）",
        "   * Promise.reject: エンジンプロセスのキルに失敗した（非同期）",
        "   * undefined: エンジンプロセスのキルが開始されなかった＝エンジンプロセスがすでに停止している（同期）",
        "   */",
        "  killEngine(engineId: EngineId): Promise<void> | undefined {",
        "    const engineProcessContainer = this.engineProcessContainers[engineId];"
      ],
      "text": "エンジンプロセスのキルに成功した 非同期",
      "translation": ""
    },
    {
      "neighbors": [
        "  /**",
        "   * エンジンを終了するPromiseを返す。",
        "   * @returns",
        "   * Promise<void> | undefined",
        "   * Promise.resolve: エンジンプロセスのキルに成功した（非同期）",
        "   * Promise.reject: エンジンプロセスのキルに失敗した（非同期）",
        "   * undefined: エンジンプロセスのキルが開始されなかった＝エンジンプロセスがすでに停止している（同期）",
        "   */",
        "  killEngine(engineId: EngineId): Promise<void> | undefined {",
        "    const engineProcessContainer = this.engineProcessContainers[engineId];",
        "    if (!engineProcessContainer) {"
      ],
      "text": "エンジンプロセスのキルに失敗した 非同期",
      "translation": ""
    },
    {
      "neighbors": [
        "   * エンジンを終了するPromiseを返す。",
        "   * @returns",
        "   * Promise<void> | undefined",
        "   * Promise.resolve: エンジンプロセスのキルに成功した（非同期）",
        "   * Promise.reject: エンジンプロセスのキルに失敗した（非同期）",
        "   * undefined: エンジンプロセスのキルが開始されなかった＝エンジンプロセスがすでに停止している（同期）",
        "   */",
        "  killEngine(engineId: EngineId): Promise<void> | undefined {",
        "    const engineProcessContainer = this.engineProcessContainers[engineId];",
        "    if (!engineProcessContainer) {",
        "      log.error(`No such engineProcessContainer: engineId == ${engineId}`);"
      ],
      "text": "エンジンプロセスのキルが開始されなかった エンジンプロセスがすでに停止している 同期",
      "translation": ""
    },
    {
      "neighbors": [
        "      }",
        "    });",
        "  }",
        " ",
        "  /**",
        "   * エンジンを再起動する。",
        "   */",
        "  async restartEngine(engineId: EngineId) {",
        "    // FIXME: killEngine関数を使い回すようにする",
        "    await new Promise<void>((resolve, reject) => {",
        "      const engineProcessContainer: EngineProcessContainer | undefined ="
      ],
      "text": "エンジンを再起動する",
      "translation": ""
    },
    {
      "neighbors": [
        "      });",
        "    });",
        "  }",
        " ",
        "  /**",
        "   * ディレクトリがエンジンとして正しいかどうかを判定する",
        "   */",
        "  validateEngineDir(engineDir: string): EngineDirValidationResult {",
        "    if (!fs.existsSync(engineDir)) {",
        "      return \"directoryNotFound\";",
        "    } else if (!fs.statSync(engineDir).isDirectory()) {"
      ],
      "text": "ディレクトリがエンジンとして正しいかどうかを判定する",
      "translation": ""
    }
  ],
  "portManager.ts": [
    {
      "neighbors": [
        "    port: Number(url.port),",
        "  };",
        "}",
        " ",
        "/**",
        " * \"netstat -ano\" の stdout から, 指定したポートを LISTENING しているプロセスの id を取得します.",
        " *",
        " * ex) stdout:",
        " * ``` cmd",
        " * TCP  127.0.0.1:5173   127.0.0.1:50170  TIME_WAIT  0",
        " * TCP  127.0.0.1:6463   0.0.0.0:0        LISTENING  18692"
      ],
      "text": "の から 指定したポートを しているプロセスの を取得します",
      "translation": ""
    },
    {
      "neighbors": [
        " * TCP  127.0.0.1:6463   0.0.0.0:0        LISTENING  18692",
        " * TCP  127.0.0.1:50021  0.0.0.0:0        LISTENING  17320",
        " * ```",
        " * -> `17320`",
        " *",
        " * @param stdout netstat の stdout",
        " * @param hostInfo ホスト情報",
        " * @returns `process id` or `undefined` (ポートが割り当て可能なとき)",
        " */",
        "function netstatStdout2pid(",
        "  stdout: string,"
      ],
      "text": "の",
      "translation": ""
    },
    {
      "neighbors": [
        " * TCP  127.0.0.1:50021  0.0.0.0:0        LISTENING  17320",
        " * ```",
        " * -> `17320`",
        " *",
        " * @param stdout netstat の stdout",
        " * @param hostInfo ホスト情報",
        " * @returns `process id` or `undefined` (ポートが割り当て可能なとき)",
        " */",
        "function netstatStdout2pid(",
        "  stdout: string,",
        "  hostInfo: HostInfo"
      ],
      "text": "ホスト情報",
      "translation": ""
    },
    {
      "neighbors": [
        " * ```",
        " * -> `17320`",
        " *",
        " * @param stdout netstat の stdout",
        " * @param hostInfo ホスト情報",
        " * @returns `process id` or `undefined` (ポートが割り当て可能なとき)",
        " */",
        "function netstatStdout2pid(",
        "  stdout: string,",
        "  hostInfo: HostInfo",
        "): number | undefined {"
      ],
      "text": "ポートが割り当て可能なとき",
      "translation": ""
    },
    {
      "neighbors": [
        "  portLog(hostInfo.port, `Found process name: ${processName}`);",
        "  return processName.trim();",
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能かどうか実際にlistenして接続したポート番号を返します。",
        " * 0番ポートを指定した場合はランダムな接続可能ポート番号を返します。",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " * @returns 割り当て不能だった場合`undefined`を返します。割り当て可能だった場合ポート番号を返します。",
        " */"
      ],
      "text": "ポートが割り当て可能かどうか実際に して接続したポート番号を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "  return processName.trim();",
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能かどうか実際にlistenして接続したポート番号を返します。",
        " * 0番ポートを指定した場合はランダムな接続可能ポート番号を返します。",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " * @returns 割り当て不能だった場合`undefined`を返します。割り当て可能だった場合ポート番号を返します。",
        " */",
        "function findOrCheckPort("
      ],
      "text": "番ポートを指定した場合はランダムな接続可能ポート番号を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能かどうか実際にlistenして接続したポート番号を返します。",
        " * 0番ポートを指定した場合はランダムな接続可能ポート番号を返します。",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " * @returns 割り当て不能だった場合`undefined`を返します。割り当て可能だった場合ポート番号を返します。",
        " */",
        "function findOrCheckPort(",
        "  port: number,"
      ],
      "text": "確認するポート番号",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * ポートが割り当て可能かどうか実際にlistenして接続したポート番号を返します。",
        " * 0番ポートを指定した場合はランダムな接続可能ポート番号を返します。",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " * @returns 割り当て不能だった場合`undefined`を返します。割り当て可能だった場合ポート番号を返します。",
        " */",
        "function findOrCheckPort(",
        "  port: number,",
        "  hostname: string"
      ],
      "text": "確認するホスト名",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * ポートが割り当て可能かどうか実際にlistenして接続したポート番号を返します。",
        " * 0番ポートを指定した場合はランダムな接続可能ポート番号を返します。",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " * @returns 割り当て不能だった場合`undefined`を返します。割り当て可能だった場合ポート番号を返します。",
        " */",
        "function findOrCheckPort(",
        "  port: number,",
        "  hostname: string",
        "): Promise<number | undefined> {"
      ],
      "text": "割り当て不能だった場合 を返します 割り当て可能だった場合ポート番号を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "    server.listen(port, hostname);",
        "  });",
        "}",
        " ",
        "/**",
        " * 割り当て可能な他のポートを探します",
        " * @param basePort 元のポート番号",
        " * @param hostname 割り当てるホスト名",
        " * @returns 割り当て可能なポート番号 or `undefined` (割り当て可能なポートが見つからなかったとき)",
        " */",
        "export async function findAltPort("
      ],
      "text": "割り当て可能な他のポートを探します",
      "translation": ""
    },
    {
      "neighbors": [
        "  });",
        "}",
        " ",
        "/**",
        " * 割り当て可能な他のポートを探します",
        " * @param basePort 元のポート番号",
        " * @param hostname 割り当てるホスト名",
        " * @returns 割り当て可能なポート番号 or `undefined` (割り当て可能なポートが見つからなかったとき)",
        " */",
        "export async function findAltPort(",
        "  basePort: number,"
      ],
      "text": "元のポート番号",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * 割り当て可能な他のポートを探します",
        " * @param basePort 元のポート番号",
        " * @param hostname 割り当てるホスト名",
        " * @returns 割り当て可能なポート番号 or `undefined` (割り当て可能なポートが見つからなかったとき)",
        " */",
        "export async function findAltPort(",
        "  basePort: number,",
        "  hostname: string"
      ],
      "text": "割り当てるホスト名",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * 割り当て可能な他のポートを探します",
        " * @param basePort 元のポート番号",
        " * @param hostname 割り当てるホスト名",
        " * @returns 割り当て可能なポート番号 or `undefined` (割り当て可能なポートが見つからなかったとき)",
        " */",
        "export async function findAltPort(",
        "  basePort: number,",
        "  hostname: string",
        "): Promise<number | undefined> {"
      ],
      "text": "割り当て可能なポート番号 割り当て可能なポートが見つからなかったとき",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "  return altPort;",
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能か確認します",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " */",
        "export async function isAssignablePort(port: number, hostname: string) {",
        "  return (await findOrCheckPort(port, hostname)) != undefined;"
      ],
      "text": "ポートが割り当て可能か確認します",
      "translation": ""
    },
    {
      "neighbors": [
        "  return altPort;",
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能か確認します",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " */",
        "export async function isAssignablePort(port: number, hostname: string) {",
        "  return (await findOrCheckPort(port, hostname)) != undefined;"
      ],
      "text": "確認するポート番号",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * ポートが割り当て可能か確認します",
        " * @param port 確認するポート番号",
        " * @param hostname 確認するホスト名",
        " */",
        "export async function isAssignablePort(port: number, hostname: string) {",
        "  return (await findOrCheckPort(port, hostname)) != undefined;"
      ],
      "text": "確認するホスト名",
      "translation": ""
    }
  ],
  "storeImpl.ts": [
    {
      "neighbors": [
        "        db.createObjectStore(directoryHandleStoreKey);",
        "      } else if (ev.newVersion != null && ev.newVersion > ev.oldVersion) {",
        "        // TODO: migrate",
        "        /* eslint-disable no-console */ // logger みたいなパッケージに切り出して、それに依存する形でもいいかも",
        "        console.error(",
        "          `マイグレーション処理が必要です。${ev.oldVersion} => ${ev.newVersion}`",
        "        );",
        "        /* eslint-enable no-console */",
        "      }",
        "    };",
        "  });"
      ],
      "text": "マイグレーション処理が必要です",
      "translation": ""
    },
    {
      "neighbors": [
        "    const store = transaction.objectStore(settingStoreKey);",
        "    const request = store.get(entryKey);",
        "    await waitRequest(request);",
        "    const result = request.result;",
        "    if (result == undefined) {",
        "      throw new Error(\"設定ファイルが見つかりません\");",
        "    }",
        "    return JSON.parse(result);",
        "  }",
        " ",
        "  protected async save(data: ConfigType & Metadata) {"
      ],
      "text": "設定ファイルが見つかりません",
      "translation": ""
    }
  ],
  "sandbox.ts": [
    {
      "neighbors": [
        " ",
        "// TODO: base pathを設定できるようにするか、ビルド時埋め込みにする",
        "const toStaticPath = (fileName: string) => `/${fileName}`;",
        " ",
        "/**",
        " * Browser版のSandBox実装",
        " * src/type/preload.tsのSandboxを変更した場合は、interfaceに追従した変更が必要",
        " * まだ開発中のため、Browser版の実装も同時に行えない場合は、メソッドを追加して throw new Error() する",
        " */",
        "export const api: Sandbox = {",
        "  getAppInfos() {"
      ],
      "text": "版の 実装",
      "translation": ""
    },
    {
      "neighbors": [
        "// TODO: base pathを設定できるようにするか、ビルド時埋め込みにする",
        "const toStaticPath = (fileName: string) => `/${fileName}`;",
        " ",
        "/**",
        " * Browser版のSandBox実装",
        " * src/type/preload.tsのSandboxを変更した場合は、interfaceに追従した変更が必要",
        " * まだ開発中のため、Browser版の実装も同時に行えない場合は、メソッドを追加して throw new Error() する",
        " */",
        "export const api: Sandbox = {",
        "  getAppInfos() {",
        "    const appInfo = {"
      ],
      "text": "の を変更した場合は に追従した変更が必要",
      "translation": ""
    },
    {
      "neighbors": [
        "const toStaticPath = (fileName: string) => `/${fileName}`;",
        " ",
        "/**",
        " * Browser版のSandBox実装",
        " * src/type/preload.tsのSandboxを変更した場合は、interfaceに追従した変更が必要",
        " * まだ開発中のため、Browser版の実装も同時に行えない場合は、メソッドを追加して throw new Error() する",
        " */",
        "export const api: Sandbox = {",
        "  getAppInfos() {",
        "    const appInfo = {",
        "      name: import.meta.env.VITE_APP_NAME,"
      ],
      "text": "まだ開発中のため 版の実装も同時に行えない場合は メソッドを追加して する",
      "translation": ""
    },
    {
      "neighbors": [
        "    return new Promise((resolve, reject) => {",
        "      if (obj.defaultPath == undefined) {",
        "        reject(",
        "          // storeやvue componentからdefaultPathを設定していなかったらrejectされる",
        "          new Error(",
        "            \"ブラウザ版ではファイルの保存機能が一部サポートされていません。\"",
        "          )",
        "        );",
        "      } else {",
        "        resolve(obj.defaultPath);",
        "      }"
      ],
      "text": "ブラウザ版ではファイルの保存機能が一部サポートされていません",
      "translation": ""
    },
    {
      "neighbors": [
        "    return new Promise((resolve, reject) => {",
        "      if (obj.defaultPath == undefined) {",
        "        reject(",
        "          // storeやvue componentからdefaultPathを設定していなかったらrejectされる",
        "          new Error(",
        "            \"ブラウザ版ではファイルの保存機能が一部サポートされていません。\"",
        "          )",
        "        );",
        "      } else {",
        "        resolve(obj.defaultPath);",
        "      }"
      ],
      "text": "ブラウザ版ではファイルの保存機能が一部サポートされていません",
      "translation": ""
    },
    {
      "neighbors": [
        "    return new Promise((resolve, reject) => {",
        "      if (obj.defaultPath == undefined) {",
        "        reject(",
        "          // storeやvue componentからdefaultPathを設定していなかったらrejectされる",
        "          new Error(",
        "            \"ブラウザ版ではファイルの保存機能が一部サポートされていません。\"",
        "          )",
        "        );",
        "      } else {",
        "        resolve(obj.defaultPath);",
        "      }"
      ],
      "text": "ブラウザ版ではファイルの保存機能が一部サポートされていません",
      "translation": ""
    },
    {
      "neighbors": [
        "      }",
        "    });",
        "  },",
        "  showProjectLoadDialog(/* obj: { title: string } */) {",
        "    throw new Error(",
        "      \"ブラウザ版では現在ファイルの読み込みをサポートしていません\"",
        "    );",
        "  },",
        "  showMessageDialog(obj: {",
        "    type: \"none\" | \"info\" | \"error\" | \"question\" | \"warning\";",
        "    title: string;"
      ],
      "text": "ブラウザ版では現在ファイルの読み込みをサポートしていません",
      "translation": ""
    },
    {
      "neighbors": [
        "      `Not implemented: showQuestionDialog, request: ${JSON.stringify(obj)}`",
        "    );",
        "  },",
        "  showImportFileDialog(/* obj: { title: string } */) {",
        "    throw new Error(",
        "      \"ブラウザ版では現在ファイルの読み込みをサポートしていません\"",
        "    );",
        "  },",
        "  writeFile(obj: { filePath: string; buffer: ArrayBuffer }) {",
        "    return writeFileImpl(obj);",
        "  },"
      ],
      "text": "ブラウザ版では現在ファイルの読み込みをサポートしていません",
      "translation": ""
    },
    {
      "neighbors": [
        "  writeFile(obj: { filePath: string; buffer: ArrayBuffer }) {",
        "    return writeFileImpl(obj);",
        "  },",
        "  readFile(/* obj: { filePath: string } */) {",
        "    throw new Error(",
        "      \"ブラウザ版では現在ファイルの読み込みをサポートしていません\"",
        "    );",
        "  },",
        "  isAvailableGPUMode() {",
        "    // TODO: WebAssembly版をサポートする時に実装する",
        "    // FIXME: canvasでWebGLから調べたり、WebGPUがサポートされているかを調べたりで判断は出来そう"
      ],
      "text": "ブラウザ版では現在ファイルの読み込みをサポートしていません",
      "translation": ""
    }
  ],
  "fileImpl.ts": [
    {
      "neighbors": [
        "      maybeDirectoryPathKey",
        "    );",
        " ",
        "    if (maybeFixedDirectory == undefined) {",
        "      throw new Error(",
        "        `フォルダへのアクセス許可がありません。アクセスしようとしたフォルダ名: ${maybeDirectoryPathKey}`",
        "      );",
        "    }",
        " ",
        "    if (!(await maybeFixedDirectory.requestPermission({ mode: \"readwrite\" }))) {",
        "      throw new Error("
      ],
      "text": "フォルダへのアクセス許可がありません アクセスしようとしたフォルダ名",
      "translation": ""
    },
    {
      "neighbors": [
        "      );",
        "    }",
        " ",
        "    if (!(await maybeFixedDirectory.requestPermission({ mode: \"readwrite\" }))) {",
        "      throw new Error(",
        "        \"フォルダへのアクセス許可がありません。ファイルの読み書きのためにアクセス許可が必要です。\"",
        "      );",
        "    }",
        " ",
        "    return maybeFixedDirectory;",
        "  }"
      ],
      "text": "フォルダへのアクセス許可がありません ファイルの読み書きのためにアクセス許可が必要です",
      "translation": ""
    }
  ],
  "result.ts": [
    {
      "neighbors": [
        "/**",
        " * Result型。新しいErrorクラスを作らなくてもエラーハンドリングできる。",
        " *",
        " * 成功時はsuccess関数を使ってSuccessResultを返し、",
        " * エラー時はfailure関数を使ってFailureResultを返せば良い。",
        " *",
        " * 例：成功時はstringを返し、エラー時はErrorCodeA・ErrorCodeBを返す場合"
      ],
      "text": "型 新しい クラスを作らなくてもエラーハンドリングできる",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * Result型。新しいErrorクラスを作らなくてもエラーハンドリングできる。",
        " *",
        " * 成功時はsuccess関数を使ってSuccessResultを返し、",
        " * エラー時はfailure関数を使ってFailureResultを返せば良い。",
        " *",
        " * 例：成功時はstringを返し、エラー時はErrorCodeA・ErrorCodeBを返す場合",
        " *",
        " * // 関数定義"
      ],
      "text": "成功時は 関数を使って を返し",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * Result型。新しいErrorクラスを作らなくてもエラーハンドリングできる。",
        " *",
        " * 成功時はsuccess関数を使ってSuccessResultを返し、",
        " * エラー時はfailure関数を使ってFailureResultを返せば良い。",
        " *",
        " * 例：成功時はstringを返し、エラー時はErrorCodeA・ErrorCodeBを返す場合",
        " *",
        " * // 関数定義",
        " * function generateString(): Result<string, \"ErrorCodeA\" | \"ErrorCodeB\"> {"
      ],
      "text": "エラー時は 関数を使って を返せば良い",
      "translation": ""
    },
    {
      "neighbors": [
        " * Result型。新しいErrorクラスを作らなくてもエラーハンドリングできる。",
        " *",
        " * 成功時はsuccess関数を使ってSuccessResultを返し、",
        " * エラー時はfailure関数を使ってFailureResultを返せば良い。",
        " *",
        " * 例：成功時はstringを返し、エラー時はErrorCodeA・ErrorCodeBを返す場合",
        " *",
        " * // 関数定義",
        " * function generateString(): Result<string, \"ErrorCodeA\" | \"ErrorCodeB\"> {",
        " *   // 成功時",
        " *   return success(\"ok string\");"
      ],
      "text": "例 成功時は を返し エラー時は ・ を返す場合",
      "translation": ""
    },
    {
      "neighbors": [
        "export type Result<T, E extends string | undefined = string | undefined> =",
        "  | SuccessResult<T>",
        "  | FailureResult<E>;",
        " ",
        "/**",
        " * 成功Result",
        " */",
        "export type SuccessResult<T> = { ok: true; value: T };",
        " ",
        "/**",
        " * 失敗Result"
      ],
      "text": "成功",
      "translation": ""
    },
    {
      "neighbors": [
        " * 成功Result",
        " */",
        "export type SuccessResult<T> = { ok: true; value: T };",
        " ",
        "/**",
        " * 失敗Result",
        " */",
        "export type FailureResult<E> = {",
        "  ok: false;",
        "  code: E;",
        "  error: Error;"
      ],
      "text": "失敗",
      "translation": ""
    },
    {
      "neighbors": [
        "  code: E;",
        "  error: Error;",
        "};",
        " ",
        "/**",
        " * 成功Resultを返す",
        " */",
        "export const success = <T>(value: T): SuccessResult<T> => ({ ok: true, value });",
        "type Failure = {",
        "  (error: Error): FailureResult<undefined>;",
        "  <C extends string | undefined>(code: C, error: Error): FailureResult<C>;"
      ],
      "text": "成功 を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "  (error: Error): FailureResult<undefined>;",
        "  <C extends string | undefined>(code: C, error: Error): FailureResult<C>;",
        "};",
        " ",
        "/**",
        " * 失敗Resultを返す",
        " */",
        "export const failure: Failure = <C extends string>(",
        "  codeOrError: C | undefined | Error,",
        "  error?: Error",
        ") => {"
      ],
      "text": "失敗 を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "    this.code = result.code;",
        "  }",
        "}",
        " ",
        "/*",
        " * resultがSuccessResultの場合はvalueを返す",
        " * resultがFailureResultの場合はResultErrorをthrowする",
        " **/",
        "export const getValueOrThrow = <T>(result: Result<T>): T | never => {",
        "  if (result.ok) {",
        "    return result.value;"
      ],
      "text": "が の場合は を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "}",
        " ",
        "/*",
        " * resultがSuccessResultの場合はvalueを返す",
        " * resultがFailureResultの場合はResultErrorをthrowする",
        " **/",
        "export const getValueOrThrow = <T>(result: Result<T>): T | never => {",
        "  if (result.ok) {",
        "    return result.value;",
        "  } else {"
      ],
      "text": "が の場合は を する",
      "translation": ""
    }
  ],
  "preload.ts": [
    {
      "neighbors": [
        "  vuexReady: () => {",
        "    ipcRenderer.invoke(\"ON_VUEX_READY\");",
        "  },",
        " ",
        "  /**",
        "   * 設定情報を取得する",
        "   */",
        "  getSetting: async (key) => {",
        "    return (await ipcRendererInvoke(",
        "      \"GET_SETTING\",",
        "      key"
      ],
      "text": "設定情報を取得する",
      "translation": ""
    },
    {
      "neighbors": [
        "      key",
        "    )) as ConfigType[typeof key];",
        "  },",
        " ",
        "  /**",
        "   * 設定情報を保存する",
        "   */",
        "  setSetting: async (key, newValue) => {",
        "    return (await ipcRendererInvoke(",
        "      \"SET_SETTING\",",
        "      key,"
      ],
      "text": "設定情報を保存する",
      "translation": ""
    },
    {
      "neighbors": [
        "  validateEngineDir: async (engineDir) => {",
        "    return await ipcRendererInvoke(\"VALIDATE_ENGINE_DIR\", { engineDir });",
        "  },",
        " ",
        "  /**",
        "   * アプリを再読み込みする。",
        "   * 画面以外の情報を刷新する。",
        "   */",
        "  reloadApp: async ({ isMultiEngineOffMode }) => {",
        "    return await ipcRendererInvoke(\"RELOAD_APP\", { isMultiEngineOffMode });",
        "  },"
      ],
      "text": "アプリを再読み込みする",
      "translation": ""
    },
    {
      "neighbors": [
        "    return await ipcRendererInvoke(\"VALIDATE_ENGINE_DIR\", { engineDir });",
        "  },",
        " ",
        "  /**",
        "   * アプリを再読み込みする。",
        "   * 画面以外の情報を刷新する。",
        "   */",
        "  reloadApp: async ({ isMultiEngineOffMode }) => {",
        "    return await ipcRendererInvoke(\"RELOAD_APP\", { isMultiEngineOffMode });",
        "  },",
        "};"
      ],
      "text": "画面以外の情報を刷新する",
      "translation": ""
    }
  ],
  "map.ts": [
    {
      "neighbors": [
        "  fn1: (_: NonNullable<T>) => U1 | undefined,",
        "  fn2: (_: NonNullable<U1>) => U2 | undefined,",
        "  fn3: (_: NonNullable<U2>) => U3 | undefined",
        "): U3 | undefined;",
        "/**",
        " * 一連の関数を実行する。途中でundefinedを返すとその後undefinedを返す。",
        " */",
        "// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any",
        "export function mapUndefinedPipe(source: any, ...fn: Function[]) {",
        "  return fn.reduce((prev, curr) => {",
        "    if (prev === undefined) {"
      ],
      "text": "一連の関数を実行する 途中で を返すとその後 を返す",
      "translation": ""
    }
  ],
  "previewSliderHelper.ts": [
    {
      "neighbors": [
        "import { isOnCommandOrCtrlKeyDown } from \"@/store/utility\";",
        " ",
        "export type Props = {",
        "  onPan?: QSliderProps[\"onPan\"];",
        "  /**",
        "   * スライダーの値が確定した時に呼び出される。",
        "   */",
        "  onChange: (value: number) => Promise<void>;",
        "  modelValue: () => number | null;",
        "  /**",
        "   * デフォルトは`0`。"
      ],
      "text": "スライダーの値が確定した時に呼び出される",
      "translation": ""
    },
    {
      "neighbors": [
        "   * スライダーの値が確定した時に呼び出される。",
        "   */",
        "  onChange: (value: number) => Promise<void>;",
        "  modelValue: () => number | null;",
        "  /**",
        "   * デフォルトは`0`。",
        "   */",
        "  min?: () => number;",
        "  max: () => number;",
        "  /**",
        "   * デフォルトは`1`。"
      ],
      "text": "デフォルトは",
      "translation": ""
    },
    {
      "neighbors": [
        "   * デフォルトは`0`。",
        "   */",
        "  min?: () => number;",
        "  max: () => number;",
        "  /**",
        "   * デフォルトは`1`。",
        "   */",
        "  step?: () => number;",
        "  disable?: () => boolean;",
        "  /**",
        "   * デフォルトは`this.step`。"
      ],
      "text": "デフォルトは",
      "translation": ""
    },
    {
      "neighbors": [
        "   * デフォルトは`1`。",
        "   */",
        "  step?: () => number;",
        "  disable?: () => boolean;",
        "  /**",
        "   * デフォルトは`this.step`。",
        "   */",
        "  scrollStep?: () => number;",
        "  /**",
        "   * デフォルトは`this.scrollStep`。",
        "   */"
      ],
      "text": "デフォルトは",
      "translation": ""
    },
    {
      "neighbors": [
        "  /**",
        "   * デフォルトは`this.step`。",
        "   */",
        "  scrollStep?: () => number;",
        "  /**",
        "   * デフォルトは`this.scrollStep`。",
        "   */",
        "  scrollMinStep?: () => number;",
        "  disableScroll?: () => boolean;",
        "};",
        " "
      ],
      "text": "デフォルトは",
      "translation": ""
    },
    {
      "neighbors": [
        "    this.isCanceled = true;",
        "  }",
        "}",
        " ",
        "/**",
        " * スライダー用のヘルパー関数。ホイール操作やプレビュー値表示の機能がある。",
        " * @param props",
        " * q-sliderの描画に用いる引数",
        " * reactiveにする為にcomputedの引数の様に算出関数を渡す。",
        " * @returns QSliderProps",
        " * + state"
      ],
      "text": "スライダー用のヘルパー関数 ホイール操作やプレビュー値表示の機能がある",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "/**",
        " * スライダー用のヘルパー関数。ホイール操作やプレビュー値表示の機能がある。",
        " * @param props",
        " * q-sliderの描画に用いる引数",
        " * reactiveにする為にcomputedの引数の様に算出関数を渡す。",
        " * @returns QSliderProps",
        " * + state",
        " *   currentValue等、Slider外での描画の為に用いることができる変数",
        " * + qSliderProps"
      ],
      "text": "の描画に用いる引数",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * スライダー用のヘルパー関数。ホイール操作やプレビュー値表示の機能がある。",
        " * @param props",
        " * q-sliderの描画に用いる引数",
        " * reactiveにする為にcomputedの引数の様に算出関数を渡す。",
        " * @returns QSliderProps",
        " * + state",
        " *   currentValue等、Slider外での描画の為に用いることができる変数",
        " * + qSliderProps",
        " *   q-sliderに渡すべきprops"
      ],
      "text": "にする為に の引数の様に算出関数を渡す",
      "translation": ""
    },
    {
      "neighbors": [
        " * @param props",
        " * q-sliderの描画に用いる引数",
        " * reactiveにする為にcomputedの引数の様に算出関数を渡す。",
        " * @returns QSliderProps",
        " * + state",
        " *   currentValue等、Slider外での描画の為に用いることができる変数",
        " * + qSliderProps",
        " *   q-sliderに渡すべきprops",
        " */",
        "export const previewSliderHelper = (props: Props): PreviewSliderHelper => {",
        "  // Reactive references of each props"
      ],
      "text": "等 外での描画の為に用いることができる変数",
      "translation": ""
    },
    {
      "neighbors": [
        " * reactiveにする為にcomputedの引数の様に算出関数を渡す。",
        " * @returns QSliderProps",
        " * + state",
        " *   currentValue等、Slider外での描画の為に用いることができる変数",
        " * + qSliderProps",
        " *   q-sliderに渡すべきprops",
        " */",
        "export const previewSliderHelper = (props: Props): PreviewSliderHelper => {",
        "  // Reactive references of each props",
        "  const modelValue = computed(props.modelValue);",
        "  const min = computed(() => (props.min && props.min()) ?? 0);"
      ],
      "text": "に渡すべき",
      "translation": ""
    }
  ],
  "SelectionHelperForQInput.ts": [
    {
      "neighbors": [
        "import { QInput } from \"quasar\";",
        "import { Ref } from \"vue\";",
        " ",
        "/**",
        " * QInput の選択範囲への操作を簡単にできるようにするクラス",
        " */",
        "export class SelectionHelperForQInput {",
        "  private _nativeEl: HTMLInputElement | undefined = undefined;",
        " ",
        "  constructor(private textfield: Ref<QInput | undefined>) {}"
      ],
      "text": "の選択範囲への操作を簡単にできるようにするクラス",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        " ",
        "  private getNativeEl() {",
        "    const nativeEl = this.textfield.value?.nativeEl;",
        "    if (!(nativeEl instanceof HTMLInputElement)) {",
        "      throw new Error(\"nativeElの取得に失敗しました。\");",
        "    }",
        "    this._nativeEl = nativeEl;",
        "    return nativeEl;",
        "  }"
      ],
      "text": "の取得に失敗しました",
      "translation": ""
    }
  ],
  "useFetchNewUpdateInfos.ts": [
    {
      "neighbors": [
        "    .then(() => {",
        "      const url: string | undefined = import.meta.env",
        "        .VITE_LATEST_UPDATE_INFOS_URL;",
        "      if (!url) {",
        "        throw new Error(",
        "          \"VITE_LATEST_UPDATE_INFOS_URLが未設定です。.env内に記載してください。\"",
        "        );",
        "      }",
        "      fetch(url)",
        "        .then((response) => {",
        "          if (!response.ok) throw new Error(\"Network response was not ok.\");"
      ],
      "text": "が未設定です 内に記載してください",
      "translation": ""
    }
  ],
  "DefaultStyleListDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr lff\" class=\"bg-background\">",
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\"",
        "              >設定 / デフォルトスタイル・試聴</q-toolbar-title",
        "            >",
        "          </div>",
        " ",
        "          <q-space />",
        " "
      ],
      "text": "設定 デフォルトスタイル・試聴",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-space />",
        " ",
        "          <div class=\"row items-center no-wrap\">",
        "            <q-btn",
        "              unelevated",
        "              label=\"完了\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap\"",
        "              @click=\"closeDialog\"",
        "            />"
      ],
      "text": "完了",
      "translation": ""
    },
    {
      "neighbors": [
        "                      selectedStyles[speaker.metas.speakerUuid]",
        "                        ? selectedStyles[speaker.metas.speakerUuid].styleName",
        "                        : DEFAULT_STYLE_NAME",
        "                    }}</span",
        "                    ><span class=\"text-caption\"",
        "                      >全{{",
        "                        characterInfosMap[speaker.metas.speakerUuid].metas",
        "                          .styles.length",
        "                      }}スタイル</span",
        "                    >",
        "                  </div>"
      ],
      "text": "全",
      "translation": ""
    },
    {
      "neighbors": [
        "                    }}</span",
        "                    ><span class=\"text-caption\"",
        "                      >全{{",
        "                        characterInfosMap[speaker.metas.speakerUuid].metas",
        "                          .styles.length",
        "                      }}スタイル</span",
        "                    >",
        "                  </div>",
        "                </div>",
        "              </q-item>",
        "            </div>"
      ],
      "text": "スタイル",
      "translation": ""
    }
  ],
  "MinMaxCloseButtons.vue": [
    {
      "neighbors": [
        "      round",
        "      icon=\"lens\"",
        "      size=\"8.5px\"",
        "      color=\"red\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"閉じる\"",
        "      @click=\"closeWindow()\"",
        "    ></q-btn>",
        "    <q-btn",
        "      dense",
        "      flat"
      ],
      "text": "閉じる",
      "translation": ""
    },
    {
      "neighbors": [
        "      round",
        "      icon=\"lens\"",
        "      size=\"8.5px\"",
        "      color=\"yellow\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最小化\"",
        "      @click=\"minimizeWindow()\"",
        "    ></q-btn>",
        "    <q-btn",
        "      dense",
        "      flat"
      ],
      "text": "最小化",
      "translation": ""
    },
    {
      "neighbors": [
        "      round",
        "      icon=\"lens\"",
        "      size=\"8.5px\"",
        "      color=\"green\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最大化\"",
        "      @click=\"maximizeWindow()\"",
        "    ></q-btn>",
        "  </q-badge>",
        "  <q-badge",
        "    v-else"
      ],
      "text": "最大化",
      "translation": ""
    },
    {
      "neighbors": [
        "    <q-btn",
        "      dense",
        "      flat",
        "      icon=\"minimize\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最小化\"",
        "      @click=\"minimizeWindow()\"",
        "    ></q-btn>",
        " ",
        "    <q-btn",
        "      v-if=\"!isMaximized\""
      ],
      "text": "最小化",
      "translation": ""
    },
    {
      "neighbors": [
        "      v-if=\"!isMaximized\"",
        "      dense",
        "      flat",
        "      icon=\"crop_square\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最大化\"",
        "      @click=\"maximizeWindow()\"",
        "    ></q-btn>",
        "    <q-btn",
        "      v-else",
        "      dense"
      ],
      "text": "最大化",
      "translation": ""
    },
    {
      "neighbors": [
        "      v-else",
        "      dense",
        "      flat",
        "      :icon=\"mdiWindowRestore\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最大化\"",
        "      @click=\"maximizeWindow()\"",
        "    >",
        "    </q-btn>",
        " ",
        "    <q-btn"
      ],
      "text": "最大化",
      "translation": ""
    },
    {
      "neighbors": [
        "    <q-btn",
        "      dense",
        "      flat",
        "      icon=\"close\"",
        "      class=\"title-bar-buttons close\"",
        "      aria-label=\"閉じる\"",
        "      @click=\"closeWindow()\"",
        "    ></q-btn>",
        "  </q-badge>",
        "</template>",
        " "
      ],
      "text": "閉じる",
      "translation": ""
    }
  ],
  "MenuBar.vue": [
    {
      "neighbors": [
        "  () =>",
        "    (isEdited.value ? \"*\" : \"\") +",
        "    (projectName.value !== undefined ? projectName.value + \" - \" : \"\") +",
        "    \"VOICEVOX\" +",
        "    (currentVersion.value ? \" - Ver. \" + currentVersion.value : \"\") +",
        "    (isMultiEngineOffMode.value ? \" - マルチエンジンオフ\" : \"\") +",
        "    (defaultEngineAltPortTo.value != null",
        "      ? ` - Port: ${defaultEngineAltPortTo.value}`",
        "      : \"\")",
        ");",
        " "
      ],
      "text": "マルチエンジンオフ",
      "translation": ""
    },
    {
      "neighbors": [
        "  if (uiLocked.value) return;",
        " ",
        "  const activeAudioKey = store.getters.ACTIVE_AUDIO_KEY;",
        "  if (activeAudioKey == undefined) {",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"テキスト欄が選択されていません\",",
        "      message: \"音声を書き出したいテキスト欄を選択してください。\",",
        "    });",
        "    return;",
        "  }",
        " "
      ],
      "text": "テキスト欄が選択されていません",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  const activeAudioKey = store.getters.ACTIVE_AUDIO_KEY;",
        "  if (activeAudioKey == undefined) {",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"テキスト欄が選択されていません\",",
        "      message: \"音声を書き出したいテキスト欄を選択してください。\",",
        "    });",
        "    return;",
        "  }",
        " ",
        "  const selectedAudioKeys = store.getters.SELECTED_AUDIO_KEYS;"
      ],
      "text": "音声を書き出したいテキスト欄を選択してください",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const menudata = ref<MenuItemData[]>([",
        "  {",
        "    type: \"root\",",
        "    label: \"ファイル\",",
        "    onClick: () => {",
        "      closeAllDialog();",
        "    },",
        "    disableWhenUiLocked: false,",
        "    subMenu: ["
      ],
      "text": "ファイル",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "    disableWhenUiLocked: false,",
        "    subMenu: [",
        "      {",
        "        type: \"button\",",
        "        label: \"音声書き出し\",",
        "        onClick: () => {",
        "          generateAndSaveAllAudio();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "音声書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"選択音声を書き出し\",",
        "        onClick: () => {",
        "          generateAndSaveSelectedAudio();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "選択音声を書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"音声を繋げて書き出し\",",
        "        onClick: () => {",
        "          generateAndConnectAndSaveAllAudio();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "音声を繋げて書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "        disableWhenUiLocked: true,",
        "      },",
        "      { type: \"separator\" },",
        "      {",
        "        type: \"button\",",
        "        label: \"テキストを繋げて書き出し\",",
        "        onClick: () => {",
        "          connectAndExportText();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "テキストを繋げて書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"テキスト読み込み\",",
        "        onClick: () => {",
        "          importTextFile();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "テキスト読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "        disableWhenUiLocked: true,",
        "      },",
        "      { type: \"separator\" },",
        "      {",
        "        type: \"button\",",
        "        label: \"新規プロジェクト\",",
        "        onClick: createNewProject,",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\","
      ],
      "text": "新規プロジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "        onClick: createNewProject,",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"プロジェクトを上書き保存\",",
        "        onClick: async () => {",
        "          await saveProject();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "プロジェクトを上書き保存",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"プロジェクトを名前を付けて保存\",",
        "        onClick: async () => {",
        "          await saveProjectAs();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "プロジェクトを名前を付けて保存",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"プロジェクト読み込み\",",
        "        onClick: () => {",
        "          importProject();",
        "        },",
        "        disableWhenUiLocked: true,",
        "      },"
      ],
      "text": "プロジェクト読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"root\",",
        "        label: \"最近使ったプロジェクト\",",
        "        disableWhenUiLocked: true,",
        "        subMenu: [],",
        "      },",
        "    ],",
        "  },"
      ],
      "text": "最近使ったプロジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "      },",
        "    ],",
        "  },",
        "  {",
        "    type: \"root\",",
        "    label: \"エンジン\",",
        "    onClick: () => {",
        "      closeAllDialog();",
        "    },",
        "    disableWhenUiLocked: false,",
        "    subMenu: [],"
      ],
      "text": "エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "    disableWhenUiLocked: false,",
        "    subMenu: [],",
        "  },",
        "  {",
        "    type: \"root\",",
        "    label: \"設定\",",
        "    onClick: () => {",
        "      closeAllDialog();",
        "    },",
        "    disableWhenUiLocked: false,",
        "    subMenu: ["
      ],
      "text": "設定",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "    disableWhenUiLocked: false,",
        "    subMenu: [",
        "      {",
        "        type: \"button\",",
        "        label: \"キー割り当て\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isHotkeySettingDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "キー割り当て",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: false,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"ツールバーのカスタマイズ\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isToolbarSettingDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "ツールバーのカスタマイズ",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: false,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"キャラクター並び替え・試聴\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isCharacterOrderDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "キャラクター並び替え・試聴",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"デフォルトスタイル\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isDefaultStyleSelectDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "デフォルトスタイル",
      "translation": ""
    },
    {
      "neighbors": [
        "        },",
        "        disableWhenUiLocked: true,",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"読み方＆アクセント辞書\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isDictionaryManageDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "読み方 アクセント辞書",
      "translation": ""
    },
    {
      "neighbors": [
        "        disableWhenUiLocked: true,",
        "      },",
        "      { type: \"separator\" },",
        "      {",
        "        type: \"button\",",
        "        label: \"オプション\",",
        "        onClick() {",
        "          store.dispatch(\"SET_DIALOG_OPEN\", {",
        "            isSettingDialogOpen: true,",
        "          });",
        "        },"
      ],
      "text": "オプション",
      "translation": ""
    },
    {
      "neighbors": [
        "      },",
        "    ],",
        "  },",
        "  {",
        "    type: \"button\",",
        "    label: \"ヘルプ\",",
        "    onClick: () => {",
        "      if (store.state.isHelpDialogOpen) closeAllDialog();",
        "      else {",
        "        closeAllDialog();",
        "        openHelpDialog();"
      ],
      "text": "ヘルプ",
      "translation": ""
    },
    {
      "neighbors": [
        "    subMenuOpenFlags.value = arr;",
        "  }",
        "};",
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],"
      ],
      "text": "新規プロジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "};",
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],"
      ],
      "text": "音声書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],"
      ],
      "text": "選択音声を書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],",
        "]);"
      ],
      "text": "音声を繋げて書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],",
        "]);",
        " "
      ],
      "text": "テキスト読み込む",
      "translation": ""
    },
    {
      "neighbors": [
        "  [\"新規プロジェクト\", createNewProject],",
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],",
        "]);",
        " ",
        "setHotkeyFunctions(hotkeyMap);"
      ],
      "text": "プロジェクトを上書き保存",
      "translation": ""
    },
    {
      "neighbors": [
        "  [\"音声書き出し\", generateAndSaveAllAudio],",
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],",
        "]);",
        " ",
        "setHotkeyFunctions(hotkeyMap);",
        " "
      ],
      "text": "プロジェクトを名前を付けて保存",
      "translation": ""
    },
    {
      "neighbors": [
        "  [\"選択音声を書き出し\", generateAndSaveSelectedAudio],",
        "  [\"音声を繋げて書き出し\", generateAndConnectAndSaveAllAudio],",
        "  [\"テキスト読み込む\", importTextFile],",
        "  [\"プロジェクトを上書き保存\", saveProject],",
        "  [\"プロジェクトを名前を付けて保存\", saveProjectAs],",
        "  [\"プロジェクト読み込み\", importProject],",
        "]);",
        " ",
        "setHotkeyFunctions(hotkeyMap);",
        " ",
        "// エンジン毎の項目を追加"
      ],
      "text": "プロジェクト読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "setHotkeyFunctions(hotkeyMap);",
        " ",
        "// エンジン毎の項目を追加",
        "async function updateEngines() {",
        "  const engineMenu = menudata.value.find(",
        "    (x) => x.type === \"root\" && x.label === \"エンジン\"",
        "  ) as MenuItemRoot;",
        "  if (Object.values(engineInfos.value).length === 1) {",
        "    const engineInfo = Object.values(engineInfos.value)[0];",
        "    engineMenu.subMenu = [",
        "      {"
      ],
      "text": "エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "  if (Object.values(engineInfos.value).length === 1) {",
        "    const engineInfo = Object.values(engineInfos.value)[0];",
        "    engineMenu.subMenu = [",
        "      {",
        "        type: \"button\",",
        "        label: \"再起動\",",
        "        onClick: () => {",
        "          store.dispatch(\"RESTART_ENGINES\", {",
        "            engineIds: [engineInfo.uuid],",
        "          });",
        "        },"
      ],
      "text": "再起動",
      "translation": ""
    },
    {
      "neighbors": [
        "              engineManifests.value[engineInfo.uuid] &&",
        "              base64ImageToUri(engineManifests.value[engineInfo.uuid].icon),",
        "            subMenu: [",
        "              engineInfo.path && {",
        "                type: \"button\",",
        "                label: \"フォルダを開く\",",
        "                onClick: () => {",
        "                  store.dispatch(\"OPEN_ENGINE_DIRECTORY\", {",
        "                    engineId: engineInfo.uuid,",
        "                  });",
        "                },"
      ],
      "text": "フォルダを開く",
      "translation": ""
    },
    {
      "neighbors": [
        "                },",
        "                disableWhenUiLocked: false,",
        "              },",
        "              {",
        "                type: \"button\",",
        "                label: \"再起動\",",
        "                onClick: () => {",
        "                  store.dispatch(\"RESTART_ENGINES\", {",
        "                    engineIds: [engineInfo.uuid],",
        "                  });",
        "                },"
      ],
      "text": "再起動",
      "translation": ""
    },
    {
      "neighbors": [
        "      {",
        "        type: \"separator\",",
        "      },",
        "      {",
        "        type: \"button\",",
        "        label: \"全てのエンジンを再起動\",",
        "        onClick: () => {",
        "          store.dispatch(\"RESTART_ENGINES\", { engineIds: engineIds.value });",
        "        },",
        "        disableWhenUiLocked: false,",
        "      },"
      ],
      "text": "全てのエンジンを再起動",
      "translation": ""
    },
    {
      "neighbors": [
        "    ];",
        "  }",
        "  if (enableMultiEngine.value) {",
        "    engineMenu.subMenu.push({",
        "      type: \"button\",",
        "      label: \"エンジンの管理\",",
        "      onClick: () => {",
        "        store.dispatch(\"SET_DIALOG_OPEN\", {",
        "          isEngineManageDialogOpen: true,",
        "        });",
        "      },"
      ],
      "text": "エンジンの管理",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "  // マルチエンジンオフモードの解除",
        "  if (store.state.isMultiEngineOffMode) {",
        "    engineMenu.subMenu.push({",
        "      type: \"button\",",
        "      label: \"マルチエンジンをオンにして再読み込み\",",
        "      onClick() {",
        "        store.dispatch(\"RELOAD_APP\", {",
        "          isMultiEngineOffMode: false,",
        "        });",
        "      },"
      ],
      "text": "マルチエンジンをオンにして再読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "});",
        " ",
        "// 「最近開いたプロジェクト」の更新",
        "async function updateRecentProjects() {",
        "  const projectsMenu = menudata.value.find(",
        "    (x) => x.type === \"root\" && x.label === \"ファイル\"",
        "  ) as MenuItemRoot;",
        "  const recentProjectsMenu = projectsMenu.subMenu.find(",
        "    (x) => x.type === \"root\" && x.label === \"最近使ったプロジェクト\"",
        "  ) as MenuItemRoot;",
        " "
      ],
      "text": "ファイル",
      "translation": ""
    },
    {
      "neighbors": [
        "async function updateRecentProjects() {",
        "  const projectsMenu = menudata.value.find(",
        "    (x) => x.type === \"root\" && x.label === \"ファイル\"",
        "  ) as MenuItemRoot;",
        "  const recentProjectsMenu = projectsMenu.subMenu.find(",
        "    (x) => x.type === \"root\" && x.label === \"最近使ったプロジェクト\"",
        "  ) as MenuItemRoot;",
        " ",
        "  const recentlyUsedProjects = await store.dispatch(",
        "    \"GET_RECENTLY_USED_PROJECTS\"",
        "  );"
      ],
      "text": "最近使ったプロジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "  recentProjectsMenu.subMenu =",
        "    recentlyUsedProjects.length === 0",
        "      ? [",
        "          {",
        "            type: \"button\",",
        "            label: \"最近使ったプロジェクトはありません\",",
        "            onClick: () => {",
        "              // 何もしない",
        "            },",
        "            disabled: true,",
        "            disableWhenUiLocked: false,"
      ],
      "text": "最近使ったプロジェクトはありません",
      "translation": ""
    }
  ],
  "CharacterPortrait.vue": [
    {
      "neighbors": [
        "});",
        " ",
        "const characterName = computed(() => {",
        "  // 初期化前・未選択時",
        "  if (characterInfo.value == undefined) {",
        "    return \"（表示エラー）\";",
        "  }",
        " ",
        "  const speakerName = characterInfo.value.metas.speakerName;",
        "  const styleName = styleInfo.value?.styleName;",
        "  return styleName"
      ],
      "text": "表示エラー",
      "translation": ""
    }
  ],
  "HotkeySettingDialog.vue": [
    {
      "neighbors": [
        "  >",
        "    <q-layout container view=\"hHh Lpr lff\" class=\"bg-background\">",
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <q-toolbar-title class=\"text-display\"",
        "            >設定 / キー割り当て</q-toolbar-title",
        "          >",
        "          <q-input",
        "            v-model=\"hotkeyFilter\"",
        "            hide-bottom-space",
        "            dense"
      ],
      "text": "設定 キー割り当て",
      "translation": ""
    },
    {
      "neighbors": [
        "          >",
        "          <q-input",
        "            v-model=\"hotkeyFilter\"",
        "            hide-bottom-space",
        "            dense",
        "            placeholder=\"検索\"",
        "            color=\"display\"",
        "            class=\"q-mr-sm search-box\"",
        "          >",
        "            <template #prepend>",
        "              <q-icon name=\"search\" />"
      ],
      "text": "検索",
      "translation": ""
    },
    {
      "neighbors": [
        "                    padding=\"none sm\"",
        "                    size=\"1em\"",
        "                    :disable=\"checkHotkeyReadonly(tableProps.row.action)\"",
        "                    @click=\"resetHotkey(tableProps.row.action)\"",
        "                  >",
        "                    <q-tooltip :delay=\"500\">デフォルトに戻す</q-tooltip>",
        "                  </q-btn>",
        "                </q-td>",
        "              </q-tr>",
        "            </template>",
        "          </q-table>"
      ],
      "text": "デフォルトに戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "    :model-value=\"isHotkeyDialogOpened\"",
        "    @update:model-value=\"closeHotkeyDialog\"",
        "  >",
        "    <q-card class=\"q-py-sm q-px-md\">",
        "      <q-card-section align=\"center\">",
        "        <div class=\"text-h6\">ショートカットキーを入力してください</div>",
        "      </q-card-section>",
        "      <q-card-section align=\"center\">",
        "        <template v-for=\"(hotkey, index) in lastRecord.split(' ')\" :key=\"index\">",
        "          <span v-if=\"index !== 0\"> + </span>",
        "          <!--"
      ],
      "text": "ショートカットキーを入力してください",
      "translation": ""
    },
    {
      "neighbors": [
        "      </q-card-section>",
        "      <q-card-section align=\"center\">",
        "        <template v-for=\"(hotkey, index) in lastRecord.split(' ')\" :key=\"index\">",
        "          <span v-if=\"index !== 0\"> + </span>",
        "          <!--",
        "          Mac の Meta キーは Cmd キーであるため、Meta の表示名を Cmd に置換する",
        "          Windows PC では Meta キーは Windows キーだが、使用頻度低と考えられるため暫定的に Mac 対応のみを考慮している",
        "          -->",
        "          <q-chip :ripple=\"false\" color=\"surface\">",
        "            {{ hotkey === \"Meta\" ? \"Cmd\" : hotkey }}",
        "          </q-chip>"
      ],
      "text": "の キーは キーであるため の表示名を に置換する",
      "translation": ""
    },
    {
      "neighbors": [
        "      <q-card-section align=\"center\">",
        "        <template v-for=\"(hotkey, index) in lastRecord.split(' ')\" :key=\"index\">",
        "          <span v-if=\"index !== 0\"> + </span>",
        "          <!--",
        "          Mac の Meta キーは Cmd キーであるため、Meta の表示名を Cmd に置換する",
        "          Windows PC では Meta キーは Windows キーだが、使用頻度低と考えられるため暫定的に Mac 対応のみを考慮している",
        "          -->",
        "          <q-chip :ripple=\"false\" color=\"surface\">",
        "            {{ hotkey === \"Meta\" ? \"Cmd\" : hotkey }}",
        "          </q-chip>",
        "        </template>"
      ],
      "text": "では キーは キーだが 使用頻度低と考えられるため暫定的に 対応のみを考慮している",
      "translation": ""
    },
    {
      "neighbors": [
        "          </q-chip>",
        "        </template>",
        "        <span v-if=\"lastRecord !== '' && confirmBtnEnabled\"> +</span>",
        "        <div v-if=\"duplicatedHotkey != undefined\" class=\"text-warning q-mt-lg\">",
        "          <div class=\"text-warning\">",
        "            ショートカットキーが次の操作と重複しています",
        "          </div>",
        "          <div class=\"q-mt-sm text-weight-bold text-warning\">",
        "            「{{ duplicatedHotkey.action }}」",
        "          </div>",
        "        </div>"
      ],
      "text": "ショートカットキーが次の操作と重複しています",
      "translation": ""
    },
    {
      "neighbors": [
        "        </div>",
        "      </q-card-section>",
        "      <q-card-actions align=\"center\">",
        "        <q-btn",
        "          padding=\"xs md\"",
        "          label=\"キャンセル\"",
        "          unelevated",
        "          color=\"surface\"",
        "          text-color=\"display\"",
        "          class=\"q-mt-sm\"",
        "          @click=\"closeHotkeyDialog\""
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "          class=\"q-mt-sm\"",
        "          @click=\"closeHotkeyDialog\"",
        "        />",
        "        <q-btn",
        "          padding=\"xs md\"",
        "          label=\"ショートカットキーを未設定にする\"",
        "          unelevated",
        "          color=\"surface\"",
        "          text-color=\"display\"",
        "          class=\"q-mt-sm\"",
        "          @click=\""
      ],
      "text": "ショートカットキーを未設定にする",
      "translation": ""
    },
    {
      "neighbors": [
        "          \"",
        "        />",
        "        <q-btn",
        "          v-else",
        "          padding=\"xs md\"",
        "          label=\"上書きする\"",
        "          unelevated",
        "          color=\"primary\"",
        "          text-color=\"display-on-primary\"",
        "          class=\"q-mt-sm\"",
        "          :disabled=\"confirmBtnEnabled\""
      ],
      "text": "上書きする",
      "translation": ""
    },
    {
      "neighbors": [
        "  }[]",
        ">([",
        "  {",
        "    name: \"action\",",
        "    align: \"left\",",
        "    label: \"操作\",",
        "    field: \"action\",",
        "  },",
        "  {",
        "    name: \"combination\",",
        "    align: \"left\","
      ],
      "text": "操作",
      "translation": ""
    },
    {
      "neighbors": [
        "    field: \"action\",",
        "  },",
        "  {",
        "    name: \"combination\",",
        "    align: \"left\",",
        "    label: \"ショートカットキー\",",
        "    field: \"combination\",",
        "  },",
        "]);",
        " ",
        "const lastAction = ref(\"\");"
      ],
      "text": "ショートカットキー",
      "translation": ""
    },
    {
      "neighbors": [
        "const deleteHotkey = (action: string) => {",
        "  changeHotkeySettings(action, \"\");",
        "};",
        " ",
        "const getHotkeyText = (action: string, combo: string) => {",
        "  if (checkHotkeyReadonly(action)) combo = \"（読み取り専用）\" + combo;",
        "  if (combo == \"\") return \"未設定\";",
        "  else return combo;",
        "};",
        " ",
        "// for later developers, in case anyone wants to add a readonly hotkey"
      ],
      "text": "読み取り専用",
      "translation": ""
    },
    {
      "neighbors": [
        "  changeHotkeySettings(action, \"\");",
        "};",
        " ",
        "const getHotkeyText = (action: string, combo: string) => {",
        "  if (checkHotkeyReadonly(action)) combo = \"（読み取り専用）\" + combo;",
        "  if (combo == \"\") return \"未設定\";",
        "  else return combo;",
        "};",
        " ",
        "// for later developers, in case anyone wants to add a readonly hotkey",
        "const readonlyHotkeyKeys: string[] = [];"
      ],
      "text": "未設定",
      "translation": ""
    },
    {
      "neighbors": [
        "  );",
        "});",
        " ",
        "const resetHotkey = async (action: string) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ショートカットキーを初期値に戻します\",",
        "    message: `${action}のショートカットキーを初期値に戻します。<br/>本当に戻しますか？`,",
        "    html: true,",
        "    actionName: \"初期値に戻す\",",
        "    cancel: \"初期値に戻さない\",",
        "  });"
      ],
      "text": "ショートカットキーを初期値に戻します",
      "translation": ""
    },
    {
      "neighbors": [
        "});",
        " ",
        "const resetHotkey = async (action: string) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ショートカットキーを初期値に戻します\",",
        "    message: `${action}のショートカットキーを初期値に戻します。<br/>本当に戻しますか？`,",
        "    html: true,",
        "    actionName: \"初期値に戻す\",",
        "    cancel: \"初期値に戻さない\",",
        "  });",
        "  if (result === \"OK\") {"
      ],
      "text": "のショートカットキーを初期値に戻します 本当に戻しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "const resetHotkey = async (action: string) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ショートカットキーを初期値に戻します\",",
        "    message: `${action}のショートカットキーを初期値に戻します。<br/>本当に戻しますか？`,",
        "    html: true,",
        "    actionName: \"初期値に戻す\",",
        "    cancel: \"初期値に戻さない\",",
        "  });",
        "  if (result === \"OK\") {",
        "    window.electron",
        "      .getDefaultHotkeySettings()"
      ],
      "text": "初期値に戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ショートカットキーを初期値に戻します\",",
        "    message: `${action}のショートカットキーを初期値に戻します。<br/>本当に戻しますか？`,",
        "    html: true,",
        "    actionName: \"初期値に戻す\",",
        "    cancel: \"初期値に戻さない\",",
        "  });",
        "  if (result === \"OK\") {",
        "    window.electron",
        "      .getDefaultHotkeySettings()",
        "      .then((defaultSettings: HotkeySetting[]) => {"
      ],
      "text": "初期値に戻さない",
      "translation": ""
    }
  ],
  "DictionaryManageDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr fFf\" class=\"bg-background\">",
        "      <q-page-container>",
        "        <q-header class=\"q-pa-sm\">",
        "          <q-toolbar>",
        "            <q-toolbar-title class=\"text-display\"",
        "              >読み方＆アクセント辞書</q-toolbar-title",
        "            >",
        "            <q-space />",
        "            <!-- close button -->",
        "            <q-btn",
        "              round"
      ],
      "text": "読み方 アクセント辞書",
      "translation": ""
    },
    {
      "neighbors": [
        "          <div v-if=\"loadingDictState\" class=\"loading-dict\">",
        "            <div>",
        "              <q-spinner color=\"primary\" size=\"2.5rem\" />",
        "              <div class=\"q-mt-xs\">",
        "                <template v-if=\"loadingDictState === 'loading'\"",
        "                  >読み込み中・・・</template",
        "                >",
        "                <template v-if=\"loadingDictState === 'synchronizing'\"",
        "                  >同期中・・・</template",
        "                >",
        "              </div>"
      ],
      "text": "読み込み中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "              <div class=\"q-mt-xs\">",
        "                <template v-if=\"loadingDictState === 'loading'\"",
        "                  >読み込み中・・・</template",
        "                >",
        "                <template v-if=\"loadingDictState === 'synchronizing'\"",
        "                  >同期中・・・</template",
        "                >",
        "              </div>",
        "            </div>",
        "          </div>",
        "          <div class=\"col-4 word-list-col\">"
      ],
      "text": "同期中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "              v-if=\"wordEditing\"",
        "              class=\"word-list-disable-overlay\"",
        "              @click=\"discardOrNotDialog(cancel)\"",
        "            />",
        "            <div class=\"word-list-header text-no-wrap\">",
        "              <div class=\"row word-list-title text-h5\">単語一覧</div>",
        "              <div class=\"row no-wrap\">",
        "                <q-btn",
        "                  outline",
        "                  text-color=\"warning\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\""
      ],
      "text": "単語一覧",
      "translation": ""
    },
    {
      "neighbors": [
        "                  outline",
        "                  text-color=\"warning\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\"",
        "                  :disable=\"uiLocked || !isDeletable\"",
        "                  @click=\"deleteWord\"",
        "                  >削除</q-btn",
        "                >",
        "                <q-btn",
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\""
      ],
      "text": "削除",
      "translation": ""
    },
    {
      "neighbors": [
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\"",
        "                  :disable=\"uiLocked || !selectedId\"",
        "                  @click=\"editWord\"",
        "                  >編集</q-btn",
        "                >",
        "                <q-btn",
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\""
      ],
      "text": "編集",
      "translation": ""
    },
    {
      "neighbors": [
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\"",
        "                  :disable=\"uiLocked\"",
        "                  @click=\"newWord\"",
        "                  >追加</q-btn",
        "                >",
        "              </div>",
        "            </div>",
        "            <q-list class=\"word-list\">",
        "              <q-item"
      ],
      "text": "追加",
      "translation": ""
    },
    {
      "neighbors": [
        "          <div",
        "            v-if=\"wordEditing\"",
        "            class=\"col-8 no-wrap text-no-wrap word-editor\"",
        "          >",
        "            <div class=\"row q-pl-md q-mt-md\">",
        "              <div class=\"text-h6\">単語</div>",
        "              <q-input",
        "                ref=\"surfaceInput\"",
        "                v-model=\"surface\"",
        "                class=\"word-input\"",
        "                dense"
      ],
      "text": "単語",
      "translation": ""
    },
    {
      "neighbors": [
        "                @blur=\"setSurface(surface)\"",
        "                @keydown.enter=\"yomiFocus\"",
        "              />",
        "            </div>",
        "            <div class=\"row q-pl-md q-pt-sm\">",
        "              <div class=\"text-h6\">読み</div>",
        "              <q-input",
        "                ref=\"yomiInput\"",
        "                v-model=\"yomi\"",
        "                class=\"word-input q-pb-none\"",
        "                dense"
      ],
      "text": "読み",
      "translation": ""
    },
    {
      "neighbors": [
        "                :disable=\"uiLocked\"",
        "                @blur=\"setYomi(yomi)\"",
        "                @keydown.enter=\"setYomiWhenEnter\"",
        "              >",
        "                <template #error>",
        "                  読みに使える文字はひらがなとカタカナのみです。",
        "                </template>",
        "              </q-input>",
        "            </div>",
        "            <div class=\"row q-pl-md q-mt-lg text-h6\">アクセント調整</div>",
        "            <div class=\"row q-pl-md desc-row\">"
      ],
      "text": "読みに使える文字はひらがなとカタカナのみです",
      "translation": ""
    },
    {
      "neighbors": [
        "                <template #error>",
        "                  読みに使える文字はひらがなとカタカナのみです。",
        "                </template>",
        "              </q-input>",
        "            </div>",
        "            <div class=\"row q-pl-md q-mt-lg text-h6\">アクセント調整</div>",
        "            <div class=\"row q-pl-md desc-row\">",
        "              語尾のアクセントを考慮するため、「が」が自動で挿入されます。",
        "            </div>",
        "            <div class=\"row q-px-md\" style=\"height: 130px\">",
        "              <div class=\"play-button\">"
      ],
      "text": "アクセント調整",
      "translation": ""
    },
    {
      "neighbors": [
        "                </template>",
        "              </q-input>",
        "            </div>",
        "            <div class=\"row q-pl-md q-mt-lg text-h6\">アクセント調整</div>",
        "            <div class=\"row q-pl-md desc-row\">",
        "              語尾のアクセントを考慮するため、「が」が自動で挿入されます。",
        "            </div>",
        "            <div class=\"row q-px-md\" style=\"height: 130px\">",
        "              <div class=\"play-button\">",
        "                <q-btn",
        "                  v-if=\"!nowPlaying && !nowGenerating\""
      ],
      "text": "語尾のアクセントを考慮するため が が自動で挿入されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                    />",
        "                  </template>",
        "                </div>",
        "              </div>",
        "            </div>",
        "            <div class=\"row q-pl-md q-pt-lg text-h6\">単語優先度</div>",
        "            <div class=\"row q-pl-md desc-row\">",
        "              単語を登録しても反映されない場合は優先度を高くしてください。",
        "            </div>",
        "            <div",
        "              class=\"row q-px-md\""
      ],
      "text": "単語優先度",
      "translation": ""
    },
    {
      "neighbors": [
        "                </div>",
        "              </div>",
        "            </div>",
        "            <div class=\"row q-pl-md q-pt-lg text-h6\">単語優先度</div>",
        "            <div class=\"row q-pl-md desc-row\">",
        "              単語を登録しても反映されない場合は優先度を高くしてください。",
        "            </div>",
        "            <div",
        "              class=\"row q-px-md\"",
        "              :style=\"{",
        "                justifyContent: 'center',"
      ],
      "text": "単語を登録しても反映されない場合は優先度を高くしてください",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disable=\"uiLocked || !isWordChanged\"",
        "                @click=\"resetWord\"",
        "                >リセット</q-btn",
        "              >",
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\""
      ],
      "text": "リセット",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disable=\"uiLocked\"",
        "                @click=\"discardOrNotDialog(cancel)\"",
        "                >キャンセル</q-btn",
        "              >",
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\""
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disable=\"uiLocked || !isWordChanged\"",
        "                @click=\"saveWord\"",
        "                >保存</q-btn",
        "              >",
        "            </div>",
        "          </div>",
        "        </q-page>",
        "      </q-page-container>"
      ],
      "text": "保存",
      "translation": ""
    },
    {
      "neighbors": [
        "    userDict.value = await createUILockAction(",
        "      store.dispatch(\"LOAD_ALL_USER_DICT\")",
        "    );",
        "  } catch {",
        "    const result = await store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"辞書の取得に失敗しました\",",
        "      message: \"エンジンの再起動をお試しください。\",",
        "    });",
        "    if (result === \"OK\") {",
        "      dictionaryManageDialogOpenedComputed.value = false;",
        "    }"
      ],
      "text": "辞書の取得に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "      store.dispatch(\"LOAD_ALL_USER_DICT\")",
        "    );",
        "  } catch {",
        "    const result = await store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"辞書の取得に失敗しました\",",
        "      message: \"エンジンの再起動をお試しください。\",",
        "    });",
        "    if (result === \"OK\") {",
        "      dictionaryManageDialogOpenedComputed.value = false;",
        "    }",
        "  }"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "  loadingDictState.value = \"synchronizing\";",
        "  try {",
        "    await createUILockAction(store.dispatch(\"SYNC_ALL_USER_DICT\"));",
        "  } catch {",
        "    await store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"辞書の同期に失敗しました\",",
        "      message: \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "  loadingDictState.value = null;",
        "};"
      ],
      "text": "辞書の同期に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "  try {",
        "    await createUILockAction(store.dispatch(\"SYNC_ALL_USER_DICT\"));",
        "  } catch {",
        "    await store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"辞書の同期に失敗しました\",",
        "      message: \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "  loadingDictState.value = null;",
        "};",
        "watch(dictionaryManageDialogOpenedComputed, async (newValue) => {"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "    text = convertHiraToKana(text);",
        "    text = convertLongVowel(text);",
        "    accentPhrase.value = (",
        "      await createUILockAction(",
        "        store.dispatch(\"FETCH_ACCENT_PHRASES\", {",
        "          text: text + \"ガ'\",",
        "          engineId,",
        "          styleId,",
        "          isKana: true,",
        "        })",
        "      )"
      ],
      "text": "ガ",
      "translation": ""
    },
    {
      "neighbors": [
        "      );",
        "    } catch (e) {",
        "      window.electron.logError(e);",
        "      nowGenerating.value = false;",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"生成に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  }"
      ],
      "text": "生成に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    } catch (e) {",
        "      window.electron.logError(e);",
        "      nowGenerating.value = false;",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"生成に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  }",
        "  nowGenerating.value = false;"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "  return accent;",
        "};",
        " ",
        "const wordPriority = ref(defaultDictPriority);",
        "const wordPriorityLabels = {",
        "  0: \"最低\",",
        "  3: \"低\",",
        "  5: \"標準\",",
        "  7: \"高\",",
        "  10: \"最高\",",
        "};"
      ],
      "text": "最低",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const wordPriority = ref(defaultDictPriority);",
        "const wordPriorityLabels = {",
        "  0: \"最低\",",
        "  3: \"低\",",
        "  5: \"標準\",",
        "  7: \"高\",",
        "  10: \"最高\",",
        "};",
        " "
      ],
      "text": "低",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const wordPriority = ref(defaultDictPriority);",
        "const wordPriorityLabels = {",
        "  0: \"最低\",",
        "  3: \"低\",",
        "  5: \"標準\",",
        "  7: \"高\",",
        "  10: \"最高\",",
        "};",
        " ",
        "// 操作（ステートの移動）"
      ],
      "text": "標準",
      "translation": ""
    },
    {
      "neighbors": [
        "const wordPriority = ref(defaultDictPriority);",
        "const wordPriorityLabels = {",
        "  0: \"最低\",",
        "  3: \"低\",",
        "  5: \"標準\",",
        "  7: \"高\",",
        "  10: \"最高\",",
        "};",
        " ",
        "// 操作（ステートの移動）",
        "const isWordChanged = computed(() => {"
      ],
      "text": "高",
      "translation": ""
    },
    {
      "neighbors": [
        "const wordPriorityLabels = {",
        "  0: \"最低\",",
        "  3: \"低\",",
        "  5: \"標準\",",
        "  7: \"高\",",
        "  10: \"最高\",",
        "};",
        " ",
        "// 操作（ステートの移動）",
        "const isWordChanged = computed(() => {",
        "  if (selectedId.value === \"\") {"
      ],
      "text": "最高",
      "translation": ""
    },
    {
      "neighbors": [
        "        accentType: accent,",
        "        priority: wordPriority.value,",
        "      });",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の更新に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  } else {"
      ],
      "text": "単語の更新に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "        priority: wordPriority.value,",
        "      });",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の更新に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  } else {",
        "    try {"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "          priority: wordPriority.value,",
        "        })",
        "      );",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の登録に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  }"
      ],
      "text": "単語の登録に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "        })",
        "      );",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の登録に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "  }",
        "  await loadingDictProcess();"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "  toInitialState();",
        "};",
        "const isDeletable = computed(() => !!selectedId.value);",
        "const deleteWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"登録された単語を削除しますか？\",",
        "    message: \"削除された単語は復旧できません。\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    try {"
      ],
      "text": "登録された単語を削除しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        "const isDeletable = computed(() => !!selectedId.value);",
        "const deleteWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"登録された単語を削除しますか？\",",
        "    message: \"削除された単語は復旧できません。\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    try {",
        "      await createUILockAction("
      ],
      "text": "削除された単語は復旧できません",
      "translation": ""
    },
    {
      "neighbors": [
        "const isDeletable = computed(() => !!selectedId.value);",
        "const deleteWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"登録された単語を削除しますか？\",",
        "    message: \"削除された単語は復旧できません。\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    try {",
        "      await createUILockAction(",
        "        store.dispatch(\"DELETE_WORD\", {"
      ],
      "text": "削除",
      "translation": ""
    },
    {
      "neighbors": [
        "          wordUuid: selectedId.value,",
        "        })",
        "      );",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の削除に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "    await loadingDictProcess();"
      ],
      "text": "単語の削除に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "        })",
        "      );",
        "    } catch {",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"単語の削除に失敗しました\",",
        "        message: \"エンジンの再起動をお試しください。\",",
        "      });",
        "      return;",
        "    }",
        "    await loadingDictProcess();",
        "    toInitialState();"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "    toInitialState();",
        "  }",
        "};",
        "const resetWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"単語の変更をリセットしますか？\",",
        "    message: \"単語の変更は破棄されてリセットされます。\",",
        "    actionName: \"リセット\",",
        "  });",
        "  if (result === \"OK\") {",
        "    toWordEditingState();"
      ],
      "text": "単語の変更をリセットしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "};",
        "const resetWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"単語の変更をリセットしますか？\",",
        "    message: \"単語の変更は破棄されてリセットされます。\",",
        "    actionName: \"リセット\",",
        "  });",
        "  if (result === \"OK\") {",
        "    toWordEditingState();",
        "  }"
      ],
      "text": "単語の変更は破棄されてリセットされます",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        "const resetWord = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"単語の変更をリセットしますか？\",",
        "    message: \"単語の変更は破棄されてリセットされます。\",",
        "    actionName: \"リセット\",",
        "  });",
        "  if (result === \"OK\") {",
        "    toWordEditingState();",
        "  }",
        "};"
      ],
      "text": "リセット",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "};",
        "const discardOrNotDialog = async (okCallback: () => void) => {",
        "  if (isWordChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"単語の追加・変更を破棄しますか？\",",
        "      message:",
        "        \"このまま続行すると、単語の追加・変更は破棄されてリセットされます。\",",
        "      actionName: \"続行\",",
        "    });",
        "    if (result === \"OK\") {"
      ],
      "text": "単語の追加・変更を破棄しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "const discardOrNotDialog = async (okCallback: () => void) => {",
        "  if (isWordChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"単語の追加・変更を破棄しますか？\",",
        "      message:",
        "        \"このまま続行すると、単語の追加・変更は破棄されてリセットされます。\",",
        "      actionName: \"続行\",",
        "    });",
        "    if (result === \"OK\") {",
        "      okCallback();",
        "    }"
      ],
      "text": "このまま続行すると 単語の追加・変更は破棄されてリセットされます",
      "translation": ""
    },
    {
      "neighbors": [
        "  if (isWordChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"単語の追加・変更を破棄しますか？\",",
        "      message:",
        "        \"このまま続行すると、単語の追加・変更は破棄されてリセットされます。\",",
        "      actionName: \"続行\",",
        "    });",
        "    if (result === \"OK\") {",
        "      okCallback();",
        "    }",
        "  } else {"
      ],
      "text": "続行",
      "translation": ""
    }
  ],
  "CharacterButton.vue": [
    {
      "neighbors": [
        "        <q-item",
        "          v-if=\"selectedStyleInfo == undefined && !emptiable\"",
        "          class=\"warning-item row no-wrap items-center\"",
        "        >",
        "          <span class=\"text-warning vertical-middle\"",
        "            >有効なスタイルが選択されていません</span",
        "          >",
        "        </q-item>",
        "        <q-item",
        "          v-if=\"characterInfos.length === 0\"",
        "          class=\"warning-item row no-wrap items-center\""
      ],
      "text": "有効なスタイルが選択されていません",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-item",
        "          v-if=\"characterInfos.length === 0\"",
        "          class=\"warning-item row no-wrap items-center\"",
        "        >",
        "          <span class=\"text-warning vertical-middle\"",
        "            >選択可能なスタイルがありません</span",
        "          >",
        "        </q-item>",
        "        <q-item v-if=\"emptiable\" class=\"to-unselect-item q-pa-none\">",
        "          <q-btn",
        "            v-close-popup"
      ],
      "text": "選択可能なスタイルがありません",
      "translation": ""
    },
    {
      "neighbors": [
        "            no-caps",
        "            class=\"full-width\"",
        "            :class=\"selectedCharacter == undefined && 'selected-background'\"",
        "            @click=\"$emit('update:selectedVoice', undefined)\"",
        "          >",
        "            <span>選択解除</span>",
        "          </q-btn>",
        "        </q-item>",
        "        <q-item",
        "          v-for=\"(characterInfo, characterIndex) in characterInfos\"",
        "          :key=\"characterIndex\""
      ],
      "text": "選択解除",
      "translation": ""
    },
    {
      "neighbors": [
        "                class=\"flex items-center q-px-sm q-py-none cursor-pointer\"",
        "                :class=\"",
        "                  subMenuOpenFlags[characterIndex] && 'selected-background'",
        "                \"",
        "                role=\"application\"",
        "                :aria-label=\"`${characterInfo.metas.speakerName}のスタイル、マウスオーバーするか、右矢印キーを押してスタイル選択を表示できます`\"",
        "                tabindex=\"0\"",
        "                @mouseover=\"reassignSubMenuOpen(characterIndex)\"",
        "                @mouseleave=\"reassignSubMenuOpen.cancel()\"",
        "                @keyup.right=\"reassignSubMenuOpen(characterIndex)\"",
        "              >"
      ],
      "text": "のスタイル マウスオーバーするか 右矢印キーを押してスタイル選択を表示できます",
      "translation": ""
    },
    {
      "neighbors": [
        "  return character;",
        "});",
        " ",
        "const selectedVoiceInfoText = computed(() => {",
        "  if (!selectedCharacter.value) {",
        "    return \"キャラクター未選択\";",
        "  }",
        " ",
        "  const speakerName = selectedCharacter.value.metas.speakerName;",
        "  if (!selectedStyleInfo.value) {",
        "    return speakerName;"
      ],
      "text": "キャラクター未選択",
      "translation": ""
    }
  ],
  "CharacterTryListenCard.vue": [
    {
      "neighbors": [
        "          flat",
        "          dense",
        "          icon=\"chevron_left\"",
        "          text-color=\"display\"",
        "          class=\"style-select-button\"",
        "          aria-label=\"前のスタイル\"",
        "          @mouseenter=\"isHoverableItem = false\"",
        "          @mouseleave=\"isHoverableItem = true\"",
        "          @click.stop=\"",
        "            selectCharacter(speakerUuid);",
        "            rollStyleIndex(speakerUuid, -1);"
      ],
      "text": "前のスタイル",
      "translation": ""
    },
    {
      "neighbors": [
        "          flat",
        "          dense",
        "          icon=\"chevron_right\"",
        "          text-color=\"display\"",
        "          class=\"style-select-button\"",
        "          aria-label=\"次のスタイル\"",
        "          @mouseenter=\"isHoverableItem = false\"",
        "          @mouseleave=\"isHoverableItem = true\"",
        "          @click.stop=\"",
        "            selectCharacter(speakerUuid);",
        "            rollStyleIndex(speakerUuid, 1);"
      ],
      "text": "次のスタイル",
      "translation": ""
    },
    {
      "neighbors": [
        "              ? 'stop'",
        "              : 'play_arrow'",
        "          \"",
        "          color=\"primary\"",
        "          class=\"voice-sample-btn\"",
        "          :aria-label=\"`サンプルボイス${voiceSampleIndex + 1}`\"",
        "          @mouseenter=\"isHoverableItem = false\"",
        "          @mouseleave=\"isHoverableItem = true\"",
        "          @click.stop=\"",
        "            selectCharacter(speakerUuid);",
        "            togglePlayOrStop(speakerUuid, selectedStyle, voiceSampleIndex);"
      ],
      "text": "サンプルボイス",
      "translation": ""
    }
  ],
  "UpdateNotificationDialog.vue": [
    {
      "neighbors": [
        "<template>",
        "  <q-dialog v-model=\"modelValueComputed\">",
        "    <q-card class=\"q-py-sm q-px-md\">",
        "      <q-card-section class=\"q-pb-sm\" align=\"center\">",
        "        <div class=\"text-h6\">",
        "          <q-icon name=\"info\" color=\"primary\" />アップデート通知",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-section class=\"q-pt-sm\" align=\"center\">",
        "        <div class=\"text-body1\">",
        "          最新バージョン {{ props.latestVersion }} が利用可能です。<br />"
      ],
      "text": "アップデート通知",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-icon name=\"info\" color=\"primary\" />アップデート通知",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-section class=\"q-pt-sm\" align=\"center\">",
        "        <div class=\"text-body1\">",
        "          最新バージョン {{ props.latestVersion }} が利用可能です。<br />",
        "          公式サイトから最新バージョンをダウンロードできます。",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-section class=\"q-py-none scrollable-area\">",
        "        <template"
      ],
      "text": "最新バージョン が利用可能です",
      "translation": ""
    },
    {
      "neighbors": [
        "        </div>",
        "      </q-card-section>",
        "      <q-card-section class=\"q-pt-sm\" align=\"center\">",
        "        <div class=\"text-body1\">",
        "          最新バージョン {{ props.latestVersion }} が利用可能です。<br />",
        "          公式サイトから最新バージョンをダウンロードできます。",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-section class=\"q-py-none scrollable-area\">",
        "        <template",
        "          v-for=\"(info, infoIndex) of props.newUpdateInfos\""
      ],
      "text": "公式サイトから最新バージョンをダウンロードできます",
      "translation": ""
    },
    {
      "neighbors": [
        "      <q-card-section class=\"q-py-none scrollable-area\">",
        "        <template",
        "          v-for=\"(info, infoIndex) of props.newUpdateInfos\"",
        "          :key=\"infoIndex\"",
        "        >",
        "          <div class=\"text-h6\">バージョン {{ info.version }}</div>",
        "          <ul>",
        "            <template",
        "              v-for=\"(item, descriptionIndex) of info.descriptions\"",
        "              :key=\"descriptionIndex\"",
        "            >"
      ],
      "text": "バージョン",
      "translation": ""
    },
    {
      "neighbors": [
        "        </template>",
        "      </q-card-section>",
        "      <q-card-actions align=\"center\" class=\"button-area\">",
        "        <q-btn",
        "          padding=\"xs md\"",
        "          label=\"キャンセル\"",
        "          unelevated",
        "          color=\"surface\"",
        "          text-color=\"display\"",
        "          class=\"q-mt-sm\"",
        "          @click=\"closeUpdateNotificationDialog()\""
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "          class=\"q-mt-sm\"",
        "          @click=\"closeUpdateNotificationDialog()\"",
        "        />",
        "        <q-btn",
        "          padding=\"xs md\"",
        "          label=\"公式サイトを開く\"",
        "          unelevated",
        "          color=\"primary\"",
        "          text-color=\"display-on-primary\"",
        "          class=\"q-mt-sm\"",
        "          @click=\""
      ],
      "text": "公式サイトを開く",
      "translation": ""
    },
    {
      "neighbors": [
        "  margin: 15px 0;",
        "}",
        " ",
        ".button-area {",
        "  border-top: 1px solid colors.$splitter;",
        "  /* ボタン領域の上部に線を引く */",
        "}"
      ],
      "text": "ボタン領域の上部に線を引く",
      "translation": ""
    }
  ],
  "EngineManageDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr fFf\" class=\"bg-background\">",
        "      <q-page-container>",
        "        <q-header class=\"q-pa-sm\">",
        "          <q-toolbar>",
        "            <q-toolbar-title class=\"text-display\"",
        "              >エンジンの管理</q-toolbar-title",
        "            >",
        "            <q-space />",
        "            <!-- close button -->",
        "            <q-btn",
        "              round"
      ],
      "text": "エンジンの管理",
      "translation": ""
    },
    {
      "neighbors": [
        "          <div v-if=\"uiLockedState\" class=\"ui-lock-popup\">",
        "            <div class=\"q-pa-md\">",
        "              <q-spinner color=\"primary\" size=\"2.5rem\" />",
        "              <div class=\"q-mt-xs\">",
        "                <template v-if=\"uiLockedState === 'addingEngine'\"",
        "                  >追加中・・・</template",
        "                >",
        "                <template v-if=\"uiLockedState === 'deletingEngine'\"",
        "                  >削除中・・・</template",
        "                >",
        "              </div>"
      ],
      "text": "追加中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "              <div class=\"q-mt-xs\">",
        "                <template v-if=\"uiLockedState === 'addingEngine'\"",
        "                  >追加中・・・</template",
        "                >",
        "                <template v-if=\"uiLockedState === 'deletingEngine'\"",
        "                  >削除中・・・</template",
        "                >",
        "              </div>",
        "            </div>",
        "          </div>",
        "          <div class=\"col-4 engine-list-col\">"
      ],
      "text": "削除中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "            </div>",
        "          </div>",
        "          <div class=\"col-4 engine-list-col\">",
        "            <div v-if=\"isAddingEngine\" class=\"engine-list-disable-overlay\" />",
        "            <div class=\"engine-list-header text-no-wrap\">",
        "              <div class=\"row engine-list-title text-h5\">エンジン一覧</div>",
        "              <div class=\"row no-wrap\">",
        "                <q-btn",
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\""
      ],
      "text": "エンジン一覧",
      "translation": ""
    },
    {
      "neighbors": [
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap text-bold col-sm q-ma-sm\"",
        "                  :disable=\"uiLocked\"",
        "                  @click=\"toAddEngineState\"",
        "                  >追加</q-btn",
        "                >",
        "              </div>",
        "            </div>",
        "            <q-list class=\"engine-list\">",
        "              <template"
      ],
      "text": "追加",
      "translation": ""
    },
    {
      "neighbors": [
        "          <div",
        "            v-if=\"isAddingEngine\"",
        "            class=\"col-8 no-wrap text-no-wrap engine-detail\"",
        "          >",
        "            <div class=\"q-pl-md q-mt-md\">",
        "              <div class=\"text-h5 q-ma-sm\">エンジンの追加</div>",
        " ",
        "              <div class=\"q-ma-sm\">",
        "                <q-btn-toggle",
        "                  v-model=\"engineLoaderType\"",
        "                  :options=\"["
      ],
      "text": "エンジンの追加",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "              <div class=\"q-ma-sm\">",
        "                <q-btn-toggle",
        "                  v-model=\"engineLoaderType\"",
        "                  :options=\"[",
        "                    { value: 'vvpp', label: 'VVPPファイル' },",
        "                    { value: 'dir', label: '既存エンジン' },",
        "                  ]\"",
        "                  color=\"surface\"",
        "                  unelevated",
        "                  text-color=\"display\""
      ],
      "text": "ファイル",
      "translation": ""
    },
    {
      "neighbors": [
        "              <div class=\"q-ma-sm\">",
        "                <q-btn-toggle",
        "                  v-model=\"engineLoaderType\"",
        "                  :options=\"[",
        "                    { value: 'vvpp', label: 'VVPPファイル' },",
        "                    { value: 'dir', label: '既存エンジン' },",
        "                  ]\"",
        "                  color=\"surface\"",
        "                  unelevated",
        "                  text-color=\"display\"",
        "                  toggle-color=\"primary\""
      ],
      "text": "既存エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "              </div>",
        "            </div>",
        " ",
        "            <div v-if=\"engineLoaderType === 'vvpp'\" class=\"no-wrap q-pl-md\">",
        "              <div class=\"q-ma-sm\">",
        "                VVPPファイルでエンジンをインストールします。",
        "              </div>",
        "              <div class=\"q-ma-sm\">",
        "                <q-input",
        "                  ref=\"vvppFilePathInput\"",
        "                  v-model=\"vvppFilePath\""
      ],
      "text": "ファイルでエンジンをインストールします",
      "translation": ""
    },
    {
      "neighbors": [
        "                <q-input",
        "                  ref=\"vvppFilePathInput\"",
        "                  v-model=\"vvppFilePath\"",
        "                  dense",
        "                  readonly",
        "                  placeholder=\"VVPPファイルの場所\"",
        "                  @click=\"selectVvppFile\"",
        "                >",
        "                  <template #append>",
        "                    <q-btn",
        "                      square"
      ],
      "text": "ファイルの場所",
      "translation": ""
    },
    {
      "neighbors": [
        "                      color=\"primary\"",
        "                      icon=\"folder_open\"",
        "                      @click=\"selectVvppFile\"",
        "                    >",
        "                      <q-tooltip :delay=\"500\" anchor=\"bottom left\">",
        "                        ファイル選択",
        "                      </q-tooltip>",
        "                    </q-btn>",
        "                  </template>",
        "                  <template #error>",
        "                    {{"
      ],
      "text": "ファイル選択",
      "translation": ""
    },
    {
      "neighbors": [
        "                  </template>",
        "                </q-input>",
        "              </div>",
        "            </div>",
        "            <div v-if=\"engineLoaderType === 'dir'\" class=\"no-wrap q-pl-md\">",
        "              <div class=\"q-ma-sm\">PC内にあるエンジンを追加します。</div>",
        "              <div class=\"q-ma-sm\">",
        "                <q-input",
        "                  ref=\"newEngineDirInput\"",
        "                  v-model=\"newEngineDir\"",
        "                  dense"
      ],
      "text": "内にあるエンジンを追加します",
      "translation": ""
    },
    {
      "neighbors": [
        "                  readonly",
        "                  :error=\"",
        "                    newEngineDirValidationState != undefined &&",
        "                    newEngineDirValidationState !== 'ok'",
        "                  \"",
        "                  placeholder=\"エンジンフォルダの場所\"",
        "                  @click=\"selectEngineDir\"",
        "                >",
        "                  <template #append>",
        "                    <q-btn",
        "                      square"
      ],
      "text": "エンジンフォルダの場所",
      "translation": ""
    },
    {
      "neighbors": [
        "                      color=\"primary\"",
        "                      icon=\"folder_open\"",
        "                      @click=\"selectEngineDir\"",
        "                    >",
        "                      <q-tooltip :delay=\"500\" anchor=\"bottom left\">",
        "                        フォルダ選択",
        "                      </q-tooltip>",
        "                    </q-btn>",
        "                  </template>",
        "                  <template #error>",
        "                    {{"
      ],
      "text": "フォルダ選択",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                @click=\"toInitialState\"",
        "                >キャンセル</q-btn",
        "              >",
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\""
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disabled=\"!canAddEngine\"",
        "                @click=\"addEngine\"",
        "                >追加</q-btn",
        "              >",
        "            </div>",
        "          </div>",
        "          <div",
        "            v-else-if=\"selectedId\""
      ],
      "text": "追加",
      "translation": ""
    },
    {
      "neighbors": [
        "            </div>",
        " ",
        "            <div class=\"no-wrap q-pl-md\">",
        "              <ul>",
        "                <li>",
        "                  バージョン：{{",
        "                    engineVersions[selectedId]",
        "                      ? engineVersions[selectedId]",
        "                      : \"（取得に失敗しました）\"",
        "                  }}",
        "                </li>"
      ],
      "text": "バージョン",
      "translation": ""
    },
    {
      "neighbors": [
        "              <ul>",
        "                <li>",
        "                  バージョン：{{",
        "                    engineVersions[selectedId]",
        "                      ? engineVersions[selectedId]",
        "                      : \"（取得に失敗しました）\"",
        "                  }}",
        "                </li>",
        "                <li>",
        "                  URL：",
        "                  <a"
      ],
      "text": "取得に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "                    :href=\"engineManifests[selectedId].url\"",
        "                    class=\"text-display-hyperlink\"",
        "                    target=\"_blank\"",
        "                    >{{ engineManifests[selectedId].url }}</a",
        "                  >",
        "                  <span v-else>（取得に失敗しました）</span>",
        "                </li>",
        "              </ul>",
        "            </div>",
        "            <div class=\"no-wrap q-pl-md\">",
        "              <div class=\"text-h6 q-ma-sm\">機能</div>"
      ],
      "text": "取得に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "                  <span v-else>（取得に失敗しました）</span>",
        "                </li>",
        "              </ul>",
        "            </div>",
        "            <div class=\"no-wrap q-pl-md\">",
        "              <div class=\"text-h6 q-ma-sm\">機能</div>",
        "              <ul",
        "                v-if=\"",
        "                  engineManifests[selectedId] &&",
        "                  engineManifests[selectedId].supportedFeatures",
        "                \""
      ],
      "text": "機能",
      "translation": ""
    },
    {
      "neighbors": [
        "                    ? engineManifests[selectedId].supportedFeatures",
        "                    : null\"",
        "                  :key=\"feature\"",
        "                  :class=\"value ? '' : 'text-warning'\"",
        "                >",
        "                  {{ getFeatureName(feature) }}：{{ value ? \"対応\" : \"非対応\" }}",
        "                </li>",
        "              </ul>",
        "              <span v-else>（取得に失敗しました）</span>",
        "            </div>",
        "            <div class=\"no-wrap q-pl-md\">"
      ],
      "text": "対応 非対応",
      "translation": ""
    },
    {
      "neighbors": [
        "                  :class=\"value ? '' : 'text-warning'\"",
        "                >",
        "                  {{ getFeatureName(feature) }}：{{ value ? \"対応\" : \"非対応\" }}",
        "                </li>",
        "              </ul>",
        "              <span v-else>（取得に失敗しました）</span>",
        "            </div>",
        "            <div class=\"no-wrap q-pl-md\">",
        "              <div class=\"text-h6 q-ma-sm\">場所</div>",
        "              <div",
        "                :class=\""
      ],
      "text": "取得に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "                </li>",
        "              </ul>",
        "              <span v-else>（取得に失敗しました）</span>",
        "            </div>",
        "            <div class=\"no-wrap q-pl-md\">",
        "              <div class=\"text-h6 q-ma-sm\">場所</div>",
        "              <div",
        "                :class=\"",
        "                  'q-ma-sm' + (engineInfos[selectedId].path ? '' : ' disabled')",
        "                \"",
        "              >"
      ],
      "text": "場所",
      "translation": ""
    },
    {
      "neighbors": [
        "                :disable=\"",
        "                  uiLocked ||",
        "                  !['path', 'vvpp'].includes(engineInfos[selectedId].type)",
        "                \"",
        "                @click=\"deleteEngine\"",
        "                >削除</q-btn",
        "              >",
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\""
      ],
      "text": "削除",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disable=\"uiLocked || !engineInfos[selectedId].path\"",
        "                @click=\"openSelectedEngineDirectory\"",
        "                >フォルダを開く</q-btn",
        "              >",
        "              <q-btn",
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\""
      ],
      "text": "フォルダを開く",
      "translation": ""
    },
    {
      "neighbors": [
        "                outline",
        "                text-color=\"display\"",
        "                class=\"text-no-wrap text-bold q-mr-sm\"",
        "                :disable=\"uiLocked || engineStates[selectedId] === 'STARTING'\"",
        "                @click=\"restartSelectedEngine\"",
        "                >再起動</q-btn",
        "              >",
        "            </div>",
        "          </div>",
        "        </q-page>",
        "      </q-page-container>"
      ],
      "text": "再起動",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const selectedId = ref<EngineId | undefined>(undefined);",
        " ",
        "const engineDir = computed(() => {",
        "  if (selectedId.value == undefined) throw new Error(\"engine is not selected\");",
        "  return engineInfos.value[selectedId.value]?.path || \"（組み込み）\";",
        "});",
        " ",
        "const getEngineTypeName = (name: string) => {",
        "  const engineTypeMap = {",
        "    default: \"デフォルトエンジン\","
      ],
      "text": "組み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "  return engineInfos.value[selectedId.value]?.path || \"（組み込み）\";",
        "});",
        " ",
        "const getEngineTypeName = (name: string) => {",
        "  const engineTypeMap = {",
        "    default: \"デフォルトエンジン\",",
        "    plugin: \"追加エンジン\",",
        "  };",
        "  return engineTypeMap[name as keyof typeof engineTypeMap];",
        "};",
        " "
      ],
      "text": "デフォルトエンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "});",
        " ",
        "const getEngineTypeName = (name: string) => {",
        "  const engineTypeMap = {",
        "    default: \"デフォルトエンジン\",",
        "    plugin: \"追加エンジン\",",
        "  };",
        "  return engineTypeMap[name as keyof typeof engineTypeMap];",
        "};",
        " ",
        "const getFeatureName = (name: keyof SupportedFeatures) => {"
      ],
      "text": "追加エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "  return engineTypeMap[name as keyof typeof engineTypeMap];",
        "};",
        " ",
        "const getFeatureName = (name: keyof SupportedFeatures) => {",
        "  const featureNameMap: { [key in keyof SupportedFeatures]: string } = {",
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\","
      ],
      "text": "モーラごとの音高の調整",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const getFeatureName = (name: keyof SupportedFeatures) => {",
        "  const featureNameMap: { [key in keyof SupportedFeatures]: string } = {",
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\","
      ],
      "text": "音素ごとの長さの調整",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const getFeatureName = (name: keyof SupportedFeatures) => {",
        "  const featureNameMap: { [key in keyof SupportedFeatures]: string } = {",
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\","
      ],
      "text": "全体の話速の調整",
      "translation": ""
    },
    {
      "neighbors": [
        "const getFeatureName = (name: keyof SupportedFeatures) => {",
        "  const featureNameMap: { [key in keyof SupportedFeatures]: string } = {",
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\","
      ],
      "text": "全体の音高の調整",
      "translation": ""
    },
    {
      "neighbors": [
        "  const featureNameMap: { [key in keyof SupportedFeatures]: string } = {",
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\",",
        "  };"
      ],
      "text": "全体の抑揚の調整",
      "translation": ""
    },
    {
      "neighbors": [
        "    adjustMoraPitch: \"モーラごとの音高の調整\",",
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\",",
        "  };",
        "  return featureNameMap[name];"
      ],
      "text": "全体の音量の調整",
      "translation": ""
    },
    {
      "neighbors": [
        "    adjustPhonemeLength: \"音素ごとの長さの調整\",",
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\",",
        "  };",
        "  return featureNameMap[name];",
        "};"
      ],
      "text": "疑問文の自動調整",
      "translation": ""
    },
    {
      "neighbors": [
        "    adjustSpeedScale: \"全体の話速の調整\",",
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\",",
        "  };",
        "  return featureNameMap[name];",
        "};",
        " "
      ],
      "text": "人の話者でモーフィングした音声を合成",
      "translation": ""
    },
    {
      "neighbors": [
        "    adjustPitchScale: \"全体の音高の調整\",",
        "    adjustIntonationScale: \"全体の抑揚の調整\",",
        "    adjustVolumeScale: \"全体の音量の調整\",",
        "    interrogativeUpspeak: \"疑問文の自動調整\",",
        "    synthesisMorphing: \"2人の話者でモーフィングした音声を合成\",",
        "    manageLibrary: \"音声ライブラリ(vvlib)の管理\",",
        "  };",
        "  return featureNameMap[name];",
        "};",
        " ",
        "const getEngineDirValidationMessage = (result: EngineDirValidationResult) => {"
      ],
      "text": "音声ライブラリ の管理",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const getEngineDirValidationMessage = (result: EngineDirValidationResult) => {",
        "  const messageMap: {",
        "    [key in EngineDirValidationResult]: string | undefined;",
        "  } = {",
        "    directoryNotFound: \"フォルダが見つかりませんでした。\",",
        "    notADirectory: \"フォルダではありません。\",",
        "    manifestNotFound: \"engine_manifest.jsonが見つかりませんでした。\",",
        "    invalidManifest: \"engine_manifest.jsonの内容が不正です。\",",
        "    alreadyExists: \"同じIDのエンジンが既に登録されています。\",",
        "    ok: undefined,"
      ],
      "text": "フォルダが見つかりませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "const getEngineDirValidationMessage = (result: EngineDirValidationResult) => {",
        "  const messageMap: {",
        "    [key in EngineDirValidationResult]: string | undefined;",
        "  } = {",
        "    directoryNotFound: \"フォルダが見つかりませんでした。\",",
        "    notADirectory: \"フォルダではありません。\",",
        "    manifestNotFound: \"engine_manifest.jsonが見つかりませんでした。\",",
        "    invalidManifest: \"engine_manifest.jsonの内容が不正です。\",",
        "    alreadyExists: \"同じIDのエンジンが既に登録されています。\",",
        "    ok: undefined,",
        "  };"
      ],
      "text": "フォルダではありません",
      "translation": ""
    },
    {
      "neighbors": [
        "  const messageMap: {",
        "    [key in EngineDirValidationResult]: string | undefined;",
        "  } = {",
        "    directoryNotFound: \"フォルダが見つかりませんでした。\",",
        "    notADirectory: \"フォルダではありません。\",",
        "    manifestNotFound: \"engine_manifest.jsonが見つかりませんでした。\",",
        "    invalidManifest: \"engine_manifest.jsonの内容が不正です。\",",
        "    alreadyExists: \"同じIDのエンジンが既に登録されています。\",",
        "    ok: undefined,",
        "  };",
        "  return messageMap[result];"
      ],
      "text": "が見つかりませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "    [key in EngineDirValidationResult]: string | undefined;",
        "  } = {",
        "    directoryNotFound: \"フォルダが見つかりませんでした。\",",
        "    notADirectory: \"フォルダではありません。\",",
        "    manifestNotFound: \"engine_manifest.jsonが見つかりませんでした。\",",
        "    invalidManifest: \"engine_manifest.jsonの内容が不正です。\",",
        "    alreadyExists: \"同じIDのエンジンが既に登録されています。\",",
        "    ok: undefined,",
        "  };",
        "  return messageMap[result];",
        "};"
      ],
      "text": "の内容が不正です",
      "translation": ""
    },
    {
      "neighbors": [
        "  } = {",
        "    directoryNotFound: \"フォルダが見つかりませんでした。\",",
        "    notADirectory: \"フォルダではありません。\",",
        "    manifestNotFound: \"engine_manifest.jsonが見つかりませんでした。\",",
        "    invalidManifest: \"engine_manifest.jsonの内容が不正です。\",",
        "    alreadyExists: \"同じIDのエンジンが既に登録されています。\",",
        "    ok: undefined,",
        "  };",
        "  return messageMap[result];",
        "};",
        " "
      ],
      "text": "同じ のエンジンが既に登録されています",
      "translation": ""
    },
    {
      "neighbors": [
        "  return messageMap[result];",
        "};",
        " ",
        "const addEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"エンジン追加の確認\",",
        "    message:",
        "      \"この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。\",",
        "    actionName: \"追加\",",
        "  });",
        "  if (result === \"OK\") {"
      ],
      "text": "エンジン追加の確認",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const addEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"エンジン追加の確認\",",
        "    message:",
        "      \"この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。\",",
        "    actionName: \"追加\",",
        "  });",
        "  if (result === \"OK\") {",
        "    if (engineLoaderType.value === \"dir\") {",
        "      await lockUi("
      ],
      "text": "この操作はコンピュータに損害を与える可能性があります エンジンの配布元が信頼できない場合は追加しないでください",
      "translation": ""
    },
    {
      "neighbors": [
        "const addEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"エンジン追加の確認\",",
        "    message:",
        "      \"この操作はコンピュータに損害を与える可能性があります。エンジンの配布元が信頼できない場合は追加しないでください。\",",
        "    actionName: \"追加\",",
        "  });",
        "  if (result === \"OK\") {",
        "    if (engineLoaderType.value === \"dir\") {",
        "      await lockUi(",
        "        \"addingEngine\","
      ],
      "text": "追加",
      "translation": ""
    },
    {
      "neighbors": [
        "          engineDir: newEngineDir.value,",
        "        })",
        "      );",
        " ",
        "      requireReload(",
        "        \"エンジンを追加しました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\"",
        "      );",
        "    } else {",
        "      const success = await lockUi(",
        "        \"addingEngine\",",
        "        store.dispatch(\"INSTALL_VVPP_ENGINE\", vvppFilePath.value)"
      ],
      "text": "エンジンを追加しました 反映には再読み込みが必要です 今すぐ再読み込みしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "        \"addingEngine\",",
        "        store.dispatch(\"INSTALL_VVPP_ENGINE\", vvppFilePath.value)",
        "      );",
        "      if (success) {",
        "        requireReload(",
        "          \"エンジンを追加しました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\"",
        "        );",
        "      }",
        "    }",
        "  }",
        "};"
      ],
      "text": "エンジンを追加しました 反映には再読み込みが必要です 今すぐ再読み込みしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        "  }",
        "};",
        "const deleteEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"エンジン削除の確認\",",
        "    message: \"選択中のエンジンを削除します。よろしいですか？\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    if (selectedId.value == undefined)"
      ],
      "text": "エンジン削除の確認",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "};",
        "const deleteEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"エンジン削除の確認\",",
        "    message: \"選択中のエンジンを削除します。よろしいですか？\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    if (selectedId.value == undefined)",
        "      throw new Error(\"engine is not selected\");"
      ],
      "text": "選択中のエンジンを削除します よろしいですか",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        "const deleteEngine = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"エンジン削除の確認\",",
        "    message: \"選択中のエンジンを削除します。よろしいですか？\",",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    if (selectedId.value == undefined)",
        "      throw new Error(\"engine is not selected\");",
        "    switch (engineInfos.value[selectedId.value].type) {"
      ],
      "text": "削除",
      "translation": ""
    },
    {
      "neighbors": [
        "          store.dispatch(\"REMOVE_ENGINE_DIR\", {",
        "            engineDir,",
        "          })",
        "        );",
        "        requireReload(",
        "          \"エンジンを削除しました。反映には再読み込みが必要です。今すぐ再読み込みしますか？\"",
        "        );",
        "        break;",
        "      }",
        "      case \"vvpp\": {",
        "        const success = await lockUi("
      ],
      "text": "エンジンを削除しました 反映には再読み込みが必要です 今すぐ再読み込みしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "          \"deletingEngine\",",
        "          store.dispatch(\"UNINSTALL_VVPP_ENGINE\", selectedId.value)",
        "        );",
        "        if (success) {",
        "          requireReload(",
        "            \"エンジンの削除には再読み込みが必要です。今すぐ再読み込みしますか？\"",
        "          );",
        "        }",
        "        break;",
        "      }",
        "      default:"
      ],
      "text": "エンジンの削除には再読み込みが必要です 今すぐ再読み込みしますか",
      "translation": ""
    },
    {
      "neighbors": [
        "  });",
        "};",
        " ",
        "const requireReload = async (message: string) => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"再読み込みが必要です\",",
        "    message: message,",
        "    actionName: \"再読み込み\",",
        "    cancel: \"後で\",",
        "  });",
        "  toInitialState();"
      ],
      "text": "再読み込みが必要です",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const requireReload = async (message: string) => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"再読み込みが必要です\",",
        "    message: message,",
        "    actionName: \"再読み込み\",",
        "    cancel: \"後で\",",
        "  });",
        "  toInitialState();",
        "  if (result === \"OK\") {",
        "    store.dispatch(\"CHECK_EDITED_AND_NOT_SAVE\", {"
      ],
      "text": "再読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "const requireReload = async (message: string) => {",
        "  const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "    title: \"再読み込みが必要です\",",
        "    message: message,",
        "    actionName: \"再読み込み\",",
        "    cancel: \"後で\",",
        "  });",
        "  toInitialState();",
        "  if (result === \"OK\") {",
        "    store.dispatch(\"CHECK_EDITED_AND_NOT_SAVE\", {",
        "      closeOrReload: \"reload\","
      ],
      "text": "後で",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const newEngineDir = ref(\"\");",
        "const newEngineDirValidationState = ref<EngineDirValidationResult | null>(null);",
        "const selectEngineDir = async () => {",
        "  const path = await window.electron.showOpenDirectoryDialog({",
        "    title: \"エンジンのフォルダを選択\",",
        "  });",
        "  if (path) {",
        "    newEngineDir.value = path;",
        "    if (path === \"\") {",
        "      newEngineDirValidationState.value = null;"
      ],
      "text": "エンジンのフォルダを選択",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const vvppFilePath = ref(\"\");",
        "const selectVvppFile = async () => {",
        "  const path = await window.electron.showVvppOpenDialog({",
        "    title: \"vvppファイルを選択\",",
        "    defaultPath: vvppFilePath.value,",
        "  });",
        "  if (path) {",
        "    vvppFilePath.value = path;",
        "  }"
      ],
      "text": "ファイルを選択",
      "translation": ""
    }
  ],
  "AcceptTermsDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr lff\" class=\"bg-background\">",
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\"",
        "              >利用規約に関するお知らせ</q-toolbar-title",
        "            >",
        "          </div>",
        " ",
        "          <q-space />",
        " "
      ],
      "text": "利用規約に関するお知らせ",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-space />",
        " ",
        "          <div class=\"row items-center no-wrap\">",
        "            <q-btn",
        "              unelevated",
        "              label=\"同意せずに終了\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap q-mr-md text-bold\"",
        "              @click=\"handler(false)\"",
        "            />"
      ],
      "text": "同意せずに終了",
      "translation": ""
    },
    {
      "neighbors": [
        "              @click=\"handler(false)\"",
        "            />",
        " ",
        "            <q-btn",
        "              unelevated",
        "              label=\"同意して使用開始\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap text-bold\"",
        "              @click=\"handler(true)\"",
        "            />"
      ],
      "text": "同意して使用開始",
      "translation": ""
    },
    {
      "neighbors": [
        "      </q-header>",
        " ",
        "      <q-page-container>",
        "        <q-page>",
        "          <p class=\"text-body1 q-mb-lg\">",
        "            多くの人が安心して VOICEVOX",
        "            を使えるよう、利用規約への同意をお願いします。",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>",
        "              <div class=\"text-h5\">利用規約</div>"
      ],
      "text": "多くの人が安心して",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      <q-page-container>",
        "        <q-page>",
        "          <p class=\"text-body1 q-mb-lg\">",
        "            多くの人が安心して VOICEVOX",
        "            を使えるよう、利用規約への同意をお願いします。",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>",
        "              <div class=\"text-h5\">利用規約</div>",
        "            </q-card-section>"
      ],
      "text": "を使えるよう 利用規約への同意をお願いします",
      "translation": ""
    },
    {
      "neighbors": [
        "            多くの人が安心して VOICEVOX",
        "            を使えるよう、利用規約への同意をお願いします。",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>",
        "              <div class=\"text-h5\">利用規約</div>",
        "            </q-card-section>",
        " ",
        "            <q-card-section>",
        "              <!-- eslint-disable-next-line vue/no-v-html -->",
        "              <div class=\"q-pa-md markdown markdown-body\" v-html=\"terms\" />"
      ],
      "text": "利用規約",
      "translation": ""
    }
  ],
  "CharacterOrderDialog.vue": [
    {
      "neighbors": [
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\">{{",
        "              hasNewCharacter",
        "                ? \"追加キャラクターの紹介\"",
        "                : \"設定 / キャラクター並び替え・試聴\"",
        "            }}</q-toolbar-title>",
        "          </div>",
        " ",
        "          <q-space />"
      ],
      "text": "追加キャラクターの紹介",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\">{{",
        "              hasNewCharacter",
        "                ? \"追加キャラクターの紹介\"",
        "                : \"設定 / キャラクター並び替え・試聴\"",
        "            }}</q-toolbar-title>",
        "          </div>",
        " ",
        "          <q-space />",
        " "
      ],
      "text": "設定 キャラクター並び替え・試聴",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-space />",
        " ",
        "          <div class=\"row items-center no-wrap\">",
        "            <q-btn",
        "              unelevated",
        "              label=\"完了\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap\"",
        "              @click=\"closeDialog\"",
        "            />"
      ],
      "text": "完了",
      "translation": ""
    },
    {
      "neighbors": [
        "      </q-drawer>",
        " ",
        "      <q-page-container>",
        "        <q-page class=\"main\">",
        "          <div class=\"character-items-container\">",
        "            <span class=\"text-h6 q-py-md\">サンプルボイス一覧</span>",
        "            <div>",
        "              <CharacterTryListenCard",
        "                v-for=\"characterInfo of characterInfos\"",
        "                :key=\"characterInfo.metas.speakerUuid\"",
        "                :character-info=\"characterInfo\""
      ],
      "text": "サンプルボイス一覧",
      "translation": ""
    },
    {
      "neighbors": [
        "            </div>",
        "          </div>",
        " ",
        "          <div class=\"character-order-container\">",
        "            <div class=\"text-subtitle1 text-weight-bold text-center q-py-md\">",
        "              キャラクター並び替え",
        "            </div>",
        "            <draggable",
        "              v-model=\"characterOrder\"",
        "              class=\"character-order q-px-sm\"",
        "              :item-key=\"keyOfCharacterOrderItem\""
      ],
      "text": "キャラクター並び替え",
      "translation": ""
    }
  ],
  "HeaderBar.vue": [
    {
      "neighbors": [
        ");",
        " ",
        "const undoRedoHotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  // undo",
        "  [",
        "    \"元に戻す\",",
        "    () => {",
        "      if (!uiLocked.value && canUndo.value) {",
        "        undo();",
        "      }",
        "      return false;"
      ],
      "text": "元に戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "      return false;",
        "    },",
        "  ],",
        "  // redo",
        "  [",
        "    \"やり直す\",",
        "    () => {",
        "      if (!uiLocked.value && canRedo.value) {",
        "        redo();",
        "      }",
        "      return false;"
      ],
      "text": "やり直す",
      "translation": ""
    },
    {
      "neighbors": [
        "setHotkeyFunctions(undoRedoHotkeyMap);",
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  // play/stop continuously",
        "  [",
        "    \"連続再生/停止\",",
        "    () => {",
        "      if (!uiLocked.value) {",
        "        if (nowPlayingContinuously.value) {",
        "          stop();",
        "        } else {"
      ],
      "text": "連続再生 停止",
      "translation": ""
    },
    {
      "neighbors": [
        "    await store.dispatch(\"PLAY_CONTINUOUSLY_AUDIO\");",
        "  } catch (e) {",
        "    let msg: string | undefined;",
        "    // FIXME: GENERATE_AUDIO_FROM_AUDIO_ITEMのエラーを変えた場合変更する",
        "    if (e instanceof Error && e.message === \"VALID_MORPHING_ERROR\") {",
        "      msg = \"モーフィングの設定が無効です。\";",
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\","
      ],
      "text": "モーフィングの設定が無効です",
      "translation": ""
    },
    {
      "neighbors": [
        "      msg = \"モーフィングの設定が無効です。\";",
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\",",
        "      message: msg ?? \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "};",
        "const stop = () => {"
      ],
      "text": "再生に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\",",
        "      message: msg ?? \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "};",
        "const stop = () => {",
        "  store.dispatch(\"STOP_AUDIO\");"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    }
  ],
  "SaveAllResultDialog.vue": [
    {
      "neighbors": [
        "      container",
        "      view=\"hhh lpr fFf\"",
        "      class=\"q-dialog-plugin bg-background\"",
        "    >",
        "      <q-page-container class=\"q-px-md\">",
        "        <h5 class=\"text-h5 q-my-md\">音声書き出し結果</h5>",
        "        <q-list separator bordered class=\"rounded-borders\">",
        "          <q-expansion-item",
        "            v-if=\"props.writeErrorArray.length > 0\"",
        "            :label=\"`${props.writeErrorArray.length}件の書き込みエラーによる失敗`\"",
        "            bordered"
      ],
      "text": "音声書き出し結果",
      "translation": ""
    },
    {
      "neighbors": [
        "      <q-page-container class=\"q-px-md\">",
        "        <h5 class=\"text-h5 q-my-md\">音声書き出し結果</h5>",
        "        <q-list separator bordered class=\"rounded-borders\">",
        "          <q-expansion-item",
        "            v-if=\"props.writeErrorArray.length > 0\"",
        "            :label=\"`${props.writeErrorArray.length}件の書き込みエラーによる失敗`\"",
        "            bordered",
        "            header-class=\"text-warning text-bold\"",
        "            icon=\"warning\"",
        "          >",
        "            <q-item"
      ],
      "text": "件の書き込みエラーによる失敗",
      "translation": ""
    },
    {
      "neighbors": [
        "              v-for=\"(value, index) in props.writeErrorArray\"",
        "              :key=\"index\"",
        "            >",
        "              <q-item-section>",
        "                <q-item-label>{{ value.path }}</q-item-label>",
        "                <q-item-label>詳細：{{ value.message }}</q-item-label>",
        "              </q-item-section>",
        "            </q-item>",
        "          </q-expansion-item>",
        "          <q-expansion-item",
        "            v-if=\"props.engineErrorArray.length > 0\""
      ],
      "text": "詳細",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-item-section>",
        "            </q-item>",
        "          </q-expansion-item>",
        "          <q-expansion-item",
        "            v-if=\"props.engineErrorArray.length > 0\"",
        "            :label=\"`${props.engineErrorArray.length}件のエンジンエラーによる失敗`\"",
        "            bordered",
        "            header-class=\"text-warning text-bold\"",
        "            icon=\"warning\"",
        "          >",
        "            <q-item"
      ],
      "text": "件のエンジンエラーによる失敗",
      "translation": ""
    },
    {
      "neighbors": [
        "              :key=\"index\"",
        "            >",
        "              <q-item-section>",
        "                <q-item-label>{{ value.path }}</q-item-label>",
        "                <q-item-label v-if=\"value.message\"",
        "                  >詳細：{{ value.message }}</q-item-label",
        "                >",
        "              </q-item-section>",
        "            </q-item>",
        "          </q-expansion-item>",
        "          <q-expansion-item"
      ],
      "text": "詳細",
      "translation": ""
    },
    {
      "neighbors": [
        "                >",
        "              </q-item-section>",
        "            </q-item>",
        "          </q-expansion-item>",
        "          <q-expansion-item",
        "            :label=\"`${props.successArray.length}件の成功`\"",
        "            bordered",
        "            icon=\"check\"",
        "            header-class=\"text-bold\"",
        "          >",
        "            <q-list v-if=\"props.successArray.length > 0\" separator>"
      ],
      "text": "件の成功",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-toolbar>",
        "          <q-space />",
        "          <q-btn",
        "            unelevated",
        "            align=\"right\"",
        "            label=\"閉じる\"",
        "            color=\"toolbar-button\"",
        "            text-color=\"toolbar-button-display\"",
        "            class=\"text-no-wrap text-bold q-mr-sm\"",
        "            @click=\"close\"",
        "          />"
      ],
      "text": "閉じる",
      "translation": ""
    }
  ],
  "HeaderBarCustomDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr fFf\" class=\"bg-background\">",
        "      <q-page-container class=\"root\">",
        "        <q-header class=\"q-py-sm\">",
        "          <q-toolbar>",
        "            <q-toolbar-title class=\"text-display\"",
        "              >ツールバーのカスタマイズ</q-toolbar-title",
        "            >",
        "            <q-space />",
        "            <q-btn",
        "              unelevated",
        "              color=\"toolbar-button\""
      ],
      "text": "ツールバーのカスタマイズ",
      "translation": ""
    },
    {
      "neighbors": [
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap text-bold q-mr-sm\"",
        "              :disable=\"isDefault\"",
        "              @click=\"applyDefaultSetting\"",
        "              >デフォルトに戻す</q-btn",
        "            >",
        "            <q-btn",
        "              unelevated",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\""
      ],
      "text": "デフォルトに戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap text-bold q-mr-sm\"",
        "              :disable=\"!isChanged\"",
        "              @click=\"saveCustomToolbar\"",
        "              >保存</q-btn",
        "            >",
        "            <!-- close button -->",
        "            <q-btn",
        "              round",
        "              flat"
      ],
      "text": "保存",
      "translation": ""
    },
    {
      "neighbors": [
        "                    >",
        "                  </q-btn>",
        "                </template>",
        "              </draggable>",
        "              <div class=\"preview-toolbar-drag-hint\">",
        "                ドラッグでボタンの並びを変更できます。",
        "              </div>",
        "            </q-toolbar>",
        " ",
        "            <q-card-actions>",
        "              <div class=\"text-h5\">表示するボタンの選択</div>"
      ],
      "text": "ドラッグでボタンの並びを変更できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                ドラッグでボタンの並びを変更できます。",
        "              </div>",
        "            </q-toolbar>",
        " ",
        "            <q-card-actions>",
        "              <div class=\"text-h5\">表示するボタンの選択</div>",
        "            </q-card-actions>",
        "            <q-card-actions class=\"no-padding\">",
        "              <q-list class=\"usable-button-list bg-surface\">",
        "                <q-item",
        "                  v-for=\"(desc, key) in usableButtonsDesc\""
      ],
      "text": "表示するボタンの選択",
      "translation": ""
    },
    {
      "neighbors": [
        "  defaultSetting.push(...setting);",
        "});",
        " ",
        "const usableButtonsDesc: Record<ToolbarButtonTagType, string> = {",
        "  PLAY_CONTINUOUSLY:",
        "    \"選択されているテキスト以降のすべてのテキストを読み上げます。\",",
        "  STOP: \"テキストが読み上げられているときに、それを止めます。\",",
        "  EXPORT_AUDIO_SELECTED:",
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\","
      ],
      "text": "選択されているテキスト以降のすべてのテキストを読み上げます",
      "translation": ""
    },
    {
      "neighbors": [
        "});",
        " ",
        "const usableButtonsDesc: Record<ToolbarButtonTagType, string> = {",
        "  PLAY_CONTINUOUSLY:",
        "    \"選択されているテキスト以降のすべてのテキストを読み上げます。\",",
        "  STOP: \"テキストが読み上げられているときに、それを止めます。\",",
        "  EXPORT_AUDIO_SELECTED:",
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:"
      ],
      "text": "テキストが読み上げられているときに それを止めます",
      "translation": ""
    },
    {
      "neighbors": [
        "const usableButtonsDesc: Record<ToolbarButtonTagType, string> = {",
        "  PLAY_CONTINUOUSLY:",
        "    \"選択されているテキスト以降のすべてのテキストを読み上げます。\",",
        "  STOP: \"テキストが読み上げられているときに、それを止めます。\",",
        "  EXPORT_AUDIO_SELECTED:",
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\","
      ],
      "text": "選択されているテキストの読み上げを音声ファイルに書き出します",
      "translation": ""
    },
    {
      "neighbors": [
        "    \"選択されているテキスト以降のすべてのテキストを読み上げます。\",",
        "  STOP: \"テキストが読み上げられているときに、それを止めます。\",",
        "  EXPORT_AUDIO_SELECTED:",
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\","
      ],
      "text": "入力されているすべてのテキストの読み上げを音声ファイルに書き出します",
      "translation": ""
    },
    {
      "neighbors": [
        "  EXPORT_AUDIO_SELECTED:",
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:"
      ],
      "text": "入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します",
      "translation": ""
    },
    {
      "neighbors": [
        "    \"選択されているテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:",
        "    \"これはボタンではありません。レイアウトの調整に使います。また、実際には表示されません。\","
      ],
      "text": "プロジェクトを上書き保存します",
      "translation": ""
    },
    {
      "neighbors": [
        "  EXPORT_AUDIO_ALL:",
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:",
        "    \"これはボタンではありません。レイアウトの調整に使います。また、実際には表示されません。\",",
        "};"
      ],
      "text": "操作を一つ戻します",
      "translation": ""
    },
    {
      "neighbors": [
        "    \"入力されているすべてのテキストの読み上げを音声ファイルに書き出します。\",",
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:",
        "    \"これはボタンではありません。レイアウトの調整に使います。また、実際には表示されません。\",",
        "};",
        " "
      ],
      "text": "元に戻した操作をやり直します",
      "translation": ""
    },
    {
      "neighbors": [
        "  EXPORT_AUDIO_CONNECT_ALL:",
        "    \"入力されているすべてのテキストの読み上げを一つの音声ファイルに繋げて書き出します。\",",
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:",
        "    \"これはボタンではありません。レイアウトの調整に使います。また、実際には表示されません。\",",
        "};",
        " ",
        "const headerBarCustomDialogOpenComputed = computed({"
      ],
      "text": "テキストファイル を読み込みます",
      "translation": ""
    },
    {
      "neighbors": [
        "  SAVE_PROJECT: \"プロジェクトを上書き保存します。\",",
        "  UNDO: \"操作を一つ戻します。\",",
        "  REDO: \"元に戻した操作をやり直します。\",",
        "  IMPORT_TEXT: \"テキストファイル(.txt)を読み込みます。\",",
        "  EMPTY:",
        "    \"これはボタンではありません。レイアウトの調整に使います。また、実際には表示されません。\",",
        "};",
        " ",
        "const headerBarCustomDialogOpenComputed = computed({",
        "  get: () => props.modelValue || isChanged.value,",
        "  set: (val) => emit(\"update:modelValue\", val),"
      ],
      "text": "これはボタンではありません レイアウトの調整に使います また 実際には表示されません",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        ");",
        " ",
        "const applyDefaultSetting = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ツールバーをデフォルトに戻します\",",
        "    message: \"ツールバーをデフォルトに戻します。<br/>よろしいですか？\",",
        "    html: true,",
        "    actionName: \"はい\",",
        "    cancel: \"いいえ\",",
        "  });"
      ],
      "text": "ツールバーをデフォルトに戻します",
      "translation": ""
    },
    {
      "neighbors": [
        ");",
        " ",
        "const applyDefaultSetting = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ツールバーをデフォルトに戻します\",",
        "    message: \"ツールバーをデフォルトに戻します。<br/>よろしいですか？\",",
        "    html: true,",
        "    actionName: \"はい\",",
        "    cancel: \"いいえ\",",
        "  });",
        "  if (result === \"OK\") {"
      ],
      "text": "ツールバーをデフォルトに戻します よろしいですか",
      "translation": ""
    },
    {
      "neighbors": [
        "const applyDefaultSetting = async () => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ツールバーをデフォルトに戻します\",",
        "    message: \"ツールバーをデフォルトに戻します。<br/>よろしいですか？\",",
        "    html: true,",
        "    actionName: \"はい\",",
        "    cancel: \"いいえ\",",
        "  });",
        "  if (result === \"OK\") {",
        "    toolbarButtons.value = [...defaultSetting];",
        "    selectedButton.value = toolbarButtons.value[0];"
      ],
      "text": "はい",
      "translation": ""
    },
    {
      "neighbors": [
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"ツールバーをデフォルトに戻します\",",
        "    message: \"ツールバーをデフォルトに戻します。<br/>よろしいですか？\",",
        "    html: true,",
        "    actionName: \"はい\",",
        "    cancel: \"いいえ\",",
        "  });",
        "  if (result === \"OK\") {",
        "    toolbarButtons.value = [...defaultSetting];",
        "    selectedButton.value = toolbarButtons.value[0];",
        "  }"
      ],
      "text": "いいえ",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const finishOrNotDialog = async () => {",
        "  if (isChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"カスタマイズを終了しますか？\",",
        "      message: \"このまま終了すると、カスタマイズは破棄されてリセットされます。\",",
        "      actionName: \"終了\",",
        "    });",
        "    if (result === \"OK\") {",
        "      toolbarButtons.value = [...store.state.toolbarSetting];"
      ],
      "text": "カスタマイズを終了しますか",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const finishOrNotDialog = async () => {",
        "  if (isChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"カスタマイズを終了しますか？\",",
        "      message: \"このまま終了すると、カスタマイズは破棄されてリセットされます。\",",
        "      actionName: \"終了\",",
        "    });",
        "    if (result === \"OK\") {",
        "      toolbarButtons.value = [...store.state.toolbarSetting];",
        "      selectedButton.value = toolbarButtons.value[0];"
      ],
      "text": "このまま終了すると カスタマイズは破棄されてリセットされます",
      "translation": ""
    },
    {
      "neighbors": [
        "const finishOrNotDialog = async () => {",
        "  if (isChanged.value) {",
        "    const result = await store.dispatch(\"SHOW_WARNING_DIALOG\", {",
        "      title: \"カスタマイズを終了しますか？\",",
        "      message: \"このまま終了すると、カスタマイズは破棄されてリセットされます。\",",
        "      actionName: \"終了\",",
        "    });",
        "    if (result === \"OK\") {",
        "      toolbarButtons.value = [...store.state.toolbarSetting];",
        "      selectedButton.value = toolbarButtons.value[0];",
        "      headerBarCustomDialogOpenComputed.value = false;"
      ],
      "text": "終了",
      "translation": ""
    }
  ],
  "Dialog.ts": [
    {
      "neighbors": [
        " ",
        "// 汎用ダイアログを表示",
        "export const showAlertDialog = async (",
        "  options: CommonDialogOptions[\"alert\"]",
        ") => {",
        "  options.ok ??= \"閉じる\";",
        " ",
        "  return new Promise((resolve: CommonDialogCallback) => {",
        "    setCommonDialogCallback(",
        "      Dialog.create({",
        "        title: options.title,"
      ],
      "text": "閉じる",
      "translation": ""
    },
    {
      "neighbors": [
        "    );",
        "  });",
        "};",
        " ",
        "/**",
        " * htmlフラグを`true`にする場合、外部からの汚染された文字列を`title`や`message`に含めてはいけません。",
        " * see https://quasar.dev/quasar-plugins/dialog#using-html",
        " */",
        "export const showConfirmDialog = async (",
        "  options: CommonDialogOptions[\"confirm\"]",
        ") => {"
      ],
      "text": "フラグを にする場合 外部からの汚染された文字列を や に含めてはいけません",
      "translation": ""
    },
    {
      "neighbors": [
        " * see https://quasar.dev/quasar-plugins/dialog#using-html",
        " */",
        "export const showConfirmDialog = async (",
        "  options: CommonDialogOptions[\"confirm\"]",
        ") => {",
        "  options.cancel ??= \"キャンセル\";",
        " ",
        "  return new Promise((resolve: CommonDialogCallback) => {",
        "    setCommonDialogCallback(",
        "      Dialog.create({",
        "        title: options.title,"
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "export const showWarningDialog = async (",
        "  options: CommonDialogOptions[\"warning\"]",
        ") => {",
        "  options.cancel ??= \"キャンセル\";",
        " ",
        "  return new Promise((resolve: CommonDialogCallback) => {",
        "    setCommonDialogCallback(",
        "      Dialog.create({",
        "        title: options.title,"
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "}: {",
        "  mediaType: MediaType;",
        "  dispatch: Dispatch<AllActions>;",
        "}): void => {",
        "  const mediaTypeNames: Record<MediaType, string> = {",
        "    audio: \"音声\",",
        "    text: \"テキスト\",",
        "  };",
        "  dispatch(\"SHOW_NOTIFY_AND_NOT_SHOW_AGAIN_BUTTON\", {",
        "    message: `${mediaTypeNames[mediaType]}を書き出しました`,",
        "    tipName: \"notifyOnGenerate\","
      ],
      "text": "音声",
      "translation": ""
    },
    {
      "neighbors": [
        "  mediaType: MediaType;",
        "  dispatch: Dispatch<AllActions>;",
        "}): void => {",
        "  const mediaTypeNames: Record<MediaType, string> = {",
        "    audio: \"音声\",",
        "    text: \"テキスト\",",
        "  };",
        "  dispatch(\"SHOW_NOTIFY_AND_NOT_SHOW_AGAIN_BUTTON\", {",
        "    message: `${mediaTypeNames[mediaType]}を書き出しました`,",
        "    tipName: \"notifyOnGenerate\",",
        "  });"
      ],
      "text": "テキスト",
      "translation": ""
    },
    {
      "neighbors": [
        "  const mediaTypeNames: Record<MediaType, string> = {",
        "    audio: \"音声\",",
        "    text: \"テキスト\",",
        "  };",
        "  dispatch(\"SHOW_NOTIFY_AND_NOT_SHOW_AGAIN_BUTTON\", {",
        "    message: `${mediaTypeNames[mediaType]}を書き出しました`,",
        "    tipName: \"notifyOnGenerate\",",
        "  });",
        "};",
        " ",
        "// 書き出し失敗時のダイアログを表示"
      ],
      "text": "を書き出しました",
      "translation": ""
    },
    {
      "neighbors": [
        "  dispatch: Dispatch<AllActions>;",
        "}) => {",
        "  if (mediaType === \"text\") {",
        "    // テキスト書き出し時のエラーを出力",
        "    dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"テキストの書き出しに失敗しました。\",",
        "      message:",
        "        \"書き込みエラーによって失敗しました。空き容量があることや、書き込み権限があることをご確認ください。\",",
        "    });",
        "  } else {",
        "    const defaultErrorMessages: Partial<Record<SaveResult, string>> = {"
      ],
      "text": "テキストの書き出しに失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "  if (mediaType === \"text\") {",
        "    // テキスト書き出し時のエラーを出力",
        "    dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"テキストの書き出しに失敗しました。\",",
        "      message:",
        "        \"書き込みエラーによって失敗しました。空き容量があることや、書き込み権限があることをご確認ください。\",",
        "    });",
        "  } else {",
        "    const defaultErrorMessages: Partial<Record<SaveResult, string>> = {",
        "      WRITE_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\","
      ],
      "text": "書き込みエラーによって失敗しました 空き容量があることや 書き込み権限があることをご確認ください",
      "translation": ""
    },
    {
      "neighbors": [
        "        \"書き込みエラーによって失敗しました。空き容量があることや、書き込み権限があることをご確認ください。\",",
        "    });",
        "  } else {",
        "    const defaultErrorMessages: Partial<Record<SaveResult, string>> = {",
        "      WRITE_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "      ENGINE_ERROR:",
        "        \"エンジンのエラーによって失敗しました。エンジンの再起動をお試しください。\",",
        "      UNKNOWN_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "    };"
      ],
      "text": "何らかの理由で書き出しに失敗しました ログを参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "  } else {",
        "    const defaultErrorMessages: Partial<Record<SaveResult, string>> = {",
        "      WRITE_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "      ENGINE_ERROR:",
        "        \"エンジンのエラーによって失敗しました。エンジンの再起動をお試しください。\",",
        "      UNKNOWN_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "    };",
        " ",
        "    // 音声書き出し時のエラーを出力"
      ],
      "text": "エンジンのエラーによって失敗しました エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "      WRITE_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "      ENGINE_ERROR:",
        "        \"エンジンのエラーによって失敗しました。エンジンの再起動をお試しください。\",",
        "      UNKNOWN_ERROR:",
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "    };",
        " ",
        "    // 音声書き出し時のエラーを出力",
        "    dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"書き出しに失敗しました。\","
      ],
      "text": "何らかの理由で書き出しに失敗しました ログを参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "        \"何らかの理由で書き出しに失敗しました。ログを参照してください。\",",
        "    };",
        " ",
        "    // 音声書き出し時のエラーを出力",
        "    dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"書き出しに失敗しました。\",",
        "      message: result.errorMessage ?? defaultErrorMessages[result.result] ?? \"\",",
        "    });",
        "  }",
        "};",
        " "
      ],
      "text": "書き出しに失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    textColor: \"toast-display\" + suffix,",
        "    icon: options.isWarning ? \"warning\" : \"info\",",
        "    timeout: NOTIFY_TIMEOUT,",
        "    actions: [",
        "      {",
        "        label: \"今後この通知をしない\",",
        "        textColor: \"toast-button-display\" + suffix,",
        "        handler: () => {",
        "          dispatch(\"SET_CONFIRMED_TIP\", {",
        "            confirmedTip: {",
        "              [options.tipName]: true,"
      ],
      "text": "今後この通知をしない",
      "translation": ""
    }
  ],
  "AudioCell.vue": [
    {
      "neighbors": [
        "          selectAndSetActiveAudioKey();",
        "        }",
        "      \"",
        "    />",
        "    <!--",
        "      input.valueをスクリプトから変更した場合は@changeが発火しないため、",
        "      @blurと@keydown.prevent.enter.exactに分けている",
        "    -->",
        "    <q-input",
        "      ref=\"textField\"",
        "      filled"
      ],
      "text": "をスクリプトから変更した場合は が発火しないため",
      "translation": ""
    },
    {
      "neighbors": [
        "        }",
        "      \"",
        "    />",
        "    <!--",
        "      input.valueをスクリプトから変更した場合は@changeが発火しないため、",
        "      @blurと@keydown.prevent.enter.exactに分けている",
        "    -->",
        "    <q-input",
        "      ref=\"textField\"",
        "      filled",
        "      dense"
      ],
      "text": "と に分けている",
      "translation": ""
    },
    {
      "neighbors": [
        "      class=\"full-width\"",
        "      color=\"primary\"",
        "      :disable=\"uiLocked\"",
        "      :error=\"audioTextBuffer.length >= 80\"",
        "      :model-value=\"audioTextBuffer\"",
        "      :aria-label=\"`${textLineNumberIndex}行目`\"",
        "      @update:model-value=\"setAudioTextBuffer\"",
        "      @focus=\"",
        "        clearInputSelection();",
        "        selectAndSetActiveAudioKey();",
        "      \""
      ],
      "text": "行目",
      "translation": ""
    },
    {
      "neighbors": [
        "      @blur=\"pushAudioTextIfNeeded()\"",
        "      @paste=\"pasteOnAudioCell\"",
        "      @keydown.prevent.enter.exact=\"pushAudioTextIfNeeded\"",
        "    >",
        "      <template #error>",
        "        文章が長いと正常に動作しない可能性があります。",
        "        句読点の位置で文章を分割してください。",
        "      </template>",
        "      <template v-if=\"enableDeleteButton\" #after>",
        "        <q-btn",
        "          round"
      ],
      "text": "文章が長いと正常に動作しない可能性があります",
      "translation": ""
    },
    {
      "neighbors": [
        "      @paste=\"pasteOnAudioCell\"",
        "      @keydown.prevent.enter.exact=\"pushAudioTextIfNeeded\"",
        "    >",
        "      <template #error>",
        "        文章が長いと正常に動作しない可能性があります。",
        "        句読点の位置で文章を分割してください。",
        "      </template>",
        "      <template v-if=\"enableDeleteButton\" #after>",
        "        <q-btn",
        "          round",
        "          flat"
      ],
      "text": "句読点の位置で文章を分割してください",
      "translation": ""
    },
    {
      "neighbors": [
        "          round",
        "          flat",
        "          icon=\"delete_outline\"",
        "          size=\"0.8rem\"",
        "          :disable=\"uiLocked\"",
        "          :aria-label=\"`${textLineNumberIndex}行目を削除`\"",
        "          @click=\"removeCell\"",
        "        />",
        "      </template>",
        "      <context-menu",
        "        ref=\"contextMenu\""
      ],
      "text": "行目を削除",
      "translation": ""
    },
    {
      "neighbors": [
        "const pasteOnAudioCell = async (event: ClipboardEvent) => {",
        "  event.preventDefault();",
        "  paste({ text: event.clipboardData?.getData(\"text/plain\") });",
        "};",
        "/**",
        " * 貼り付け。",
        " * ブラウザ版を考えるとClipboard APIをなるべく回避したいため、積極的に`options.text`を指定してください。",
        " */",
        "const paste = async (options?: { text?: string }) => {",
        "  const text = options ? options.text : await navigator.clipboard.readText();",
        "  if (text == undefined) return;"
      ],
      "text": "貼り付け",
      "translation": ""
    },
    {
      "neighbors": [
        "  event.preventDefault();",
        "  paste({ text: event.clipboardData?.getData(\"text/plain\") });",
        "};",
        "/**",
        " * 貼り付け。",
        " * ブラウザ版を考えるとClipboard APIをなるべく回避したいため、積極的に`options.text`を指定してください。",
        " */",
        "const paste = async (options?: { text?: string }) => {",
        "  const text = options ? options.text : await navigator.clipboard.readText();",
        "  if (text == undefined) return;",
        " "
      ],
      "text": "ブラウザ版を考えると をなるべく回避したいため 積極的に を指定してください",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        " ",
        "  const prevAudioKey = props.audioKey;",
        "  if (audioTextBuffer.value == \"\") {",
        "    const text = texts.shift();",
        "    if (text == undefined) throw new Error(\"予期せぬタイプエラーです。\");",
        "    setAudioTextBuffer(text);",
        "    await pushAudioTextIfNeeded();",
        "  }",
        " ",
        "  const audioKeys = await store.dispatch(\"COMMAND_PUT_TEXTS\", {"
      ],
      "text": "予期せぬタイプエラーです",
      "translation": ""
    },
    {
      "neighbors": [
        "          }",
        "        }",
        "      }",
        "      if (willNextFocusIndex === -1) {",
        "        throw new Error(",
        "          \"次に選択するaudioKeyが見付かりませんでした（unreachable）\"",
        "        );",
        "      }",
        "      emit(\"focusCell\", {",
        "        audioKey: audioKeys.value[willNextFocusIndex],",
        "      });"
      ],
      "text": "次に選択する が見付かりませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "  ]",
        ">([",
        "  // NOTE: audioTextBuffer.value の変更が nativeEl.value に反映されるのはnextTick。",
        "  {",
        "    type: \"button\",",
        "    label: \"切り取り\",",
        "    onClick: async () => {",
        "      contextMenu.value?.hide();",
        "      if (textFieldSelection.isEmpty) return;",
        " ",
        "      const text = textFieldSelection.getAsString();"
      ],
      "text": "切り取り",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "    disableWhenUiLocked: true,",
        "  },",
        "  {",
        "    type: \"button\",",
        "    label: \"コピー\",",
        "    onClick: () => {",
        "      contextMenu.value?.hide();",
        "      if (textFieldSelection.isEmpty) return;",
        " ",
        "      navigator.clipboard.writeText(textFieldSelection.getAsString());"
      ],
      "text": "コピー",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "    disableWhenUiLocked: true,",
        "  },",
        "  {",
        "    type: \"button\",",
        "    label: \"貼り付け\",",
        "    onClick: async () => {",
        "      contextMenu.value?.hide();",
        "      paste();",
        "    },",
        "    disableWhenUiLocked: true,"
      ],
      "text": "貼り付け",
      "translation": ""
    },
    {
      "neighbors": [
        "    disableWhenUiLocked: true,",
        "  },",
        "  { type: \"separator\" },",
        "  {",
        "    type: \"button\",",
        "    label: \"全選択\",",
        "    onClick: async () => {",
        "      contextMenu.value?.hide();",
        "      textField.value?.select();",
        "    },",
        "    disableWhenUiLocked: true,"
      ],
      "text": "全選択",
      "translation": ""
    },
    {
      "neighbors": [
        "    disableWhenUiLocked: true,",
        "  },",
        "  { type: \"separator\" },",
        "  {",
        "    type: \"button\",",
        "    label: \"内容をテキストのみに適用\",",
        "    onClick: async () => {",
        "      contextMenu.value?.hide();",
        "      isChangeFlag.value = false;",
        "      await store.dispatch(\"COMMAND_CHANGE_DISPLAY_TEXT\", {",
        "        audioKey: props.audioKey,"
      ],
      "text": "内容をテキストのみに適用",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "    disableWhenUiLocked: true,",
        "  },",
        "]);",
        "/**",
        " * コンテキストメニューの開閉によりFocusやBlurが発生する可能性のある間は`true`。",
        " */",
        "// no-focus を付けた場合と付けてない場合でタイミングが異なるため、両方に対応。",
        "const willFocusOrBlur = ref(false);",
        "const startContextMenuOperation = () => {",
        "  willFocusOrBlur.value = true;"
      ],
      "text": "コンテキストメニューの開閉により や が発生する可能性のある間は",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        "const readyForContextMenu = () => {",
        "  const getMenuItemButton = (label: string) => {",
        "    const item = contextMenudata.value.find((item) => item.label === label);",
        "    if (item?.type !== \"button\")",
        "      throw new Error(\"コンテキストメニューアイテムの取得に失敗しました。\");",
        "    return item;",
        "  };",
        " ",
        "  const MAX_HEADER_LENGTH = 15;",
        "  const SHORTED_HEADER_FRAGMENT_LENGTH = 5;"
      ],
      "text": "コンテキストメニューアイテムの取得に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  // 選択範囲を1行目に表示",
        "  const selectionText = textFieldSelection.getAsString();",
        "  if (selectionText.length === 0) {",
        "    isRangeSelected.value = false;",
        "    getMenuItemButton(\"切り取り\").disabled = true;",
        "    getMenuItemButton(\"コピー\").disabled = true;",
        "  } else {",
        "    isRangeSelected.value = true;",
        "    getMenuItemButton(\"切り取り\").disabled = false;",
        "    getMenuItemButton(\"コピー\").disabled = false;"
      ],
      "text": "切り取り",
      "translation": ""
    },
    {
      "neighbors": [
        "  // 選択範囲を1行目に表示",
        "  const selectionText = textFieldSelection.getAsString();",
        "  if (selectionText.length === 0) {",
        "    isRangeSelected.value = false;",
        "    getMenuItemButton(\"切り取り\").disabled = true;",
        "    getMenuItemButton(\"コピー\").disabled = true;",
        "  } else {",
        "    isRangeSelected.value = true;",
        "    getMenuItemButton(\"切り取り\").disabled = false;",
        "    getMenuItemButton(\"コピー\").disabled = false;",
        "    if (selectionText.length > MAX_HEADER_LENGTH) {"
      ],
      "text": "コピー",
      "translation": ""
    },
    {
      "neighbors": [
        "    isRangeSelected.value = false;",
        "    getMenuItemButton(\"切り取り\").disabled = true;",
        "    getMenuItemButton(\"コピー\").disabled = true;",
        "  } else {",
        "    isRangeSelected.value = true;",
        "    getMenuItemButton(\"切り取り\").disabled = false;",
        "    getMenuItemButton(\"コピー\").disabled = false;",
        "    if (selectionText.length > MAX_HEADER_LENGTH) {",
        "      // 長すぎる場合適度な長さで省略",
        "      contextMenuHeader.value =",
        "        selectionText.length <= MAX_HEADER_LENGTH"
      ],
      "text": "切り取り",
      "translation": ""
    },
    {
      "neighbors": [
        "    getMenuItemButton(\"切り取り\").disabled = true;",
        "    getMenuItemButton(\"コピー\").disabled = true;",
        "  } else {",
        "    isRangeSelected.value = true;",
        "    getMenuItemButton(\"切り取り\").disabled = false;",
        "    getMenuItemButton(\"コピー\").disabled = false;",
        "    if (selectionText.length > MAX_HEADER_LENGTH) {",
        "      // 長すぎる場合適度な長さで省略",
        "      contextMenuHeader.value =",
        "        selectionText.length <= MAX_HEADER_LENGTH",
        "          ? selectionText"
      ],
      "text": "コピー",
      "translation": ""
    }
  ],
  "SettingDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr fFf\" class=\"bg-background\">",
        "      <q-page-container class=\"root\">",
        "        <q-header class=\"q-pa-sm\">",
        "          <q-toolbar>",
        "            <q-toolbar-title class=\"text-display\"",
        "              >設定 / オプション</q-toolbar-title",
        "            >",
        "            <q-space />",
        "            <!-- close button -->",
        "            <q-btn",
        "              round"
      ],
      "text": "設定 オプション",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-btn",
        "              round",
        "              flat",
        "              icon=\"close\"",
        "              color=\"display\"",
        "              aria-label=\"設定を閉じる\"",
        "              @click=\"settingDialogOpenedComputed = false\"",
        "            />",
        "          </q-toolbar>",
        "        </q-header>",
        "        <q-page ref=\"scroller\" class=\"scroller\">"
      ],
      "text": "設定を閉じる",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-page ref=\"scroller\" class=\"scroller\">",
        "          <div class=\"q-pa-md row items-start q-gutter-md\">",
        "            <!-- Engine Mode Card -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">エンジン</h5>",
        "                <template v-if=\"engineIds.length > 1\">",
        "                  <q-space />",
        "                  <q-select",
        "                    v-model=\"selectedEngineId\"",
        "                    borderless"
      ],
      "text": "エンジン",
      "translation": ""
    },
    {
      "neighbors": [
        "                    :option-label=\"renderEngineNameLabel\"",
        "                  />",
        "                </template>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>エンジンモード</div>",
        "                <div",
        "                  aria-label=\" GPU モードの利用には GPU が必要です。Linux は",
        "                      NVIDIA&trade; 製 GPU のみ対応しています。また、エンジンが対応していない場合、切り替えられません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">"
      ],
      "text": "エンジンモード",
      "translation": ""
    },
    {
      "neighbors": [
        "                </template>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>エンジンモード</div>",
        "                <div",
        "                  aria-label=\" GPU モードの利用には GPU が必要です。Linux は",
        "                      NVIDIA&trade; 製 GPU のみ対応しています。また、エンジンが対応していない場合、切り替えられません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\""
      ],
      "text": "モードの利用には が必要です は",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>エンジンモード</div>",
        "                <div",
        "                  aria-label=\" GPU モードの利用には GPU が必要です。Linux は",
        "                      NVIDIA&trade; 製 GPU のみ対応しています。また、エンジンが対応していない場合、切り替えられません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "製 のみ対応しています また エンジンが対応していない場合 切り替えられません",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      GPU モードの利用には GPU が必要です。Linux は",
        "                      NVIDIA&trade; 製 GPU のみ対応しています。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />"
      ],
      "text": "モードの利用には が必要です は",
      "translation": ""
    },
    {
      "neighbors": [
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      GPU モードの利用には GPU が必要です。Linux は",
        "                      NVIDIA&trade; 製 GPU のみ対応しています。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-btn-toggle"
      ],
      "text": "製 のみ対応しています",
      "translation": ""
    },
    {
      "neighbors": [
        "                    transition-hide=\"jump-right\"",
        "                    :target=\"!gpuSwitchEnabled(selectedEngineId)\"",
        "                  >",
        "                    {{",
        "                      engineInfos[selectedEngineId].name",
        "                    }}はCPU版のためGPUモードを利用できません。",
        "                  </q-tooltip>",
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>音声のサンプリングレート</div>"
      ],
      "text": "は 版のため モードを利用できません",
      "translation": ""
    },
    {
      "neighbors": [
        "                    }}はCPU版のためGPUモードを利用できません。",
        "                  </q-tooltip>",
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>音声のサンプリングレート</div>",
        "                <div",
        "                  aria-label=\"再生と保存時の音声のサンプリングレートを変更できます（サンプリングレートを上げても音声の品質は上がりません）。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "音声のサンプリングレート",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>音声のサンプリングレート</div>",
        "                <div",
        "                  aria-label=\"再生と保存時の音声のサンプリングレートを変更できます（サンプリングレートを上げても音声の品質は上がりません）。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "再生と保存時の音声のサンプリングレートを変更できます サンプリングレートを上げても音声の品質は上がりません",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      再生・保存時の音声のサンプリングレートを変更できます（サンプリングレートを上げても音声の品質は上がりません）。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-select"
      ],
      "text": "再生・保存時の音声のサンプリングレートを変更できます サンプリングレートを上げても音声の品質は上がりません",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "            </q-card>",
        "            <!-- Preservation Setting -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">操作</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>パラメータの引き継ぎ</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキスト欄追加の際に、現在の話速等のパラメータが引き継がれます。\""
      ],
      "text": "操作",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">操作</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>パラメータの引き継ぎ</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキスト欄追加の際に、現在の話速等のパラメータが引き継がれます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "パラメータの引き継ぎ",
      "translation": ""
    },
    {
      "neighbors": [
        "                <h5 class=\"text-h5\">操作</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>パラメータの引き継ぎ</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキスト欄追加の際に、現在の話速等のパラメータが引き継がれます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 テキスト欄追加の際に 現在の話速等のパラメータが引き継がれます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、テキスト欄追加の際に、現在の話速等のパラメータが引き継がれます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 テキスト欄追加の際に 現在の話速等のパラメータが引き継がれます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  @update:model-value=\"changeinheritAudioInfo($event)\"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>再生位置を追従</div>",
        "                <div",
        "                  aria-label=\"音声再生中の、下部パネルの自動スクロールのモードを選べます。\"",
        "                >",
        "                  <span",
        "                    v-for=\"(obj, key) in activePointScrollModeOptions\""
      ],
      "text": "再生位置を追従",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>再生位置を追従</div>",
        "                <div",
        "                  aria-label=\"音声再生中の、下部パネルの自動スクロールのモードを選べます。\"",
        "                >",
        "                  <span",
        "                    v-for=\"(obj, key) in activePointScrollModeOptions\"",
        "                    :key=\"key\"",
        "                    class=\"visually-hidden\""
      ],
      "text": "音声再生中の 下部パネルの自動スクロールのモードを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                >",
        "                  <span",
        "                    v-for=\"(obj, key) in activePointScrollModeOptions\"",
        "                    :key=\"key\"",
        "                    class=\"visually-hidden\"",
        "                    >{{ `「${obj.label}」モードの場合、${obj.desc}` }}</span",
        "                  >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "モードの場合",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      音声再生中の、下部パネルの自動スクロールのモードを選べます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <div class=\"scroll-mode-toggle\">"
      ],
      "text": "音声再生中の 下部パネルの自動スクロールのモードを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                    </q-tooltip>",
        "                  </q-radio>",
        "                </div>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>テキスト分割の区切り</div>",
        "                <div",
        "                  aria-label=\"テキスト貼り付けの際のテキストの分割箇所を選べます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "テキスト分割の区切り",
      "translation": ""
    },
    {
      "neighbors": [
        "                </div>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>テキスト分割の区切り</div>",
        "                <div",
        "                  aria-label=\"テキスト貼り付けの際のテキストの分割箇所を選べます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "テキスト貼り付けの際のテキストの分割箇所を選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      テキスト貼り付けの際のテキストの分割箇所を選べます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-btn-toggle"
      ],
      "text": "テキスト貼り付けの際のテキストの分割箇所を選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  text-color=\"display\"",
        "                  toggle-color=\"primary\"",
        "                  toggle-text-color=\"display-on-primary\"",
        "                  :options=\"[",
        "                    {",
        "                      label: '句点と改行',",
        "                      value: 'PERIOD_AND_NEW_LINE',",
        "                      slot: 'splitTextPeriodAndNewLine',",
        "                    },",
        "                    {",
        "                      label: '改行',"
      ],
      "text": "句点と改行",
      "translation": ""
    },
    {
      "neighbors": [
        "                      label: '句点と改行',",
        "                      value: 'PERIOD_AND_NEW_LINE',",
        "                      slot: 'splitTextPeriodAndNewLine',",
        "                    },",
        "                    {",
        "                      label: '改行',",
        "                      value: 'NEW_LINE',",
        "                      slot: 'splitTextNewLine',",
        "                    },",
        "                    { label: 'オフ', value: 'OFF', slot: 'splitTextOFF' },",
        "                  ]\""
      ],
      "text": "改行",
      "translation": ""
    },
    {
      "neighbors": [
        "                    {",
        "                      label: '改行',",
        "                      value: 'NEW_LINE',",
        "                      slot: 'splitTextNewLine',",
        "                    },",
        "                    { label: 'オフ', value: 'OFF', slot: 'splitTextOFF' },",
        "                  ]\"",
        "                  @update:model-value=\"changeSplitTextWhenPaste($event)\"",
        "                >",
        "                  <template #splitTextPeriodAndNewLine>",
        "                    <q-tooltip"
      ],
      "text": "オフ",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      句点と改行を基にテキストを分割します。",
        "                    </q-tooltip>",
        "                  </template>",
        "                  <template #splitTextNewLine>",
        "                    <q-tooltip",
        "                      :delay=\"500\""
      ],
      "text": "句点と改行を基にテキストを分割します",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      改行のみを基にテキストを分割します。",
        "                    </q-tooltip>",
        "                  </template>",
        "                  <template #splitTextOFF>",
        "                    <q-tooltip",
        "                      :delay=\"500\""
      ],
      "text": "改行のみを基にテキストを分割します",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      分割を行いません。",
        "                    </q-tooltip>",
        "                  </template>",
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">"
      ],
      "text": "分割を行いません",
      "translation": ""
    },
    {
      "neighbors": [
        "                    </q-tooltip>",
        "                  </template>",
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>非表示にしたヒントを全て再表示</div>",
        "                <div",
        "                  aria-label=\"過去に非表示にしたヒントを全て再表示できます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "非表示にしたヒントを全て再表示",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-btn-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>非表示にしたヒントを全て再表示</div>",
        "                <div",
        "                  aria-label=\"過去に非表示にしたヒントを全て再表示できます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "過去に非表示にしたヒントを全て再表示できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      過去に非表示にしたヒントを全て再表示できます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <!-- ボタンクリックのフィードバックのためのチェックマーク -->"
      ],
      "text": "過去に非表示にしたヒントを全て再表示できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  color=\"primary\"",
        "                  style=\"margin-right: 8px\"",
        "                >",
        "                </q-icon>",
        "                <q-btn",
        "                  label=\"再表示する\"",
        "                  unelevated",
        "                  color=\"background\"",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap q-mr-sm\"",
        "                  :disable=\"isDefaultConfirmedTips\""
      ],
      "text": "再表示する",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "            </q-card>",
        "            <!-- Saving Card -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">保存</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>書き出し先を固定</div>",
        "                <div",
        "                  aria-label=\"ONの場合、書き出す際のフォルダをあらかじめ指定できます。\""
      ],
      "text": "保存",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">保存</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>書き出し先を固定</div>",
        "                <div",
        "                  aria-label=\"ONの場合、書き出す際のフォルダをあらかじめ指定できます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "書き出し先を固定",
      "translation": ""
    },
    {
      "neighbors": [
        "                <h5 class=\"text-h5\">保存</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>書き出し先を固定</div>",
        "                <div",
        "                  aria-label=\"ONの場合、書き出す際のフォルダをあらかじめ指定できます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 書き出す際のフォルダをあらかじめ指定できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、書き出す際のフォルダをあらかじめ指定できます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-input"
      ],
      "text": "の場合 書き出す際のフォルダをあらかじめ指定できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                <q-space />",
        "                <q-input",
        "                  v-if=\"savingSetting.fixedExportEnabled\"",
        "                  dense",
        "                  maxheight=\"10px\"",
        "                  label=\"書き出し先のフォルダ\"",
        "                  hide-bottom-space",
        "                  readonly",
        "                  :model-value=\"savingSetting.fixedExportDir\"",
        "                  :input-style=\"{",
        "                    width: `${savingSetting.fixedExportDir.length / 2 + 1}em`,"
      ],
      "text": "書き出し先のフォルダ",
      "translation": ""
    },
    {
      "neighbors": [
        "                      color=\"primary\"",
        "                      icon=\"folder_open\"",
        "                      @click=\"openFileExplore\"",
        "                    >",
        "                      <q-tooltip :delay=\"500\" anchor=\"bottom left\">",
        "                        フォルダ選択",
        "                      </q-tooltip>",
        "                    </q-btn>",
        "                  </template>",
        "                </q-input>",
        "                <q-toggle"
      ],
      "text": "フォルダ選択",
      "translation": ""
    },
    {
      "neighbors": [
        "              <file-name-pattern-dialog",
        "                v-model:open-dialog=\"showsFilePatternEditDialog\"",
        "              />",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>書き出しファイル名パターン</div>",
        "                <div",
        "                  aria-label=\"書き出す際のファイル名のパターンをカスタマイズできます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "書き出しファイル名パターン",
      "translation": ""
    },
    {
      "neighbors": [
        "              />",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>書き出しファイル名パターン</div>",
        "                <div",
        "                  aria-label=\"書き出す際のファイル名のパターンをカスタマイズできます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "書き出す際のファイル名のパターンをカスタマイズできます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      書き出す際のファイル名のパターンをカスタマイズできます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <div class=\"q-px-sm text-ellipsis\">"
      ],
      "text": "書き出す際のファイル名のパターンをカスタマイズできます",
      "translation": ""
    },
    {
      "neighbors": [
        "                <q-space />",
        "                <div class=\"q-px-sm text-ellipsis\">",
        "                  {{ savingSetting.fileNamePattern }}",
        "                </div>",
        "                <q-btn",
        "                  label=\"編集する\"",
        "                  unelevated",
        "                  color=\"background\"",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap q-mr-sm\"",
        "                  @click=\"showsFilePatternEditDialog = true\""
      ],
      "text": "編集する",
      "translation": ""
    },
    {
      "neighbors": [
        "                  @click=\"showsFilePatternEditDialog = true\"",
        "                />",
        "              </q-card-actions>",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>上書き防止</div>",
        "                <div",
        "                  aria-label=\"ONの場合、書き出す際に同名ファイルが既にあった場合に、かわりに連番で保存され、上書きされません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "上書き防止",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>上書き防止</div>",
        "                <div",
        "                  aria-label=\"ONの場合、書き出す際に同名ファイルが既にあった場合に、かわりに連番で保存され、上書きされません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 書き出す際に同名ファイルが既にあった場合に かわりに連番で保存され 上書きされません",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、書き出す際に同名ファイルが既にあった場合に、かわりに連番で保存され、上書きされません。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 書き出す際に同名ファイルが既にあった場合に かわりに連番で保存され 上書きされません",
      "translation": ""
    },
    {
      "neighbors": [
        "                  \"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>文字コード</div>",
        "                <div",
        "                  aria-label=\"テキストファイルを書き出す際の文字コードを選べます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "文字コード",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>文字コード</div>",
        "                <div",
        "                  aria-label=\"テキストファイルを書き出す際の文字コードを選べます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "テキストファイルを書き出す際の文字コードを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      テキストファイルを書き出す際の文字コードを選べます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-btn-toggle"
      ],
      "text": "テキストファイルを書き出す際の文字コードを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                    handleSavingSettingChange('fileEncoding', $event)",
        "                  \"",
        "                />",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>txtファイルを書き出し</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキストがtxtファイルとして音声書き出し時に追加で書き出されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "ファイルを書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "                />",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>txtファイルを書き出し</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキストがtxtファイルとして音声書き出し時に追加で書き出されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 テキストが ファイルとして音声書き出し時に追加で書き出されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、テキストがtxtファイルとして音声書き出し時に追加で書き出されます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 テキストが ファイルとして音声書き出し時に追加で書き出されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  \"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>labファイルを書き出し</div>",
        "                <div",
        "                  aria-label=\"ONの場合、リップシンク用のlabファイルが音声書き出し時に追加で書き出されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "ファイルを書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>labファイルを書き出し</div>",
        "                <div",
        "                  aria-label=\"ONの場合、リップシンク用のlabファイルが音声書き出し時に追加で書き出されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 リップシンク用の ファイルが音声書き出し時に追加で書き出されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、リップシンク用のlabファイルが音声書き出し時に追加で書き出されます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 リップシンク用の ファイルが音声書き出し時に追加で書き出されます",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "            </q-card>",
        "            <!-- Theme Card -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">外観</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>テーマ</div>",
        "                <div aria-label=\"エディタの色を選べます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">"
      ],
      "text": "外観",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">外観</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>テーマ</div>",
        "                <div aria-label=\"エディタの色を選べます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "テーマ",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">外観</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>テーマ</div>",
        "                <div aria-label=\"エディタの色を選べます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\"",
        "                      self=\"center left\""
      ],
      "text": "エディタの色を選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      エディタの色を選べます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-btn-toggle"
      ],
      "text": "エディタの色を選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  :options=\"availableThemeNameComputed\"",
        "                />",
        "              </q-card-actions>",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>フォント</div>",
        "                <div aria-label=\"エディタのフォントを選べます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "フォント",
      "translation": ""
    },
    {
      "neighbors": [
        "                />",
        "              </q-card-actions>",
        " ",
        "              <q-card-actions class=\"q-px-md q-py-sm bg-surface\">",
        "                <div>フォント</div>",
        "                <div aria-label=\"エディタのフォントを選べます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\"",
        "                      self=\"center left\""
      ],
      "text": "エディタのフォントを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      エディタのフォントを選べます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-btn-toggle"
      ],
      "text": "エディタのフォントを選べます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  color=\"background\"",
        "                  text-color=\"display\"",
        "                  toggle-color=\"primary\"",
        "                  toggle-text-color=\"display-on-primary\"",
        "                  :options=\"[",
        "                    { label: 'デフォルト', value: 'default' },",
        "                    { label: 'OS標準', value: 'os' },",
        "                  ]\"",
        "                  @update:model-value=\"changeEditorFont($event)\"",
        "                />",
        "              </q-card-actions>"
      ],
      "text": "デフォルト",
      "translation": ""
    },
    {
      "neighbors": [
        "                  text-color=\"display\"",
        "                  toggle-color=\"primary\"",
        "                  toggle-text-color=\"display-on-primary\"",
        "                  :options=\"[",
        "                    { label: 'デフォルト', value: 'default' },",
        "                    { label: 'OS標準', value: 'os' },",
        "                  ]\"",
        "                  @update:model-value=\"changeEditorFont($event)\"",
        "                />",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">"
      ],
      "text": "標準",
      "translation": ""
    },
    {
      "neighbors": [
        "                  ]\"",
        "                  @update:model-value=\"changeEditorFont($event)\"",
        "                />",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>行番号の表示</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキスト欄の左側に行番号が表示されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "行番号の表示",
      "translation": ""
    },
    {
      "neighbors": [
        "                />",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>行番号の表示</div>",
        "                <div",
        "                  aria-label=\"ONの場合、テキスト欄の左側に行番号が表示されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 テキスト欄の左側に行番号が表示されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、テキスト欄の左側に行番号が表示されます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 テキスト欄の左側に行番号が表示されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  @update:model-value=\"changeShowTextLineNumber($event)\"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>テキスト追加ボタンの表示</div>",
        "                <div",
        "                  aria-label=\"OFFの場合、右下にテキスト追加ボタンが表示されません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "テキスト追加ボタンの表示",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>テキスト追加ボタンの表示</div>",
        "                <div",
        "                  aria-label=\"OFFの場合、右下にテキスト追加ボタンが表示されません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 右下にテキスト追加ボタンが表示されません",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      OFFの場合、右下にテキスト追加ボタンが表示されません。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 右下にテキスト追加ボタンが表示されません",
      "translation": ""
    },
    {
      "neighbors": [
        "            </q-card>",
        " ",
        "            <!-- Advanced Card -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">高度な設定</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>マルチエンジン機能</div>",
        "                <div>",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">"
      ],
      "text": "高度な設定",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">高度な設定</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>マルチエンジン機能</div>",
        "                <div>",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center left\""
      ],
      "text": "マルチエンジン機能",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center left\"",
        "                      self=\"center right\"",
        "                      transition-show=\"jump-left\"",
        "                      transition-hide=\"jump-right\"",
        "                    >",
        "                      複数のVOICEVOX準拠エンジンを利用可能にする",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "複数の 準拠エンジンを利用可能にする",
      "translation": ""
    },
    {
      "neighbors": [
        "                  @update:model-value=\"setEnableMultiEngine($event)\"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>音声をステレオ化</div>",
        "                <div",
        "                  aria-label=\"ONの場合、音声データがモノラルからステレオに変換されてから再生・保存が行われます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "音声をステレオ化",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>音声をステレオ化</div>",
        "                <div",
        "                  aria-label=\"ONの場合、音声データがモノラルからステレオに変換されてから再生・保存が行われます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 音声データがモノラルからステレオに変換されてから再生・保存が行われます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、音声データがモノラルからステレオに変換されてから再生・保存が行われます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 音声データがモノラルからステレオに変換されてから再生・保存が行われます",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "              <q-card-actions",
        "                class=\"q-px-md q-py-none bg-surface\"",
        "                :class=\"{ disabled: !canSetAudioOutputDevice }\"",
        "              >",
        "                <div>再生デバイス</div>",
        "                <div aria-label=\"音声の再生デバイスを変更できます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "再生デバイス",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-card-actions",
        "                class=\"q-px-md q-py-none bg-surface\"",
        "                :class=\"{ disabled: !canSetAudioOutputDevice }\"",
        "              >",
        "                <div>再生デバイス</div>",
        "                <div aria-label=\"音声の再生デバイスを変更できます。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\"",
        "                      self=\"center left\""
      ],
      "text": "音声の再生デバイスを変更できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      音声の再生デバイスを変更できます。",
        "                      <template v-if=\"!canSetAudioOutputDevice\">",
        "                        この機能はお使いの環境でサポートされていないため、使用できません。",
        "                      </template>",
        "                    </q-tooltip>",
        "                  </q-icon>"
      ],
      "text": "音声の再生デバイスを変更できます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      音声の再生デバイスを変更できます。",
        "                      <template v-if=\"!canSetAudioOutputDevice\">",
        "                        この機能はお使いの環境でサポートされていないため、使用できません。",
        "                      </template>",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />"
      ],
      "text": "この機能はお使いの環境でサポートされていないため 使用できません",
      "translation": ""
    },
    {
      "neighbors": [
        "                <q-space />",
        "                <q-select",
        "                  v-model=\"currentAudioOutputDeviceComputed\"",
        "                  :disable=\"!canSetAudioOutputDevice\"",
        "                  dense",
        "                  label=\"再生デバイス\"",
        "                  :options=\"availableAudioOutputDevices\"",
        "                  class=\"col-7\"",
        "                >",
        "                </q-select>",
        "              </q-card-actions>"
      ],
      "text": "再生デバイス",
      "translation": ""
    },
    {
      "neighbors": [
        "            </q-card>",
        " ",
        "            <!-- Experimental Card -->",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <div class=\"text-h5\">実験的機能</div>",
        "              </q-card-actions>",
        "              <!-- 今後実験的機能を追加する場合はここに追加 -->",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>プリセット機能</div>",
        "                <div"
      ],
      "text": "実験的機能",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-card-actions>",
        "                <div class=\"text-h5\">実験的機能</div>",
        "              </q-card-actions>",
        "              <!-- 今後実験的機能を追加する場合はここに追加 -->",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>プリセット機能</div>",
        "                <div",
        "                  aria-label=\"プリセット機能を有効にします。あらかじめ登録しておいた話速などのパラメータを呼び出せるようになります。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "プリセット機能",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "              <!-- 今後実験的機能を追加する場合はここに追加 -->",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>プリセット機能</div>",
        "                <div",
        "                  aria-label=\"プリセット機能を有効にします。あらかじめ登録しておいた話速などのパラメータを呼び出せるようになります。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "プリセット機能を有効にします あらかじめ登録しておいた話速などのパラメータを呼び出せるようになります",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      プリセット機能を有効にします。あらかじめ登録しておいた話速などのパラメータを呼び出せるようになります。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "プリセット機能を有効にします あらかじめ登録しておいた話速などのパラメータを呼び出せるようになります",
      "translation": ""
    },
    {
      "neighbors": [
        "                  @update:model-value=\"changeEnablePreset\"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>スタイル変更時にデフォルトプリセットを適用</div>",
        "                <div",
        "                  aria-label=\"ONの場合、キャラやスタイルの変更時にデフォルトプリセットが自動的に適用されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "スタイル変更時にデフォルトプリセットを適用",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>スタイル変更時にデフォルトプリセットを適用</div>",
        "                <div",
        "                  aria-label=\"ONの場合、キャラやスタイルの変更時にデフォルトプリセットが自動的に適用されます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 キャラやスタイルの変更時にデフォルトプリセットが自動的に適用されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、キャラやスタイルの変更時にデフォルトプリセットが自動的に適用されます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 キャラやスタイルの変更時にデフォルトプリセットが自動的に適用されます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  \"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>疑問文を自動調整</div>",
        "                <div",
        "                  aria-label=\"ONの場合、疑問文の語尾の音高が自動的に上げられます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "疑問文を自動調整",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>疑問文を自動調整</div>",
        "                <div",
        "                  aria-label=\"ONの場合、疑問文の語尾の音高が自動的に上げられます。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 疑問文の語尾の音高が自動的に上げられます",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、疑問文の語尾の音高が自動的に上げられます。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 疑問文の語尾の音高が自動的に上げられます",
      "translation": ""
    },
    {
      "neighbors": [
        "                  \"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>モーフィング機能</div>",
        "                <div",
        "                  aria-label=\"モーフィング機能を有効にします。2つのスタイルの中間を選べるようになります。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "モーフィング機能",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>モーフィング機能</div>",
        "                <div",
        "                  aria-label=\"モーフィング機能を有効にします。2つのスタイルの中間を選べるようになります。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "モーフィング機能を有効にします つのスタイルの中間を選べるようになります",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      モーフィング機能を有効にします。2つのスタイルの中間を選べるようになります。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "モーフィング機能を有効にします つのスタイルの中間を選べるようになります",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-card-actions>",
        "              <q-card-actions",
        "                v-if=\"!isProduction\"",
        "                class=\"q-px-md q-py-none bg-surface\"",
        "              >",
        "                <div>複数選択</div>",
        "                <div aria-label=\"複数のテキスト欄を選択できるようにします。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "複数選択",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-card-actions",
        "                v-if=\"!isProduction\"",
        "                class=\"q-px-md q-py-none bg-surface\"",
        "              >",
        "                <div>複数選択</div>",
        "                <div aria-label=\"複数のテキスト欄を選択できるようにします。\">",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\"",
        "                      self=\"center left\""
      ],
      "text": "複数のテキスト欄を選択できるようにします",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      複数のテキスト欄を選択できるようにします。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "複数のテキスト欄を選択できるようにします",
      "translation": ""
    },
    {
      "neighbors": [
        "                  \"",
        "                >",
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>調整結果の保持</div>",
        "                <div",
        "                  aria-label=\"テキスト変更時、同じ読みのアクセント区間内の調整結果を保持します。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "調整結果の保持",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>調整結果の保持</div>",
        "                <div",
        "                  aria-label=\"テキスト変更時、同じ読みのアクセント区間内の調整結果を保持します。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "テキスト変更時 同じ読みのアクセント区間内の調整結果を保持します",
      "translation": ""
    },
    {
      "neighbors": [
        "                      :delay=\"500\"",
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                      >ONの場合、テキスト変更時、同じ読みのアクセント区間内の調整結果を保持します。</q-tooltip",
        "                    >",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle"
      ],
      "text": "の場合 テキスト変更時 同じ読みのアクセント区間内の調整結果を保持します",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-toggle>",
        "              </q-card-actions>",
        "            </q-card>",
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">データ収集</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>ソフトウェア利用状況のデータ収集を許可</div>",
        "                <div",
        "                  aria-label=\"ONの場合、各UIの利用率などのデータが送信され、VOICEVOXの改善に役立てられます。テキストデータや音声データは送信されません。\""
      ],
      "text": "データ収集",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card flat class=\"setting-card\">",
        "              <q-card-actions>",
        "                <h5 class=\"text-h5\">データ収集</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>ソフトウェア利用状況のデータ収集を許可</div>",
        "                <div",
        "                  aria-label=\"ONの場合、各UIの利用率などのデータが送信され、VOICEVOXの改善に役立てられます。テキストデータや音声データは送信されません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip"
      ],
      "text": "ソフトウェア利用状況のデータ収集を許可",
      "translation": ""
    },
    {
      "neighbors": [
        "                <h5 class=\"text-h5\">データ収集</h5>",
        "              </q-card-actions>",
        "              <q-card-actions class=\"q-px-md q-py-none bg-surface\">",
        "                <div>ソフトウェア利用状況のデータ収集を許可</div>",
        "                <div",
        "                  aria-label=\"ONの場合、各UIの利用率などのデータが送信され、VOICEVOXの改善に役立てられます。テキストデータや音声データは送信されません。\"",
        "                >",
        "                  <q-icon name=\"help_outline\" size=\"sm\" class=\"help-hover-icon\">",
        "                    <q-tooltip",
        "                      :delay=\"500\"",
        "                      anchor=\"center right\""
      ],
      "text": "の場合 各 の利用率などのデータが送信され の改善に役立てられます テキストデータや音声データは送信されません",
      "translation": ""
    },
    {
      "neighbors": [
        "                      anchor=\"center right\"",
        "                      self=\"center left\"",
        "                      transition-show=\"jump-right\"",
        "                      transition-hide=\"jump-left\"",
        "                    >",
        "                      ONの場合、各UIの利用率などのデータが送信され、VOICEVOXの改善に役立てられます。テキストデータ・音声データは送信されません。",
        "                    </q-tooltip>",
        "                  </q-icon>",
        "                </div>",
        "                <q-space />",
        "                <q-toggle v-model=\"acceptRetrieveTelemetryComputed\" />"
      ],
      "text": "の場合 各 の利用率などのデータが送信され の改善に役立てられます テキストデータ・音声データは送信されません",
      "translation": ""
    },
    {
      "neighbors": [
        "    label: string;",
        "    desc: string;",
        "  }",
        "> = {",
        "  CONTINUOUSLY: {",
        "    label: \"連続\",",
        "    desc: \"現在の再生位置を真ん中に表示します。\",",
        "  },",
        "  PAGE: {",
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\","
      ],
      "text": "連続",
      "translation": ""
    },
    {
      "neighbors": [
        "    desc: string;",
        "  }",
        "> = {",
        "  CONTINUOUSLY: {",
        "    label: \"連続\",",
        "    desc: \"現在の再生位置を真ん中に表示します。\",",
        "  },",
        "  PAGE: {",
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\",",
        "  },"
      ],
      "text": "現在の再生位置を真ん中に表示します",
      "translation": ""
    },
    {
      "neighbors": [
        "  CONTINUOUSLY: {",
        "    label: \"連続\",",
        "    desc: \"現在の再生位置を真ん中に表示します。\",",
        "  },",
        "  PAGE: {",
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\",",
        "  },",
        "  OFF: {",
        "    label: \"オフ\",",
        "    desc: \"自動でスクロールしません。\","
      ],
      "text": "ページめくり",
      "translation": ""
    },
    {
      "neighbors": [
        "    label: \"連続\",",
        "    desc: \"現在の再生位置を真ん中に表示します。\",",
        "  },",
        "  PAGE: {",
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\",",
        "  },",
        "  OFF: {",
        "    label: \"オフ\",",
        "    desc: \"自動でスクロールしません。\",",
        "  },"
      ],
      "text": "現在の再生位置が表示範囲外にある場合にスクロールします",
      "translation": ""
    },
    {
      "neighbors": [
        "  PAGE: {",
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\",",
        "  },",
        "  OFF: {",
        "    label: \"オフ\",",
        "    desc: \"自動でスクロールしません。\",",
        "  },",
        "};",
        "const experimentalSetting = computed(() => store.state.experimentalSetting);",
        " "
      ],
      "text": "オフ",
      "translation": ""
    },
    {
      "neighbors": [
        "    label: \"ページめくり\",",
        "    desc: \"現在の再生位置が表示範囲外にある場合にスクロールします。\",",
        "  },",
        "  OFF: {",
        "    label: \"オフ\",",
        "    desc: \"自動でスクロールしません。\",",
        "  },",
        "};",
        "const experimentalSetting = computed(() => store.state.experimentalSetting);",
        " ",
        "// 非表示にしたヒントの再表示"
      ],
      "text": "自動でスクロールしません",
      "translation": ""
    },
    {
      "neighbors": [
        "  });",
        " ",
        "  // 設定をオフにする場合はヒントを表示",
        "  if (!showAddAudioItemButton) {",
        "    const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "      title: \"エディタの＋ボタンを非表示にする\",",
        "      message: \"テキスト欄は Shift + Enter で追加できます\",",
        "      actionName: \"非表示\",",
        "    });",
        "    if (result === \"CANCEL\") {",
        "      // キャンセルしたら設定を元に戻す"
      ],
      "text": "エディタの ボタンを非表示にする",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  // 設定をオフにする場合はヒントを表示",
        "  if (!showAddAudioItemButton) {",
        "    const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "      title: \"エディタの＋ボタンを非表示にする\",",
        "      message: \"テキスト欄は Shift + Enter で追加できます\",",
        "      actionName: \"非表示\",",
        "    });",
        "    if (result === \"CANCEL\") {",
        "      // キャンセルしたら設定を元に戻す",
        "      store.dispatch(\"SET_SHOW_ADD_AUDIO_ITEM_BUTTON\", {"
      ],
      "text": "テキスト欄は で追加できます",
      "translation": ""
    },
    {
      "neighbors": [
        "  // 設定をオフにする場合はヒントを表示",
        "  if (!showAddAudioItemButton) {",
        "    const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "      title: \"エディタの＋ボタンを非表示にする\",",
        "      message: \"テキスト欄は Shift + Enter で追加できます\",",
        "      actionName: \"非表示\",",
        "    });",
        "    if (result === \"CANCEL\") {",
        "      // キャンセルしたら設定を元に戻す",
        "      store.dispatch(\"SET_SHOW_ADD_AUDIO_ITEM_BUTTON\", {",
        "        showAddAudioItemButton: true,"
      ],
      "text": "非表示",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (acceptRetrieveTelemetry) {",
        "      return;",
        "    }",
        " ",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"ソフトウェア利用状況のデータ収集の無効化\",",
        "      message:",
        "        \"ソフトウェア利用状況のデータ収集を完全に無効にするには、VOICEVOXを再起動する必要があります\",",
        "      ok: \"OK\",",
        "    });",
        "  },"
      ],
      "text": "ソフトウェア利用状況のデータ収集の無効化",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        " ",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"ソフトウェア利用状況のデータ収集の無効化\",",
        "      message:",
        "        \"ソフトウェア利用状況のデータ収集を完全に無効にするには、VOICEVOXを再起動する必要があります\",",
        "      ok: \"OK\",",
        "    });",
        "  },",
        "});",
        " "
      ],
      "text": "ソフトウェア利用状況のデータ収集を完全に無効にするには を再起動する必要があります",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        "});",
        " ",
        "const changeUseGpu = async (useGpu: boolean) => {",
        "  store.dispatch(\"SHOW_LOADING_SCREEN\", {",
        "    message: \"起動モードを変更中です\",",
        "  });",
        " ",
        "  await store.dispatch(\"CHANGE_USE_GPU\", {",
        "    useGpu,",
        "    engineId: selectedEngineId.value,"
      ],
      "text": "起動モードを変更中です",
      "translation": ""
    },
    {
      "neighbors": [
        "  88200,",
        "  96000,",
        "];",
        "const renderSamplingRateLabel = (value: SamplingRateOption): string => {",
        "  if (value === \"engineDefault\") {",
        "    return \"デフォルト\";",
        "  } else {",
        "    return `${value / 1000} kHz`;",
        "  }",
        "};",
        " "
      ],
      "text": "デフォルト",
      "translation": ""
    },
    {
      "neighbors": [
        "      .outputSamplingRate;",
        "  },",
        "  set: async (outputSamplingRate: SamplingRateOption) => {",
        "    if (outputSamplingRate !== \"engineDefault\") {",
        "      const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "        title: \"出力サンプリングレートを変更します\",",
        "        message:",
        "          \"出力サンプリングレートを変更しても、音質は変化しません。また、音声の生成処理に若干時間がかかる場合があります。<br />変更しますか？\",",
        "        html: true,",
        "        actionName: \"変更する\",",
        "        cancel: \"変更しない\","
      ],
      "text": "出力サンプリングレートを変更します",
      "translation": ""
    },
    {
      "neighbors": [
        "  set: async (outputSamplingRate: SamplingRateOption) => {",
        "    if (outputSamplingRate !== \"engineDefault\") {",
        "      const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "        title: \"出力サンプリングレートを変更します\",",
        "        message:",
        "          \"出力サンプリングレートを変更しても、音質は変化しません。また、音声の生成処理に若干時間がかかる場合があります。<br />変更しますか？\",",
        "        html: true,",
        "        actionName: \"変更する\",",
        "        cancel: \"変更しない\",",
        "      });",
        "      if (result !== \"OK\") {"
      ],
      "text": "出力サンプリングレートを変更しても 音質は変化しません また 音声の生成処理に若干時間がかかる場合があります 変更しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "      const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "        title: \"出力サンプリングレートを変更します\",",
        "        message:",
        "          \"出力サンプリングレートを変更しても、音質は変化しません。また、音声の生成処理に若干時間がかかる場合があります。<br />変更しますか？\",",
        "        html: true,",
        "        actionName: \"変更する\",",
        "        cancel: \"変更しない\",",
        "      });",
        "      if (result !== \"OK\") {",
        "        return;",
        "      }"
      ],
      "text": "変更する",
      "translation": ""
    },
    {
      "neighbors": [
        "        title: \"出力サンプリングレートを変更します\",",
        "        message:",
        "          \"出力サンプリングレートを変更しても、音質は変化しません。また、音声の生成処理に若干時間がかかる場合があります。<br />変更しますか？\",",
        "        html: true,",
        "        actionName: \"変更する\",",
        "        cancel: \"変更しない\",",
        "      });",
        "      if (result !== \"OK\") {",
        "        return;",
        "      }",
        "    }"
      ],
      "text": "変更しない",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        "});",
        " ",
        "const openFileExplore = async () => {",
        "  const path = await window.electron.showOpenDirectoryDialog({",
        "    title: \"書き出し先のフォルダを選択\",",
        "  });",
        "  if (path) {",
        "    store.dispatch(\"SET_SAVING_SETTING\", {",
        "      data: { ...savingSetting.value, fixedExportDir: path },",
        "    });"
      ],
      "text": "書き出し先のフォルダを選択",
      "translation": ""
    }
  ],
  "ContextMenu.vue": [
    {
      "neighbors": [
        "const store = useStore();",
        "const uiLocked = computed(() => store.getters.UI_LOCKED);",
        " ",
        "const contextMenu = ref<QMenu>();",
        "/**",
        " * コンテキストメニューがフォーカスを奪うかどうかを制御する。",
        " * 通常はアクセシビリティ考慮のためにフォーカスが移るが、input要素の場合は文字の選択範囲が非表示になってしまう。",
        " * この挙動が不要だと考えられるユーザーに向けてはフォーカスを奪わないようにする。",
        " */",
        "const noFocus = ref(false);",
        " "
      ],
      "text": "コンテキストメニューがフォーカスを奪うかどうかを制御する",
      "translation": ""
    },
    {
      "neighbors": [
        "const uiLocked = computed(() => store.getters.UI_LOCKED);",
        " ",
        "const contextMenu = ref<QMenu>();",
        "/**",
        " * コンテキストメニューがフォーカスを奪うかどうかを制御する。",
        " * 通常はアクセシビリティ考慮のためにフォーカスが移るが、input要素の場合は文字の選択範囲が非表示になってしまう。",
        " * この挙動が不要だと考えられるユーザーに向けてはフォーカスを奪わないようにする。",
        " */",
        "const noFocus = ref(false);",
        " ",
        "const buttonCapturer = (event: Event) => {"
      ],
      "text": "通常はアクセシビリティ考慮のためにフォーカスが移るが 要素の場合は文字の選択範囲が非表示になってしまう",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const contextMenu = ref<QMenu>();",
        "/**",
        " * コンテキストメニューがフォーカスを奪うかどうかを制御する。",
        " * 通常はアクセシビリティ考慮のためにフォーカスが移るが、input要素の場合は文字の選択範囲が非表示になってしまう。",
        " * この挙動が不要だと考えられるユーザーに向けてはフォーカスを奪わないようにする。",
        " */",
        "const noFocus = ref(false);",
        " ",
        "const buttonCapturer = (event: Event) => {",
        "  if (event instanceof PointerEvent) {"
      ],
      "text": "この挙動が不要だと考えられるユーザーに向けてはフォーカスを奪わないようにする",
      "translation": ""
    }
  ],
  "AudioDetail.vue": [
    {
      "neighbors": [
        "                !(supportedFeatures && supportedFeatures.adjustMoraPitch)",
        "              \"",
        "            />",
        "            <q-tab",
        "              name=\"length\"",
        "              label=\"長さ\"",
        "              :disable=\"",
        "                !(supportedFeatures && supportedFeatures.adjustPhonemeLength)",
        "              \"",
        "            />",
        "          </q-tabs>"
      ],
      "text": "長さ",
      "translation": ""
    },
    {
      "neighbors": [
        "          v-if=\"selectedDetail === 'pitch'\"",
        "          tip-key=\"tweakableSliderByScroll\"",
        "          class=\"tip-tweakable-slider-by-scroll\"",
        "        >",
        "          <p>",
        "            マウスホイールを使って<br />",
        "            スライダーを微調整できます。",
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />"
      ],
      "text": "マウスホイールを使って",
      "translation": ""
    },
    {
      "neighbors": [
        "          tip-key=\"tweakableSliderByScroll\"",
        "          class=\"tip-tweakable-slider-by-scroll\"",
        "        >",
        "          <p>",
        "            マウスホイールを使って<br />",
        "            スライダーを微調整できます。",
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />",
        "          <span v-if=\"isMac\">Option</span><span v-else>Alt</span> + ホイール:"
      ],
      "text": "スライダーを微調整できます",
      "translation": ""
    },
    {
      "neighbors": [
        "        >",
        "          <p>",
        "            マウスホイールを使って<br />",
        "            スライダーを微調整できます。",
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />",
        "          <span v-if=\"isMac\">Option</span><span v-else>Alt</span> + ホイール:",
        "          一括調整",
        "        </tool-tip>"
      ],
      "text": "ホイール",
      "translation": ""
    },
    {
      "neighbors": [
        "          <p>",
        "            マウスホイールを使って<br />",
        "            スライダーを微調整できます。",
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />",
        "          <span v-if=\"isMac\">Option</span><span v-else>Alt</span> + ホイール:",
        "          一括調整",
        "        </tool-tip>",
        "        <accent-phrase"
      ],
      "text": "ホイール",
      "translation": ""
    },
    {
      "neighbors": [
        "            スライダーを微調整できます。",
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />",
        "          <span v-if=\"isMac\">Option</span><span v-else>Alt</span> + ホイール:",
        "          一括調整",
        "        </tool-tip>",
        "        <accent-phrase",
        "          v-for=\"(accentPhrase, accentPhraseIndex) in accentPhrases\"",
        "          :key=\"accentPhraseIndex\""
      ],
      "text": "ホイール",
      "translation": ""
    },
    {
      "neighbors": [
        "          </p>",
        "          ホイール: ±0.1<br />",
        "          <span v-if=\"isMac\">Command</span><span v-else>Ctrl</span> + ホイール:",
        "          ±0.01<br />",
        "          <span v-if=\"isMac\">Option</span><span v-else>Alt</span> + ホイール:",
        "          一括調整",
        "        </tool-tip>",
        "        <accent-phrase",
        "          v-for=\"(accentPhrase, accentPhraseIndex) in accentPhrases\"",
        "          :key=\"accentPhraseIndex\"",
        "          ref=\"accentPhraseComponents\""
      ],
      "text": "一括調整",
      "translation": ""
    },
    {
      "neighbors": [
        "        .supportedFeatures) as EngineManifest[\"supportedFeatures\"] | undefined",
        ");",
        " ",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [",
        "    \"再生/停止\",",
        "    () => {",
        "      if (!nowPlaying.value && !nowGenerating.value && !uiLocked.value) {",
        "        play();",
        "      } else {",
        "        stop();"
      ],
      "text": "再生 停止",
      "translation": ""
    },
    {
      "neighbors": [
        "        stop();",
        "      }",
        "    },",
        "  ],",
        "  [",
        "    \"ｱｸｾﾝﾄ欄を表示\",",
        "    () => {",
        "      selectedDetail.value = \"accent\";",
        "    },",
        "  ],",
        "  ["
      ],
      "text": "欄を表示",
      "translation": ""
    },
    {
      "neighbors": [
        "    () => {",
        "      selectedDetail.value = \"accent\";",
        "    },",
        "  ],",
        "  [",
        "    \"ｲﾝﾄﾈｰｼｮﾝ欄を表示\",",
        "    () => {",
        "      if (supportedFeatures.value?.adjustMoraPitch) {",
        "        selectedDetail.value = \"pitch\";",
        "      }",
        "    },"
      ],
      "text": "欄を表示",
      "translation": ""
    },
    {
      "neighbors": [
        "        selectedDetail.value = \"pitch\";",
        "      }",
        "    },",
        "  ],",
        "  [",
        "    \"長さ欄を表示\",",
        "    () => {",
        "      if (supportedFeatures.value?.adjustPhonemeLength) {",
        "        selectedDetail.value = \"length\";",
        "      }",
        "    },"
      ],
      "text": "長さ欄を表示",
      "translation": ""
    },
    {
      "neighbors": [
        "        selectedDetail.value = \"length\";",
        "      }",
        "    },",
        "  ],",
        "  [",
        "    \"全体のイントネーションをリセット\",",
        "    () => {",
        "      if (!uiLocked.value && store.getters.ACTIVE_AUDIO_KEY) {",
        "        store.dispatch(\"COMMAND_RESET_MORA_PITCH_AND_LENGTH\", {",
        "          audioKey: store.getters.ACTIVE_AUDIO_KEY,",
        "        });"
      ],
      "text": "全体のイントネーションをリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "        });",
        "      }",
        "    },",
        "  ],",
        "  [",
        "    \"選択中のアクセント句のイントネーションをリセット\",",
        "    () => {",
        "      if (",
        "        !uiLocked.value &&",
        "        store.getters.ACTIVE_AUDIO_KEY &&",
        "        store.getters.AUDIO_PLAY_START_POINT !== undefined"
      ],
      "text": "選択中のアクセント句のイントネーションをリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "    });",
        "  } catch (e) {",
        "    let msg: string | undefined;",
        "    // FIXME: GENERATE_AUDIO_FROM_AUDIO_ITEMのエラーを変えた場合変更する",
        "    if (e instanceof Error && e.message === \"VALID_MORPHING_ERROR\") {",
        "      msg = \"モーフィングの設定が無効です。\";",
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\","
      ],
      "text": "モーフィングの設定が無効です",
      "translation": ""
    },
    {
      "neighbors": [
        "      msg = \"モーフィングの設定が無効です。\";",
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\",",
        "      message: msg ?? \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "};",
        " "
      ],
      "text": "再生に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    } else {",
        "      window.electron.logError(e);",
        "    }",
        "    store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "      title: \"再生に失敗しました\",",
        "      message: msg ?? \"エンジンの再起動をお試しください。\",",
        "    });",
        "  }",
        "};",
        " ",
        "const stop = () => {"
      ],
      "text": "エンジンの再起動をお試しください",
      "translation": ""
    }
  ],
  "TitleBarButtons.vue": [
    {
      "neighbors": [
        "      flat",
        "      round",
        "      icon=\"push_pin\"",
        "      color=\"teal\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最前面固定を解除\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面固定を解除",
        "      </q-tooltip>"
      ],
      "text": "最前面固定を解除",
      "translation": ""
    },
    {
      "neighbors": [
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最前面固定を解除\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面固定を解除",
        "      </q-tooltip>",
        "    </q-btn>",
        "    <q-btn",
        "      v-else",
        "      id=\"pinned-btn\""
      ],
      "text": "最前面固定を解除",
      "translation": ""
    },
    {
      "neighbors": [
        "      flat",
        "      round",
        "      icon=\"push_pin\"",
        "      color=\"display\"",
        "      class=\"title-bar-buttons rotate-45\"",
        "      aria-label=\"最前面に固定\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面に固定",
        "      </q-tooltip>"
      ],
      "text": "最前面に固定",
      "translation": ""
    },
    {
      "neighbors": [
        "      class=\"title-bar-buttons rotate-45\"",
        "      aria-label=\"最前面に固定\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面に固定",
        "      </q-tooltip>",
        "    </q-btn>",
        "  </q-badge>",
        "  <q-badge",
        "    v-else"
      ],
      "text": "最前面に固定",
      "translation": ""
    },
    {
      "neighbors": [
        "      flat",
        "      round",
        "      icon=\"push_pin\"",
        "      color=\"teal\"",
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最前面固定を解除\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面固定を解除",
        "      </q-tooltip>"
      ],
      "text": "最前面固定を解除",
      "translation": ""
    },
    {
      "neighbors": [
        "      class=\"title-bar-buttons\"",
        "      aria-label=\"最前面固定を解除\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面固定を解除",
        "      </q-tooltip>",
        "    </q-btn>",
        "    <q-btn",
        "      v-else",
        "      id=\"pinned-btn\""
      ],
      "text": "最前面固定を解除",
      "translation": ""
    },
    {
      "neighbors": [
        "      dense",
        "      flat",
        "      round",
        "      icon=\"push_pin\"",
        "      class=\"title-bar-buttons rotate-45\"",
        "      aria-label=\"最前面に固定\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面に固定",
        "      </q-tooltip>"
      ],
      "text": "最前面に固定",
      "translation": ""
    },
    {
      "neighbors": [
        "      class=\"title-bar-buttons rotate-45\"",
        "      aria-label=\"最前面に固定\"",
        "      @click=\"changePinWindow()\"",
        "    >",
        "      <q-tooltip :delay=\"500\" class=\"text-body2\" :offset=\"[11, 11]\">",
        "        最前面に固定",
        "      </q-tooltip>",
        "    </q-btn>",
        "  </q-badge>",
        "  <min-max-close-buttons v-if=\"!$q.platform.is.mac\" />",
        "</template>"
      ],
      "text": "最前面に固定",
      "translation": ""
    }
  ],
  "PresetManageDialog.vue": [
    {
      "neighbors": [
        "    :model-value=\"props.openDialog\"",
        "    @update:model-value=\"updateOpenDialog\"",
        "  >",
        "    <q-card class=\"setting-card q-pa-md dialog-card\">",
        "      <q-card-section>",
        "        <div class=\"text-h5\">プリセット管理</div>",
        "      </q-card-section>",
        "      <q-card-actions class=\"q-px-md q-py-sm\">",
        "        <div class=\"full-width row wrap justify-between\">",
        "          <q-list bordered separator class=\"col-sm-grow\">",
        "            <draggable"
      ],
      "text": "プリセット管理",
      "translation": ""
    },
    {
      "neighbors": [
        "                </q-item>",
        "              </template>",
        "            </draggable>",
        "            <q-item v-if=\"presetList.length === 0\">",
        "              <q-item-section class=\"display\">",
        "                プリセットがありません",
        "              </q-item-section>",
        "            </q-item>",
        "          </q-list>",
        "        </div>",
        "      </q-card-actions>"
      ],
      "text": "プリセットがありません",
      "translation": ""
    },
    {
      "neighbors": [
        "    .finally(() => (isPreview.value = false));",
        "};",
        " ",
        "const deletePreset = async (key: PresetKey) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"プリセット削除の確認\",",
        "    message: `プリセット \"${presetItems.value[key].name}\" を削除してもよろしいですか？`,",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    await store.dispatch(\"DELETE_PRESET\", {"
      ],
      "text": "プリセット削除の確認",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const deletePreset = async (key: PresetKey) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"プリセット削除の確認\",",
        "    message: `プリセット \"${presetItems.value[key].name}\" を削除してもよろしいですか？`,",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    await store.dispatch(\"DELETE_PRESET\", {",
        "      presetKey: key,"
      ],
      "text": "プリセット を削除してもよろしいですか",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const deletePreset = async (key: PresetKey) => {",
        "  const result = await store.dispatch(\"SHOW_CONFIRM_DIALOG\", {",
        "    title: \"プリセット削除の確認\",",
        "    message: `プリセット \"${presetItems.value[key].name}\" を削除してもよろしいですか？`,",
        "    actionName: \"削除\",",
        "  });",
        "  if (result === \"OK\") {",
        "    await store.dispatch(\"DELETE_PRESET\", {",
        "      presetKey: key,",
        "    });"
      ],
      "text": "削除",
      "translation": ""
    }
  ],
  "DefaultStyleSelectDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr lff\" class=\"bg-background\">",
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\"",
        "              >設定 / デフォルトスタイル・試聴 /",
        "              {{ characterInfo.metas.speakerName }}</q-toolbar-title",
        "            >",
        "          </div>",
        " ",
        "          <q-space />"
      ],
      "text": "設定 デフォルトスタイル・試聴",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-space />",
        " ",
        "          <div class=\"row items-center no-wrap\">",
        "            <q-btn",
        "              unelevated",
        "              :label=\"isModified ? '保存' : '戻る'\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap\"",
        "              @click=\"closeDialog\"",
        "            />"
      ],
      "text": "保存 戻る",
      "translation": ""
    }
  ],
  "AcceptRetrieveTelemetryDialog.vue": [
    {
      "neighbors": [
        "    <q-layout container view=\"hHh Lpr lff\" class=\"bg-background\">",
        "      <q-header class=\"q-py-sm\">",
        "        <q-toolbar>",
        "          <div class=\"column\">",
        "            <q-toolbar-title class=\"text-display\"",
        "              >使いやすさ向上のためのお願い</q-toolbar-title",
        "            >",
        "          </div>",
        " ",
        "          <q-space />",
        " "
      ],
      "text": "使いやすさ向上のためのお願い",
      "translation": ""
    },
    {
      "neighbors": [
        "          <q-space />",
        " ",
        "          <div class=\"row items-center no-wrap\">",
        "            <q-btn",
        "              unelevated",
        "              label=\"拒否\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap q-mr-md text-bold\"",
        "              @click=\"handler(false)\"",
        "            />"
      ],
      "text": "拒否",
      "translation": ""
    },
    {
      "neighbors": [
        "              @click=\"handler(false)\"",
        "            />",
        " ",
        "            <q-btn",
        "              unelevated",
        "              label=\"許可\"",
        "              color=\"toolbar-button\"",
        "              text-color=\"toolbar-button-display\"",
        "              class=\"text-no-wrap text-bold\"",
        "              @click=\"handler(true)\"",
        "            />"
      ],
      "text": "許可",
      "translation": ""
    },
    {
      "neighbors": [
        "      </q-header>",
        " ",
        "      <q-page-container>",
        "        <q-page>",
        "          <p class=\"text-body1 q-mb-lg\">",
        "            VOICEVOXはより使いやすいソフトウェアを目指して開発されています。<br /><br />",
        "            ボタンの配置換えなどの方針を決める際は、各UIの利用率などの情報が重要になります。<br />",
        "            もしよろしければ、ソフトウェアの利用状況のデータ収集にご協力お願いします。<br />",
        "            <br />",
        "            （入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください。）",
        "          </p>"
      ],
      "text": "はより使いやすいソフトウェアを目指して開発されています",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      <q-page-container>",
        "        <q-page>",
        "          <p class=\"text-body1 q-mb-lg\">",
        "            VOICEVOXはより使いやすいソフトウェアを目指して開発されています。<br /><br />",
        "            ボタンの配置換えなどの方針を決める際は、各UIの利用率などの情報が重要になります。<br />",
        "            もしよろしければ、ソフトウェアの利用状況のデータ収集にご協力お願いします。<br />",
        "            <br />",
        "            （入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください。）",
        "          </p>",
        "          <q-card flat bordered>"
      ],
      "text": "ボタンの配置換えなどの方針を決める際は 各 の利用率などの情報が重要になります",
      "translation": ""
    },
    {
      "neighbors": [
        "      <q-page-container>",
        "        <q-page>",
        "          <p class=\"text-body1 q-mb-lg\">",
        "            VOICEVOXはより使いやすいソフトウェアを目指して開発されています。<br /><br />",
        "            ボタンの配置換えなどの方針を決める際は、各UIの利用率などの情報が重要になります。<br />",
        "            もしよろしければ、ソフトウェアの利用状況のデータ収集にご協力お願いします。<br />",
        "            <br />",
        "            （入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください。）",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>"
      ],
      "text": "もしよろしければ ソフトウェアの利用状況のデータ収集にご協力お願いします",
      "translation": ""
    },
    {
      "neighbors": [
        "          <p class=\"text-body1 q-mb-lg\">",
        "            VOICEVOXはより使いやすいソフトウェアを目指して開発されています。<br /><br />",
        "            ボタンの配置換えなどの方針を決める際は、各UIの利用率などの情報が重要になります。<br />",
        "            もしよろしければ、ソフトウェアの利用状況のデータ収集にご協力お願いします。<br />",
        "            <br />",
        "            （入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください。）",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>",
        "              <div class=\"text-h5\">プライバシーポリシー</div>",
        "            </q-card-section>"
      ],
      "text": "入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください",
      "translation": ""
    },
    {
      "neighbors": [
        "            <br />",
        "            （入力されたテキストデータや音声データの情報は収集しておりませんのでご安心ください。）",
        "          </p>",
        "          <q-card flat bordered>",
        "            <q-card-section>",
        "              <div class=\"text-h5\">プライバシーポリシー</div>",
        "            </q-card-section>",
        " ",
        "            <q-card-section class=\"text-body1\">",
        "              <!-- eslint-disable-next-line vue/no-v-html -->",
        "              <div v-html=\"privacyPolicy\"></div>"
      ],
      "text": "プライバシーポリシー",
      "translation": ""
    }
  ],
  "ProgressDialog.vue": [
    {
      "neighbors": [
        "        color=\"primary\"",
        "        rounded",
        "        :thickness=\"0.3\"",
        "        size=\"xl\"",
        "      />",
        "      <div class=\"q-mt-md\">生成中です...</div>",
        "    </div>",
        "  </div>",
        "</template>",
        " ",
        "<script setup lang=\"ts\">"
      ],
      "text": "生成中です",
      "translation": ""
    }
  ],
  "AudioInfo.vue": [
    {
      "neighbors": [
        "<template>",
        "  <div v-if=\"query\" class=\"root full-height q-py-md\" data-testid=\"AudioInfo\">",
        "    <div v-if=\"enablePreset\" class=\"q-px-md\">",
        "      <div class=\"row items-center no-wrap q-mb-xs\">",
        "        <div class=\"text-body1\">プリセット</div>",
        "        <q-btn dense flat icon=\"more_vert\" :disable=\"uiLocked\">",
        "          <q-menu transition-duration=\"100\">",
        "            <q-list>",
        "              <q-item",
        "                v-close-popup"
      ],
      "text": "プリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "                    color=\"primary\"",
        "                    text-color=\"display-on-primary\"",
        "                  ></q-avatar>",
        "                </q-item-section>",
        "                <q-item-section>",
        "                  <q-item-label>プリセット新規登録</q-item-label>",
        "                </q-item-section>",
        "              </q-item>",
        "              <q-item",
        "                v-close-popup",
        "                clickable"
      ],
      "text": "プリセット新規登録",
      "translation": ""
    },
    {
      "neighbors": [
        "                    color=\"primary\"",
        "                    text-color=\"display-on-primary\"",
        "                  ></q-avatar>",
        "                </q-item-section>",
        "                <q-item-section>",
        "                  <q-item-label>プリセット管理</q-item-label>",
        "                </q-item-section>",
        "              </q-item>",
        "            </q-list>",
        "          </q-menu>",
        "        </q-btn>"
      ],
      "text": "プリセット管理",
      "translation": ""
    },
    {
      "neighbors": [
        "            </div>",
        "          </template>",
        "          <template #no-option>",
        "            <q-item>",
        "              <q-item-section class=\"text-grey\">",
        "                プリセットはありません",
        "              </q-item-section>",
        "            </q-item>",
        "          </template>",
        "        </q-select>",
        " "
      ],
      "text": "プリセットはありません",
      "translation": ""
    },
    {
      "neighbors": [
        "          dense",
        "          outline",
        "          class=\"col-auto q-ml-xs\"",
        "          size=\"sm\"",
        "          text-color=\"display\"",
        "          :label=\"isRegisteredPreset ? '再登録' : '登録'\"",
        "          @click=\"registerPreset({ overwrite: isRegisteredPreset })\"",
        "        />",
        "      </div>",
        "      <!-- プリセット管理ダイアログ -->",
        "      <preset-manage-dialog v-model:open-dialog=\"showsPresetEditDialog\" />"
      ],
      "text": "再登録 登録",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      <!-- プリセット登録ダイアログ -->",
        "      <q-dialog v-model=\"showsPresetNameDialog\" @before-hide=\"closeAllDialog\">",
        "        <q-card style=\"min-width: 350px\">",
        "          <q-card-section>",
        "            <div class=\"text-h6\">プリセット登録</div>",
        "          </q-card-section>",
        " ",
        "          <q-form @submit.prevent=\"checkRewritePreset\">",
        "            <q-card-section class=\"q-pt-none\">",
        "              <q-select"
      ],
      "text": "プリセット登録",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-card-section class=\"q-pt-none\">",
        "              <q-select",
        "                fill-input",
        "                autofocus",
        "                hide-selected",
        "                label=\"タイトル\"",
        "                color=\"primary\"",
        "                use-input",
        "                input-debounce=\"0\"",
        "                :model-value=\"presetName\"",
        "                :options=\"presetOptionsList\""
      ],
      "text": "タイトル",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "            <q-card-actions align=\"right\">",
        "              <q-btn",
        "                v-close-popup",
        "                flat",
        "                label=\"キャンセル\"",
        "                @click=\"closeAllDialog\"",
        "              />",
        "              <q-btn flat type=\"submit\" label=\"確定\" />",
        "            </q-card-actions>",
        "          </q-form>"
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "                v-close-popup",
        "                flat",
        "                label=\"キャンセル\"",
        "                @click=\"closeAllDialog\"",
        "              />",
        "              <q-btn flat type=\"submit\" label=\"確定\" />",
        "            </q-card-actions>",
        "          </q-form>",
        "        </q-card>",
        "      </q-dialog>",
        " "
      ],
      "text": "確定",
      "translation": ""
    },
    {
      "neighbors": [
        "        v-model=\"showsPresetRewriteDialog\"",
        "        @before-hide=\"closeAllDialog\"",
        "      >",
        "        <q-card>",
        "          <q-card-section>",
        "            <div class=\"text-h6\">プリセットの再登録</div>",
        "          </q-card-section>",
        "          <q-card-section>",
        "            <q-list>",
        "              <q-item clickable class=\"no-margin\" @click=\"updatePreset(true)\">",
        "                <q-item-section avatar>"
      ],
      "text": "プリセットの再登録",
      "translation": ""
    },
    {
      "neighbors": [
        "              <q-item clickable class=\"no-margin\" @click=\"updatePreset(true)\">",
        "                <q-item-section avatar>",
        "                  <q-avatar icon=\"arrow_forward\" text-color=\"blue\" />",
        "                </q-item-section>",
        "                <q-item-section>",
        "                  プリセットを再登録し、このプリセットが設定されたテキスト欄全てに再適用する",
        "                </q-item-section>",
        "              </q-item>",
        "              <q-item clickable class=\"no-margin\" @click=\"updatePreset(false)\">",
        "                <q-item-section avatar>",
        "                  <q-avatar icon=\"arrow_forward\" text-color=\"blue\" />"
      ],
      "text": "プリセットを再登録し このプリセットが設定されたテキスト欄全てに再適用する",
      "translation": ""
    },
    {
      "neighbors": [
        "              </q-item>",
        "              <q-item clickable class=\"no-margin\" @click=\"updatePreset(false)\">",
        "                <q-item-section avatar>",
        "                  <q-avatar icon=\"arrow_forward\" text-color=\"blue\" />",
        "                </q-item-section>",
        "                <q-item-section> プリセットの再登録のみ行う </q-item-section>",
        "              </q-item>",
        "              <q-item",
        "                v-close-popup",
        "                clickable",
        "                class=\"no-margin\""
      ],
      "text": "プリセットの再登録のみ行う",
      "translation": ""
    },
    {
      "neighbors": [
        "                @click=\"closeAllDialog\"",
        "              >",
        "                <q-item-section avatar>",
        "                  <q-avatar icon=\"arrow_forward\" text-color=\"blue\" />",
        "                </q-item-section>",
        "                <q-item-section>キャンセル</q-item-section>",
        "              </q-item>",
        "            </q-list>",
        "          </q-card-section>",
        "        </q-card>",
        "      </q-dialog>"
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "      :class=\"{",
        "        disabled: uiLocked,",
        "      }\"",
        "    >",
        "      <q-separator class=\"q-my-md\" />",
        "      <span class=\"text-body1 q-mb-xs\">モーフィング</span>",
        "      <div class=\"row no-wrap items-center\">",
        "        <character-button",
        "          v-model:selected-voice=\"morphingTargetVoice\"",
        "          class=\"q-my-xs\"",
        "          :character-infos=\"morphingTargetCharacters\""
      ],
      "text": "モーフィング",
      "translation": ""
    },
    {
      "neighbors": [
        "        <div class=\"q-pl-xs row overflow-hidden\">",
        "          <div class=\"text-body2 ellipsis overflow-hidden\">",
        "            {{",
        "              morphingTargetCharacterInfo",
        "                ? morphingTargetCharacterInfo.metas.speakerName",
        "                : \"未設定\"",
        "            }}",
        "          </div>",
        "          <!-- 横幅が狭い場合に改行させるため分割 -->",
        "          <div",
        "            v-if=\""
      ],
      "text": "未設定",
      "translation": ""
    },
    {
      "neighbors": [
        "      <div",
        "        v-if=\"!isSupportedMorphing\"",
        "        class=\"text-warning\"",
        "        style=\"font-size: 0.7rem\"",
        "      >",
        "        非対応エンジンです",
        "      </div>",
        "      <div",
        "        v-else-if=\"morphingTargetVoice && !isValidMorphingInfo\"",
        "        class=\"text-warning\"",
        "        style=\"font-size: 0.7rem\""
      ],
      "text": "非対応エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "      <div",
        "        v-else-if=\"morphingTargetVoice && !isValidMorphingInfo\"",
        "        class=\"text-warning\"",
        "        style=\"font-size: 0.7rem\"",
        "      >",
        "        無効な設定です",
        "      </div>",
        "      <div :class=\"{ disabled: morphingTargetStyleInfo == undefined }\">",
        "        <span class=\"text-body1 q-mb-xs\"",
        "          >割合",
        "          {{"
      ],
      "text": "無効な設定です",
      "translation": ""
    },
    {
      "neighbors": [
        "      >",
        "        無効な設定です",
        "      </div>",
        "      <div :class=\"{ disabled: morphingTargetStyleInfo == undefined }\">",
        "        <span class=\"text-body1 q-mb-xs\"",
        "          >割合",
        "          {{",
        "            morphingRateSlider.state.currentValue.value != undefined",
        "              ? morphingRateSlider.state.currentValue.value.toFixed(2)",
        "              : undefined",
        "          }}</span"
      ],
      "text": "割合",
      "translation": ""
    },
    {
      "neighbors": [
        "    ? store.getters.SELECTED_AUDIO_KEYS",
        "    : [props.activeAudioKey]",
        ");",
        "const parameters = computed<Parameter[]>(() => [",
        "  {",
        "    label: \"話速\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.speedScale ?? null,",
        "      disable: () =>",
        "        uiLocked.value || supportedFeatures.value?.adjustSpeedScale === false,",
        "      max: SLIDER_PARAMETERS.SPEED.max,"
      ],
      "text": "話速",
      "translation": ""
    },
    {
      "neighbors": [
        "    }),",
        "    action: \"COMMAND_MULTI_SET_AUDIO_SPEED_SCALE\",",
        "    key: \"speedScale\",",
        "  },",
        "  {",
        "    label: \"音高\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.pitchScale ?? null,",
        "      disable: () =>",
        "        uiLocked.value || supportedFeatures.value?.adjustPitchScale === false,",
        "      max: SLIDER_PARAMETERS.PITCH.max,"
      ],
      "text": "音高",
      "translation": ""
    },
    {
      "neighbors": [
        "    }),",
        "    action: \"COMMAND_MULTI_SET_AUDIO_PITCH_SCALE\",",
        "    key: \"pitchScale\",",
        "  },",
        "  {",
        "    label: \"抑揚\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.intonationScale ?? null,",
        "      disable: () =>",
        "        uiLocked.value ||",
        "        supportedFeatures.value?.adjustIntonationScale === false,"
      ],
      "text": "抑揚",
      "translation": ""
    },
    {
      "neighbors": [
        "    }),",
        "    action: \"COMMAND_MULTI_SET_AUDIO_INTONATION_SCALE\",",
        "    key: \"intonationScale\",",
        "  },",
        "  {",
        "    label: \"音量\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.volumeScale ?? null,",
        "      disable: () =>",
        "        uiLocked.value || supportedFeatures.value?.adjustVolumeScale === false,",
        "      max: SLIDER_PARAMETERS.VOLUME.max,"
      ],
      "text": "音量",
      "translation": ""
    },
    {
      "neighbors": [
        "    }),",
        "    action: \"COMMAND_MULTI_SET_AUDIO_VOLUME_SCALE\",",
        "    key: \"volumeScale\",",
        "  },",
        "  {",
        "    label: \"開始無音\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.prePhonemeLength ?? null,",
        "      disable: () => uiLocked.value,",
        "      max: SLIDER_PARAMETERS.PRE_PHONEME_LENGTH.max,",
        "      min: SLIDER_PARAMETERS.PRE_PHONEME_LENGTH.min,"
      ],
      "text": "開始無音",
      "translation": ""
    },
    {
      "neighbors": [
        "    }),",
        "    action: \"COMMAND_MULTI_SET_AUDIO_PRE_PHONEME_LENGTH\",",
        "    key: \"prePhonemeLength\",",
        "  },",
        "  {",
        "    label: \"終了無音\",",
        "    slider: previewSliderHelper({",
        "      modelValue: () => query.value?.postPhonemeLength ?? null,",
        "      disable: () => uiLocked.value,",
        "      max: SLIDER_PARAMETERS.POST_PHONEME_LENGTH.max,",
        "      min: SLIDER_PARAMETERS.POST_PHONEME_LENGTH.min,"
      ],
      "text": "終了無音",
      "translation": ""
    },
    {
      "neighbors": [
        "  parameter: Parameter,",
        "  inputValue: string | number | null",
        ") => {",
        "  if (inputValue === null) throw new Error(\"inputValue is null\");",
        "  const value = adjustSliderValue(",
        "    parameter.label + \"入力\",",
        "    inputValue.toString(),",
        "    parameter.slider.qSliderProps.min.value,",
        "    parameter.slider.qSliderProps.max.value",
        "  );",
        "  store.dispatch(parameter.action, {"
      ],
      "text": "入力",
      "translation": ""
    },
    {
      "neighbors": [
        "  const topPresetList: { key: PresetKey | undefined; label: string }[] = [];",
        " ",
        "  if (isRegisteredPreset.value) {",
        "    topPresetList.push({",
        "      key: undefined,",
        "      label: \"プリセット解除\",",
        "    });",
        "  }",
        " ",
        "  // 選択中のstyleのデフォルトプリセットは常に一番上",
        "  topPresetList.push("
      ],
      "text": "プリセット解除",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const presetSelectModel = computed<PresetSelectModelType>({",
        "  get: () => {",
        "    if (!isRegisteredPreset.value)",
        "      return {",
        "        label: \"プリセット選択\",",
        "        key: undefined,",
        "      };",
        "    if (audioPresetKey.value == undefined)",
        "      throw new Error(\"audioPresetKey is undefined\"); // 次のコードが何故かコンパイルエラーになるチェック",
        " "
      ],
      "text": "プリセット選択",
      "translation": ""
    }
  ],
  "AccentPhrase.vue": [
    {
      "neighbors": [
        "            selectedDetail === 'pitch' && !unvoicableVowels.includes(mora.vowel)",
        "          \"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\"",
        "          transition-hide=\"jump-down\"",
        "          >イ段とウ段以外の音は無声化できません</q-tooltip",
        "        >",
        "        <q-tooltip",
        "          v-if=\"selectedDetail === 'length'\"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\""
      ],
      "text": "イ段とウ段以外の音は無声化できません",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-tooltip",
        "          v-if=\"selectedDetail === 'length'\"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\"",
        "          transition-hide=\"jump-down\"",
        "          >読みの変更はアクセント項目でのみ、<br />無声化はイントネーション項目でのみ操作できます</q-tooltip",
        "        >",
        "        <span class=\"text-cell-inner\">",
        "          {{ getHoveredText(mora, moraIndex) }}",
        "        </span>",
        "        <q-popup-edit"
      ],
      "text": "読みの変更はアクセント項目でのみ 無声化はイントネーション項目でのみ操作できます",
      "translation": ""
    },
    {
      "neighbors": [
        "            dense",
        "            :input-style=\"{",
        "              width: `${scope.value.length + 1}em`,",
        "              minWidth: '50px',",
        "            }\"",
        "            :aria-label=\"`${index + 1}番目のアクセント区間の読み`\"",
        "            autofocus",
        "            outlined",
        "            @keyup.enter=\"scope.set\"",
        "          />",
        "        </q-popup-edit>"
      ],
      "text": "番目のアクセント区間の読み",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-tooltip",
        "          v-if=\"selectedDetail === 'pitch'\"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\"",
        "          transition-hide=\"jump-down\"",
        "          >イ段とウ段以外の音は無声化できません</q-tooltip",
        "        >",
        "        <q-tooltip",
        "          v-if=\"selectedDetail === 'length'\"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\""
      ],
      "text": "イ段とウ段以外の音は無声化できません",
      "translation": ""
    },
    {
      "neighbors": [
        "        <q-tooltip",
        "          v-if=\"selectedDetail === 'length'\"",
        "          :delay=\"500\"",
        "          transition-show=\"jump-up\"",
        "          transition-hide=\"jump-down\"",
        "          >読みの変更はアクセント項目でのみ、<br />無声化はイントネーション項目でのみ操作できます</q-tooltip",
        "        >",
        "        <span class=\"text-cell-inner\">",
        "          {{ accentPhrase.pauseMora.text }}",
        "        </span>",
        "      </div>"
      ],
      "text": "読みの変更はアクセント項目でのみ 無声化はイントネーション項目でのみ操作できます",
      "translation": ""
    },
    {
      "neighbors": [
        "const uiLocked = computed(() => store.getters.UI_LOCKED);",
        " ",
        "const contextMenudata = ref<[MenuItemButton]>([",
        "  {",
        "    type: \"button\",",
        "    label: \"削除\",",
        "    onClick: () => {",
        "      store.dispatch(\"COMMAND_DELETE_ACCENT_PHRASE\", {",
        "        audioKey: props.audioKey,",
        "        accentPhraseIndex: props.index,",
        "      });"
      ],
      "text": "削除",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (props.isLast) {",
        "      // 末尾の読点を削除",
        "      newPronunciation = newPronunciation.slice(0, -1);",
        "    } else {",
        "      // 生成エラー回避",
        "      newPronunciation += \"ア\";",
        "      popUntilPause = true;",
        "    }",
        "  }",
        "  store.dispatch(\"COMMAND_CHANGE_SINGLE_ACCENT_PHRASE\", {",
        "    audioKey: props.audioKey,"
      ],
      "text": "ア",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "const unvoicableVowels = [\"U\", \"I\", \"i\", \"u\"];",
        " ",
        "/**",
        " * 各モーラが、hover中のモーラをそのままクリックした場合に編集範囲に含まれるかどうか。",
        " * 強調表示するかの判定に使われる。",
        " */",
        "const isEditableMora = (vowel: string, moraIndex: number) => {",
        "  if (uiLocked.value) {",
        "    return false;"
      ],
      "text": "各モーラが 中のモーラをそのままクリックした場合に編集範囲に含まれるかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const unvoicableVowels = [\"U\", \"I\", \"i\", \"u\"];",
        " ",
        "/**",
        " * 各モーラが、hover中のモーラをそのままクリックした場合に編集範囲に含まれるかどうか。",
        " * 強調表示するかの判定に使われる。",
        " */",
        "const isEditableMora = (vowel: string, moraIndex: number) => {",
        "  if (uiLocked.value) {",
        "    return false;",
        "  }"
      ],
      "text": "強調表示するかの判定に使われる",
      "translation": ""
    }
  ],
  "FileNamePatternDialog.vue": [
    {
      "neighbors": [
        "    @update:model-value=\"updateOpenDialog\"",
        "    @before-show=\"initializeInput\"",
        "  >",
        "    <q-card class=\"q-pa-md dialog-card\">",
        "      <q-card-section>",
        "        <div class=\"text-h5\">書き出しファイル名パターン</div>",
        "        <div class=\"text-body2 text-grey-8\">",
        "          「$キャラ$」のようなタグを使って書き出すファイル名をカスタマイズできます",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-actions class=\"setting-card q-px-md q-py-sm\">"
      ],
      "text": "書き出しファイル名パターン",
      "translation": ""
    },
    {
      "neighbors": [
        "  >",
        "    <q-card class=\"q-pa-md dialog-card\">",
        "      <q-card-section>",
        "        <div class=\"text-h5\">書き出しファイル名パターン</div>",
        "        <div class=\"text-body2 text-grey-8\">",
        "          「$キャラ$」のようなタグを使って書き出すファイル名をカスタマイズできます",
        "        </div>",
        "      </q-card-section>",
        "      <q-card-actions class=\"setting-card q-px-md q-py-sm\">",
        "        <div class=\"row full-width justify-between\">",
        "          <div class=\"col\">"
      ],
      "text": "キャラ のようなタグを使って書き出すファイル名をカスタマイズできます",
      "translation": ""
    },
    {
      "neighbors": [
        "              ref=\"patternInput\"",
        "              v-model=\"currentBaseNamePattern\"",
        "              dense",
        "              outlined",
        "              bg-color=\"background\"",
        "              label=\"ファイル名パターン\"",
        "              suffix=\".wav\"",
        "              :maxlength=\"maxLength\"",
        "              :error=\"hasError\"",
        "              :error-message=\"errorMessage\"",
        "            >"
      ],
      "text": "ファイル名パターン",
      "translation": ""
    },
    {
      "neighbors": [
        "              :error=\"hasError\"",
        "              :error-message=\"errorMessage\"",
        "            >",
        "              <template #after>",
        "                <q-btn",
        "                  label=\"デフォルトにリセット\"",
        "                  outline",
        "                  text-color=\"display\"",
        "                  class=\"text-no-wrap q-mr-sm\"",
        "                  @click=\"resetToDefault\"",
        "                />"
      ],
      "text": "デフォルトにリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "              </template>",
        "            </q-input>",
        "          </div>",
        "        </div>",
        "        <div class=\"text-body2 text-ellipsis\">",
        "          出力例）{{ previewFileName }}",
        "        </div>",
        "        <div class=\"row full-width q-my-md\">",
        "          <q-btn",
        "            v-for=\"tagString in tagStrings\"",
        "            :key=\"tagString\""
      ],
      "text": "出力例",
      "translation": ""
    },
    {
      "neighbors": [
        "            @click=\"insertTagToCurrentPosition(`$${tagString}$`)\"",
        "          />",
        "        </div>",
        "        <div class=\"row full-width justify-end\">",
        "          <q-btn",
        "            label=\"キャンセル\"",
        "            outline",
        "            text-color=\"display\"",
        "            class=\"text-no-wrap text-bold q-mr-sm col-2\"",
        "            @click=\"updateOpenDialog(false)\"",
        "          />"
      ],
      "text": "キャンセル",
      "translation": ""
    },
    {
      "neighbors": [
        "            text-color=\"display\"",
        "            class=\"text-no-wrap text-bold q-mr-sm col-2\"",
        "            @click=\"updateOpenDialog(false)\"",
        "          />",
        "          <q-btn",
        "            label=\"確定\"",
        "            unelevated",
        "            color=\"primary\"",
        "            text-color=\"display-on-primary\"",
        "            class=\"text-no-wrap text-bold q-mr-sm col-2\"",
        "            :disable=\"hasError\""
      ],
      "text": "確定",
      "translation": ""
    },
    {
      "neighbors": [
        "  const sanitized = sanitizeFileName(current);",
        "  return Array.from(current).find((char, i) => char !== sanitized[i]);",
        "});",
        "const errorMessage = computed(() => {",
        "  if (currentBaseNamePattern.value === \"\") {",
        "    return \"何か入力してください\";",
        "  }",
        " ",
        "  const result: string[] = [];",
        "  if (invalidChar.value !== undefined) {",
        "    result.push(`使用できない文字が含まれています：「${invalidChar.value}」`);"
      ],
      "text": "何か入力してください",
      "translation": ""
    },
    {
      "neighbors": [
        "    return \"何か入力してください\";",
        "  }",
        " ",
        "  const result: string[] = [];",
        "  if (invalidChar.value !== undefined) {",
        "    result.push(`使用できない文字が含まれています：「${invalidChar.value}」`);",
        "  }",
        "  if (previewFileName.value.includes(\"$\")) {",
        "    result.push(`不正なタグが存在するか、$が単体で含まれています`);",
        "  }",
        "  if (hasNotIndexTagString.value) {"
      ],
      "text": "使用できない文字が含まれています",
      "translation": ""
    },
    {
      "neighbors": [
        "  const result: string[] = [];",
        "  if (invalidChar.value !== undefined) {",
        "    result.push(`使用できない文字が含まれています：「${invalidChar.value}」`);",
        "  }",
        "  if (previewFileName.value.includes(\"$\")) {",
        "    result.push(`不正なタグが存在するか、$が単体で含まれています`);",
        "  }",
        "  if (hasNotIndexTagString.value) {",
        "    result.push(`$${replaceTagIdToTagString[\"index\"]}$は必須です`);",
        "  }",
        "  return result.join(\", \");"
      ],
      "text": "不正なタグが存在するか が単体で含まれています",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        "  if (previewFileName.value.includes(\"$\")) {",
        "    result.push(`不正なタグが存在するか、$が単体で含まれています`);",
        "  }",
        "  if (hasNotIndexTagString.value) {",
        "    result.push(`$${replaceTagIdToTagString[\"index\"]}$は必須です`);",
        "  }",
        "  return result.join(\", \");",
        "});",
        "const hasError = computed(() => errorMessage.value !== \"\");",
        " "
      ],
      "text": "は必須です",
      "translation": ""
    }
  ],
  "OssLicense.vue": [
    {
      "neighbors": [
        "        <div class=\"q-mb-md\">",
        "          <q-btn",
        "            outline",
        "            color=\"primary\"",
        "            icon=\"keyboard_arrow_left\"",
        "            label=\"戻る\"",
        "            @click=\"selectLicenseIndex(undefined)\"",
        "          />",
        "        </div>",
        "        <div class=\"text-subtitle\">{{ licenses[detailIndex].name }}</div>",
        "        <pre>{{ licenses[detailIndex].text }}</pre>"
      ],
      "text": "戻る",
      "translation": ""
    }
  ],
  "LibraryPolicy.vue": [
    {
      "neighbors": [
        "        <div class=\"q-mb-md\">",
        "          <q-btn",
        "            outline",
        "            color=\"primary\"",
        "            icon=\"keyboard_arrow_left\"",
        "            label=\"戻る\"",
        "            @click=\"selectCharacterInfo(undefined)\"",
        "          />",
        "        </div>",
        "        <div class=\"text-subtitle\">",
        "          {{"
      ],
      "text": "戻る",
      "translation": ""
    }
  ],
  "UpdateInfo.vue": [
    {
      "neighbors": [
        "    ref=\"scroller\"",
        "    class=\"relative-absolute-wrapper scroller markdown-body\"",
        "  >",
        "    <div class=\"q-pa-md\">",
        "      <template v-if=\"props.isUpdateAvailable\">",
        "        <h3>最新バージョン {{ props.latestVersion }} が見つかりました</h3>",
        "        <a :href=\"props.downloadLink\" target=\"_blank\">ダウンロードページ</a>",
        "        <hr />",
        "      </template>",
        "      <h3>アップデート履歴</h3>",
        "      <template v-for=\"(info, infoIndex) of props.updateInfos\" :key=\"infoIndex\">"
      ],
      "text": "最新バージョン が見つかりました",
      "translation": ""
    },
    {
      "neighbors": [
        "    class=\"relative-absolute-wrapper scroller markdown-body\"",
        "  >",
        "    <div class=\"q-pa-md\">",
        "      <template v-if=\"props.isUpdateAvailable\">",
        "        <h3>最新バージョン {{ props.latestVersion }} が見つかりました</h3>",
        "        <a :href=\"props.downloadLink\" target=\"_blank\">ダウンロードページ</a>",
        "        <hr />",
        "      </template>",
        "      <h3>アップデート履歴</h3>",
        "      <template v-for=\"(info, infoIndex) of props.updateInfos\" :key=\"infoIndex\">",
        "        <h3>バージョン {{ info.version }}</h3>"
      ],
      "text": "ダウンロードページ",
      "translation": ""
    },
    {
      "neighbors": [
        "      <template v-if=\"props.isUpdateAvailable\">",
        "        <h3>最新バージョン {{ props.latestVersion }} が見つかりました</h3>",
        "        <a :href=\"props.downloadLink\" target=\"_blank\">ダウンロードページ</a>",
        "        <hr />",
        "      </template>",
        "      <h3>アップデート履歴</h3>",
        "      <template v-for=\"(info, infoIndex) of props.updateInfos\" :key=\"infoIndex\">",
        "        <h3>バージョン {{ info.version }}</h3>",
        "        <ul>",
        "          <template",
        "            v-for=\"(item, descriptionIndex) of info.descriptions\""
      ],
      "text": "アップデート履歴",
      "translation": ""
    },
    {
      "neighbors": [
        "        <a :href=\"props.downloadLink\" target=\"_blank\">ダウンロードページ</a>",
        "        <hr />",
        "      </template>",
        "      <h3>アップデート履歴</h3>",
        "      <template v-for=\"(info, infoIndex) of props.updateInfos\" :key=\"infoIndex\">",
        "        <h3>バージョン {{ info.version }}</h3>",
        "        <ul>",
        "          <template",
        "            v-for=\"(item, descriptionIndex) of info.descriptions\"",
        "            :key=\"descriptionIndex\"",
        "          >"
      ],
      "text": "バージョン",
      "translation": ""
    },
    {
      "neighbors": [
        "            :key=\"descriptionIndex\"",
        "          >",
        "            <li>{{ item }}</li>",
        "          </template>",
        "        </ul>",
        "        <h4>貢献者リスト</h4>",
        "        <p>",
        "          <template",
        "            v-for=\"(item, contributorIndex) of info.contributors\"",
        "            :key=\"contributorIndex\"",
        "          >"
      ],
      "text": "貢献者リスト",
      "translation": ""
    }
  ],
  "HelpDialog.vue": [
    {
      "neighbors": [
        "            >",
        "              <div v-if=\"page.type === 'item'\" class=\"root\">",
        "                <q-header class=\"q-pa-sm\">",
        "                  <q-toolbar>",
        "                    <q-toolbar-title class=\"text-display\">",
        "                      ヘルプ / {{ page.parent ? page.parent + \" / \" : \"\"",
        "                      }}{{ page.name }}",
        "                    </q-toolbar-title>",
        "                    <q-btn",
        "                      v-if=\"page.component === ContactInfo\"",
        "                      unelevated"
      ],
      "text": "ヘルプ",
      "translation": ""
    },
    {
      "neighbors": [
        "                      color=\"toolbar-button\"",
        "                      text-color=\"toolbar-button-display\"",
        "                      class=\"text-no-wrap text-bold q-mr-sm\"",
        "                      @click=\"openLogDirectory\"",
        "                    >",
        "                      ログフォルダを開く",
        "                    </q-btn>",
        "                    <!-- close button -->",
        "                    <q-btn",
        "                      round",
        "                      flat"
      ],
      "text": "ログフォルダを開く",
      "translation": ""
    },
    {
      "neighbors": [
        "                    <q-btn",
        "                      round",
        "                      flat",
        "                      icon=\"close\"",
        "                      color=\"display\"",
        "                      aria-label=\"ヘルプを閉じる\"",
        "                      @click=\"modelValueComputed = false\"",
        "                    />",
        "                  </q-toolbar>",
        "                </q-header>",
        "                <component :is=\"page.component\" v-bind=\"page.props\" />"
      ],
      "text": "ヘルプを閉じる",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "const pagedata = computed(() => {",
        "  const data: PageData[] = [",
        "    {",
        "      type: \"item\",",
        "      name: \"ソフトウェアの利用規約\",",
        "      component: HelpPolicy,",
        "      props: {",
        "        policy: policy.value,",
        "      },",
        "    },"
      ],
      "text": "ソフトウェアの利用規約",
      "translation": ""
    },
    {
      "neighbors": [
        "        policy: policy.value,",
        "      },",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"音声ライブラリの利用規約\",",
        "      component: LibraryPolicy,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"使い方\","
      ],
      "text": "音声ライブラリの利用規約",
      "translation": ""
    },
    {
      "neighbors": [
        "      name: \"音声ライブラリの利用規約\",",
        "      component: LibraryPolicy,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"使い方\",",
        "      component: HowToUse,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"開発コミュニティ\","
      ],
      "text": "使い方",
      "translation": ""
    },
    {
      "neighbors": [
        "      name: \"使い方\",",
        "      component: HowToUse,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"開発コミュニティ\",",
        "      component: OssCommunityInfo,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"ライセンス情報\","
      ],
      "text": "開発コミュニティ",
      "translation": ""
    },
    {
      "neighbors": [
        "      name: \"開発コミュニティ\",",
        "      component: OssCommunityInfo,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"ライセンス情報\",",
        "      component: OssLicense,",
        "      props: {",
        "        licenses: licenses.value,",
        "      },",
        "    },"
      ],
      "text": "ライセンス情報",
      "translation": ""
    },
    {
      "neighbors": [
        "        licenses: licenses.value,",
        "      },",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"アップデート情報\",",
        "      component: UpdateInfo,",
        "      props: {",
        "        downloadLink: import.meta.env.VITE_OFFICIAL_WEBSITE_URL,",
        "        updateInfos: updateInfos.value,",
        "        isUpdateAvailable: isUpdateAvailable.value,"
      ],
      "text": "アップデート情報",
      "translation": ""
    },
    {
      "neighbors": [
        "        latestVersion: latestVersion.value,",
        "      },",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"よくあるご質問\",",
        "      component: QAndA,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"お問い合わせ\","
      ],
      "text": "よくあるご質問",
      "translation": ""
    },
    {
      "neighbors": [
        "      name: \"よくあるご質問\",",
        "      component: QAndA,",
        "    },",
        "    {",
        "      type: \"item\",",
        "      name: \"お問い合わせ\",",
        "      component: ContactInfo,",
        "    },",
        "  ];",
        "  // エンジンが一つだけの場合は従来の表示のみ",
        "  if (store.state.engineIds.length > 1) {"
      ],
      "text": "お問い合わせ",
      "translation": ""
    },
    {
      "neighbors": [
        "          type: \"separator\",",
        "          name: manifest.name,",
        "        },",
        "        {",
        "          type: \"item\",",
        "          name: \"利用規約\",",
        "          parent: manifest.name,",
        "          component: HelpPolicy,",
        "          props: {",
        "            policy: manifest.termsOfService,",
        "          },"
      ],
      "text": "利用規約",
      "translation": ""
    },
    {
      "neighbors": [
        "            policy: manifest.termsOfService,",
        "          },",
        "        },",
        "        {",
        "          type: \"item\",",
        "          name: \"ライセンス情報\",",
        "          parent: manifest.name,",
        "          component: OssLicense,",
        "          props: {",
        "            licenses: manifest.dependencyLicenses,",
        "          },"
      ],
      "text": "ライセンス情報",
      "translation": ""
    },
    {
      "neighbors": [
        "            licenses: manifest.dependencyLicenses,",
        "          },",
        "        },",
        "        {",
        "          type: \"item\",",
        "          name: \"アップデート情報\",",
        "          parent: manifest.name,",
        "          component: UpdateInfo,",
        "          props: {",
        "            updateInfos: manifest.updateInfos,",
        "            // TODO: エンジン側で最新バージョンチェックAPIが出来たら実装する。"
      ],
      "text": "アップデート情報",
      "translation": ""
    }
  ],
  "setting.ts": [
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  CHANGE_USE_GPU: {",
        "    /**",
        "     * CPU/GPUモードを切り替えようとする。",
        "     * GPUモードでエンジン起動に失敗した場合はCPUモードに戻す。",
        "     */",
        "    action: createUILockAction(",
        "      async ({ state, dispatch }, { useGpu, engineId }) => {",
        "        const isAvailableGPUMode = await window.electron.isAvailableGPUMode();"
      ],
      "text": "モードを切り替えようとする",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  CHANGE_USE_GPU: {",
        "    /**",
        "     * CPU/GPUモードを切り替えようとする。",
        "     * GPUモードでエンジン起動に失敗した場合はCPUモードに戻す。",
        "     */",
        "    action: createUILockAction(",
        "      async ({ state, dispatch }, { useGpu, engineId }) => {",
        "        const isAvailableGPUMode = await window.electron.isAvailableGPUMode();",
        " "
      ],
      "text": "モードでエンジン起動に失敗した場合は モードに戻す",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        // 対応するGPUがない場合に変更を続行するか問う",
        "        if (useGpu && !isAvailableGPUMode) {",
        "          const result = await window.electron.showQuestionDialog({",
        "            type: \"warning\",",
        "            title: \"対応するGPUデバイスが見つかりません\",",
        "            message:",
        "              \"GPUモードの利用には対応するGPUデバイスが必要です。\\n\" +",
        "              \"このままGPUモードに変更するとエンジンエラーが発生する可能性があります。本当に変更しますか？\",",
        "            buttons: [\"変更する\", \"変更しない\"],",
        "            cancelId: 1,"
      ],
      "text": "対応する デバイスが見つかりません",
      "translation": ""
    },
    {
      "neighbors": [
        "        if (useGpu && !isAvailableGPUMode) {",
        "          const result = await window.electron.showQuestionDialog({",
        "            type: \"warning\",",
        "            title: \"対応するGPUデバイスが見つかりません\",",
        "            message:",
        "              \"GPUモードの利用には対応するGPUデバイスが必要です。\\n\" +",
        "              \"このままGPUモードに変更するとエンジンエラーが発生する可能性があります。本当に変更しますか？\",",
        "            buttons: [\"変更する\", \"変更しない\"],",
        "            cancelId: 1,",
        "          });",
        "          if (result == 1) {"
      ],
      "text": "モードの利用には対応する デバイスが必要です",
      "translation": ""
    },
    {
      "neighbors": [
        "          const result = await window.electron.showQuestionDialog({",
        "            type: \"warning\",",
        "            title: \"対応するGPUデバイスが見つかりません\",",
        "            message:",
        "              \"GPUモードの利用には対応するGPUデバイスが必要です。\\n\" +",
        "              \"このままGPUモードに変更するとエンジンエラーが発生する可能性があります。本当に変更しますか？\",",
        "            buttons: [\"変更する\", \"変更しない\"],",
        "            cancelId: 1,",
        "          });",
        "          if (result == 1) {",
        "            return;"
      ],
      "text": "このまま モードに変更するとエンジンエラーが発生する可能性があります 本当に変更しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "            type: \"warning\",",
        "            title: \"対応するGPUデバイスが見つかりません\",",
        "            message:",
        "              \"GPUモードの利用には対応するGPUデバイスが必要です。\\n\" +",
        "              \"このままGPUモードに変更するとエンジンエラーが発生する可能性があります。本当に変更しますか？\",",
        "            buttons: [\"変更する\", \"変更しない\"],",
        "            cancelId: 1,",
        "          });",
        "          if (result == 1) {",
        "            return;",
        "          }"
      ],
      "text": "変更する 変更しない",
      "translation": ""
    },
    {
      "neighbors": [
        "        // GPUモードに変更できなかった場合はCPUモードに戻す",
        "        // FIXME: useGpu設定を保存してからエンジン起動を試すのではなく、逆にしたい",
        "        if (!result.success && useGpu) {",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"GPUモードに変更できませんでした\",",
        "            message:",
        "              \"GPUモードでエンジンを起動できなかったためCPUモードに戻します\",",
        "          });",
        "          await dispatch(\"CHANGE_USE_GPU\", { useGpu: false, engineId });",
        "          return;"
      ],
      "text": "モードに変更できませんでした",
      "translation": ""
    },
    {
      "neighbors": [
        "        if (!result.success && useGpu) {",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"GPUモードに変更できませんでした\",",
        "            message:",
        "              \"GPUモードでエンジンを起動できなかったためCPUモードに戻します\",",
        "          });",
        "          await dispatch(\"CHANGE_USE_GPU\", { useGpu: false, engineId });",
        "          return;",
        "        }",
        "      }"
      ],
      "text": "モードでエンジンを起動できなかったため モードに戻します",
      "translation": ""
    }
  ],
  "index.ts": [
    {
      "neighbors": [
        "};",
        " ",
        "export const indexStore = createPartialStore<IndexStoreTypes>({",
        "  GET_ALL_CHARACTER_INFOS: {",
        "    /**",
        "     * すべてのエンジンのキャラクター情報のMap。",
        "     * 同じspeakerUuidのキャラクター情報は、登録順が早いエンジンの情報を元に統合される。",
        "     * キャラクター情報が読み出されていないときは、空リストを返す。",
        "     */",
        "    getter(state) {",
        "      const speakerUuids = ["
      ],
      "text": "すべてのエンジンのキャラクター情報の",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "export const indexStore = createPartialStore<IndexStoreTypes>({",
        "  GET_ALL_CHARACTER_INFOS: {",
        "    /**",
        "     * すべてのエンジンのキャラクター情報のMap。",
        "     * 同じspeakerUuidのキャラクター情報は、登録順が早いエンジンの情報を元に統合される。",
        "     * キャラクター情報が読み出されていないときは、空リストを返す。",
        "     */",
        "    getter(state) {",
        "      const speakerUuids = [",
        "        ...new Set("
      ],
      "text": "同じ のキャラクター情報は 登録順が早いエンジンの情報を元に統合される",
      "translation": ""
    },
    {
      "neighbors": [
        "export const indexStore = createPartialStore<IndexStoreTypes>({",
        "  GET_ALL_CHARACTER_INFOS: {",
        "    /**",
        "     * すべてのエンジンのキャラクター情報のMap。",
        "     * 同じspeakerUuidのキャラクター情報は、登録順が早いエンジンの情報を元に統合される。",
        "     * キャラクター情報が読み出されていないときは、空リストを返す。",
        "     */",
        "    getter(state) {",
        "      const speakerUuids = [",
        "        ...new Set(",
        "          state.engineIds.flatMap((engineId) =>"
      ],
      "text": "キャラクター情報が読み出されていないときは 空リストを返す",
      "translation": ""
    },
    {
      "neighbors": [
        "        flattenCharacterInfos.map((c) => [c.metas.speakerUuid, c])",
        "      );",
        "    },",
        "  },",
        "  /**",
        "   * すべてのエンジンのキャラクター情報のリスト。",
        "   * GET_ALL_CHARACTER_INFOSとは違い、話者の順番が保持される。",
        "   */",
        "  GET_ORDERED_ALL_CHARACTER_INFOS: {",
        "    getter(state) {",
        "      const speakerUuids = state.engineIds"
      ],
      "text": "すべてのエンジンのキャラクター情報のリスト",
      "translation": ""
    },
    {
      "neighbors": [
        "      );",
        "    },",
        "  },",
        "  /**",
        "   * すべてのエンジンのキャラクター情報のリスト。",
        "   * GET_ALL_CHARACTER_INFOSとは違い、話者の順番が保持される。",
        "   */",
        "  GET_ORDERED_ALL_CHARACTER_INFOS: {",
        "    getter(state) {",
        "      const speakerUuids = state.engineIds",
        "        .flatMap((engineId) =>"
      ],
      "text": "とは違い 話者の順番が保持される",
      "translation": ""
    }
  ],
  "utility.ts": [
    {
      "neighbors": [
        "import { Platform } from \"quasar\";",
        "import { diffArrays } from \"diff\";",
        "import { ToolbarButtonTagType, isMac } from \"@/type/preload\";",
        "import { AccentPhrase, Mora } from \"@/openapi\";",
        " ",
        "export const DEFAULT_STYLE_NAME = \"ノーマル\";",
        " ",
        "export const formatCharacterStyleName = (",
        "  characterName: string,",
        "  styleName = DEFAULT_STYLE_NAME",
        ") => `${characterName}（${styleName}）`;"
      ],
      "text": "ノーマル",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  return fileName.replace(sanitizer, \"\");",
        "}",
        " ",
        "/**",
        " * AudioInfoコンポーネントに表示されるパラメータ",
        " */",
        "export const SLIDER_PARAMETERS = {",
        "  /**",
        "   * 話速パラメータの定義",
        "   */"
      ],
      "text": "コンポーネントに表示されるパラメータ",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * AudioInfoコンポーネントに表示されるパラメータ",
        " */",
        "export const SLIDER_PARAMETERS = {",
        "  /**",
        "   * 話速パラメータの定義",
        "   */",
        "  SPEED: {",
        "    max: () => 2,",
        "    min: () => 0.5,",
        "    step: () => 0.01,"
      ],
      "text": "話速パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    step: () => 0.01,",
        "    scrollStep: () => 0.1,",
        "    scrollMinStep: () => 0.01,",
        "  },",
        "  /**",
        "   * 音高パラメータの定義",
        "   */",
        "  PITCH: {",
        "    max: () => 0.15,",
        "    min: () => -0.15,",
        "    step: () => 0.01,"
      ],
      "text": "音高パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    min: () => -0.15,",
        "    step: () => 0.01,",
        "    scrollStep: () => 0.01,",
        "  },",
        "  /**",
        "   *  抑揚パラメータの定義",
        "   */",
        "  INTONATION: {",
        "    max: () => 2,",
        "    min: () => 0,",
        "    step: () => 0.01,"
      ],
      "text": "抑揚パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    step: () => 0.01,",
        "    scrollStep: () => 0.1,",
        "    scrollMinStep: () => 0.01,",
        "  },",
        "  /**",
        "   *  音量パラメータの定義",
        "   */",
        "  VOLUME: {",
        "    max: () => 2,",
        "    min: () => 0,",
        "    step: () => 0.01,"
      ],
      "text": "音量パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    step: () => 0.01,",
        "    scrollStep: () => 0.1,",
        "    scrollMinStep: () => 0.01,",
        "  },",
        "  /**",
        "   *  開始無音パラメータの定義",
        "   */",
        "  PRE_PHONEME_LENGTH: {",
        "    max: () => 1.5,",
        "    min: () => 0,",
        "    step: () => 0.01,"
      ],
      "text": "開始無音パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    step: () => 0.01,",
        "    scrollStep: () => 0.1,",
        "    scrollMinStep: () => 0.01,",
        "  },",
        "  /**",
        "   *  終了無音パラメータの定義",
        "   */",
        "  POST_PHONEME_LENGTH: {",
        "    max: () => 1.5,",
        "    min: () => 0,",
        "    step: () => 0.01,"
      ],
      "text": "終了無音パラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    step: () => 0.01,",
        "    scrollStep: () => 0.1,",
        "    scrollMinStep: () => 0.01,",
        "  },",
        "  /**",
        "   *  モーフィングレートパラメータの定義",
        "   */",
        "  MORPHING_RATE: {",
        "    max: () => 1,",
        "    min: () => 0,",
        "    step: () => 0.01,"
      ],
      "text": "モーフィングレートパラメータの定義",
      "translation": ""
    },
    {
      "neighbors": [
        "    scrollMinStep: () => 0.01,",
        "  },",
        "};",
        " ",
        "export const replaceTagIdToTagString = {",
        "  index: \"連番\",",
        "  characterName: \"キャラ\",",
        "  styleName: \"スタイル\",",
        "  text: \"テキスト\",",
        "  date: \"日付\",",
        "};"
      ],
      "text": "連番",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        "};",
        " ",
        "export const replaceTagIdToTagString = {",
        "  index: \"連番\",",
        "  characterName: \"キャラ\",",
        "  styleName: \"スタイル\",",
        "  text: \"テキスト\",",
        "  date: \"日付\",",
        "};",
        "const replaceTagStringToTagId: { [tagString: string]: string } = Object.entries("
      ],
      "text": "キャラ",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "export const replaceTagIdToTagString = {",
        "  index: \"連番\",",
        "  characterName: \"キャラ\",",
        "  styleName: \"スタイル\",",
        "  text: \"テキスト\",",
        "  date: \"日付\",",
        "};",
        "const replaceTagStringToTagId: { [tagString: string]: string } = Object.entries(",
        "  replaceTagIdToTagString"
      ],
      "text": "スタイル",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "export const replaceTagIdToTagString = {",
        "  index: \"連番\",",
        "  characterName: \"キャラ\",",
        "  styleName: \"スタイル\",",
        "  text: \"テキスト\",",
        "  date: \"日付\",",
        "};",
        "const replaceTagStringToTagId: { [tagString: string]: string } = Object.entries(",
        "  replaceTagIdToTagString",
        ").reduce((prev, [k, v]) => ({ ...prev, [v]: k }), {});"
      ],
      "text": "テキスト",
      "translation": ""
    },
    {
      "neighbors": [
        "export const replaceTagIdToTagString = {",
        "  index: \"連番\",",
        "  characterName: \"キャラ\",",
        "  styleName: \"スタイル\",",
        "  text: \"テキスト\",",
        "  date: \"日付\",",
        "};",
        "const replaceTagStringToTagId: { [tagString: string]: string } = Object.entries(",
        "  replaceTagIdToTagString",
        ").reduce((prev, [k, v]) => ({ ...prev, [v]: k }), {});",
        " "
      ],
      "text": "日付",
      "translation": ""
    },
    {
      "neighbors": [
        "const replaceTagStringToTagId: { [tagString: string]: string } = Object.entries(",
        "  replaceTagIdToTagString",
        ").reduce((prev, [k, v]) => ({ ...prev, [v]: k }), {});",
        " ",
        "export const DEFAULT_AUDIO_FILE_BASE_NAME_TEMPLATE =",
        "  \"$連番$_$キャラ$（$スタイル$）_$テキスト$\";",
        "export const DEFAULT_AUDIO_FILE_NAME_TEMPLATE = `${DEFAULT_AUDIO_FILE_BASE_NAME_TEMPLATE}.wav`;",
        "const DEFAULT_AUDIO_FILE_NAME_VARIABLES = {",
        "  index: 0,",
        "  characterName: \"四国めたん\",",
        "  text: \"テキストテキストテキスト\","
      ],
      "text": "連番 キャラ スタイル テキスト",
      "translation": ""
    },
    {
      "neighbors": [
        "export const DEFAULT_AUDIO_FILE_BASE_NAME_TEMPLATE =",
        "  \"$連番$_$キャラ$（$スタイル$）_$テキスト$\";",
        "export const DEFAULT_AUDIO_FILE_NAME_TEMPLATE = `${DEFAULT_AUDIO_FILE_BASE_NAME_TEMPLATE}.wav`;",
        "const DEFAULT_AUDIO_FILE_NAME_VARIABLES = {",
        "  index: 0,",
        "  characterName: \"四国めたん\",",
        "  text: \"テキストテキストテキスト\",",
        "  styleName: DEFAULT_STYLE_NAME,",
        "  date: currentDateString(),",
        "};",
        " "
      ],
      "text": "四国めたん",
      "translation": ""
    },
    {
      "neighbors": [
        "  \"$連番$_$キャラ$（$スタイル$）_$テキスト$\";",
        "export const DEFAULT_AUDIO_FILE_NAME_TEMPLATE = `${DEFAULT_AUDIO_FILE_BASE_NAME_TEMPLATE}.wav`;",
        "const DEFAULT_AUDIO_FILE_NAME_VARIABLES = {",
        "  index: 0,",
        "  characterName: \"四国めたん\",",
        "  text: \"テキストテキストテキスト\",",
        "  styleName: DEFAULT_STYLE_NAME,",
        "  date: currentDateString(),",
        "};",
        " ",
        "export function currentDateString(): string {"
      ],
      "text": "テキストテキストテキスト",
      "translation": ""
    },
    {
      "neighbors": [
        "  const resolvedText = targettext.replace(/\\[.*?\\]/g, \"\");",
        "  return resolvedText;",
        "}",
        " ",
        "/**",
        " * 2つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
        " * 変更前のアクセント句の調整結果を変更後のアクセント句に保持する。",
        " *",
        " * <例>",
        " * 「こんにちは」 -> 「こんばんは」と変更した場合、[]に囲まれる部分で変更前のモーラが転写される。",
        " * 「 [こん]ばん[は] 」"
      ],
      "text": "つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
      "translation": ""
    },
    {
      "neighbors": [
        "  return resolvedText;",
        "}",
        " ",
        "/**",
        " * 2つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
        " * 変更前のアクセント句の調整結果を変更後のアクセント句に保持する。",
        " *",
        " * <例>",
        " * 「こんにちは」 -> 「こんばんは」と変更した場合、[]に囲まれる部分で変更前のモーラが転写される。",
        " * 「 [こん]ばん[は] 」",
        " */"
      ],
      "text": "変更前のアクセント句の調整結果を変更後のアクセント句に保持する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * 2つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
        " * 変更前のアクセント句の調整結果を変更後のアクセント句に保持する。",
        " *",
        " * <例>",
        " * 「こんにちは」 -> 「こんばんは」と変更した場合、[]に囲まれる部分で変更前のモーラが転写される。",
        " * 「 [こん]ばん[は] 」",
        " */",
        "export class TuningTranscription {",
        "  beforeAccent: AccentPhrase[];"
      ],
      "text": "例",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * 2つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
        " * 変更前のアクセント句の調整結果を変更後のアクセント句に保持する。",
        " *",
        " * <例>",
        " * 「こんにちは」 -> 「こんばんは」と変更した場合、[]に囲まれる部分で変更前のモーラが転写される。",
        " * 「 [こん]ばん[は] 」",
        " */",
        "export class TuningTranscription {",
        "  beforeAccent: AccentPhrase[];",
        "  afterAccent: AccentPhrase[];"
      ],
      "text": "こんにちは こんばんは と変更した場合 に囲まれる部分で変更前のモーラが転写される",
      "translation": ""
    },
    {
      "neighbors": [
        " * 2つのアクセント句配列を比べて同じだと思われるモーラの調整結果を転写し",
        " * 変更前のアクセント句の調整結果を変更後のアクセント句に保持する。",
        " *",
        " * <例>",
        " * 「こんにちは」 -> 「こんばんは」と変更した場合、[]に囲まれる部分で変更前のモーラが転写される。",
        " * 「 [こん]ばん[は] 」",
        " */",
        "export class TuningTranscription {",
        "  beforeAccent: AccentPhrase[];",
        "  afterAccent: AccentPhrase[];",
        "  constructor(beforeAccent: AccentPhrase[], afterAccent: AccentPhrase[]) {"
      ],
      "text": "こん ばん は",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        "    return result as T[K] extends (infer U)[] ? U[] : T[K][];",
        "  }",
        " ",
        "  /**",
        "   * 変更前の配列を操作してpatchMora配列を作る。",
        "   *",
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *"
      ],
      "text": "変更前の配列を操作して 配列を作る",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        " ",
        "  /**",
        "   * 変更前の配列を操作してpatchMora配列を作る。",
        "   *",
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]"
      ],
      "text": "例 は",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  /**",
        "   * 変更前の配列を操作してpatchMora配列を作る。",
        "   *",
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *"
      ],
      "text": "変更前 ズ ン ダ モ ン ナ ノ ダ",
      "translation": ""
    },
    {
      "neighbors": [
        "  /**",
        "   * 変更前の配列を操作してpatchMora配列を作る。",
        "   *",
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *",
        "   * 実際には\"ズ\"などの文字列部分は{text: \"ズ\"...}のようなデータ構造になっている。"
      ],
      "text": "変更後 ボ ク ズ ン ダ ナ ノ デ ス",
      "translation": ""
    },
    {
      "neighbors": [
        "   *",
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *",
        "   * 実際には\"ズ\"などの文字列部分は{text: \"ズ\"...}のようなデータ構造になっている。",
        "   * [ Ｕ, Ｕ, {text: \"ズ\"...}, {text: \"ン\"...}, {text: \"ダ\"...}, {text: \"ナ\"...}, {text: \"ノ\"...}, Ｕ, Ｕ ]",
        "   */"
      ],
      "text": "再利用される文字列と で構成されたデータを作る",
      "translation": ""
    },
    {
      "neighbors": [
        "   * <例> (Ｕはundefined）",
        "   * 変更前 [ ズ, ン, ダ, モ, ン, ナ, ノ, ダ ]",
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *",
        "   * 実際には\"ズ\"などの文字列部分は{text: \"ズ\"...}のようなデータ構造になっている。",
        "   * [ Ｕ, Ｕ, {text: \"ズ\"...}, {text: \"ン\"...}, {text: \"ダ\"...}, {text: \"ナ\"...}, {text: \"ノ\"...}, Ｕ, Ｕ ]",
        "   */",
        "  private createDiffPatch() {"
      ],
      "text": "ズ ン ダ ナ ノ",
      "translation": ""
    },
    {
      "neighbors": [
        "   * 変更後 [ ボ, ク, ズ, ン, ダ, ナ, ノ, デ, ス ]",
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *",
        "   * 実際には\"ズ\"などの文字列部分は{text: \"ズ\"...}のようなデータ構造になっている。",
        "   * [ Ｕ, Ｕ, {text: \"ズ\"...}, {text: \"ン\"...}, {text: \"ダ\"...}, {text: \"ナ\"...}, {text: \"ノ\"...}, Ｕ, Ｕ ]",
        "   */",
        "  private createDiffPatch() {",
        "    const before = structuredClone(this.beforeAccent);",
        "    const after = structuredClone(this.afterAccent);"
      ],
      "text": "実際には ズ などの文字列部分は ズ のようなデータ構造になっている",
      "translation": ""
    },
    {
      "neighbors": [
        "   *",
        "   * 再利用される文字列とundefinedで構成されたデータを作る。",
        "   *       [ Ｕ, Ｕ, ズ, ン, ダ, ナ, ノ, Ｕ, Ｕ ]",
        "   *",
        "   * 実際には\"ズ\"などの文字列部分は{text: \"ズ\"...}のようなデータ構造になっている。",
        "   * [ Ｕ, Ｕ, {text: \"ズ\"...}, {text: \"ン\"...}, {text: \"ダ\"...}, {text: \"ナ\"...}, {text: \"ノ\"...}, Ｕ, Ｕ ]",
        "   */",
        "  private createDiffPatch() {",
        "    const before = structuredClone(this.beforeAccent);",
        "    const after = structuredClone(this.afterAccent);",
        " "
      ],
      "text": "ズ ン ダ ナ ノ",
      "translation": ""
    },
    {
      "neighbors": [
        "    }",
        "    return beforeFlatArray as (Mora | undefined)[];",
        "  }",
        " ",
        "  /**",
        "   * moraPatchとafterAccentを比較し、textが一致するモーラを転写する。",
        "   *",
        "   *  <例> (「||」は等号記号を表す)",
        "   * 「こんにちは」 -> 「こんばんは」 とテキストを変更した場合、以下の例のように比較する。",
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]"
      ],
      "text": "と を比較し が一致するモーラを転写する",
      "translation": ""
    },
    {
      "neighbors": [
        "  }",
        " ",
        "  /**",
        "   * moraPatchとafterAccentを比較し、textが一致するモーラを転写する。",
        "   *",
        "   *  <例> (「||」は等号記号を表す)",
        "   * 「こんにちは」 -> 「こんばんは」 とテキストを変更した場合、以下の例のように比較する。",
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]",
        "   *                              ||                ||                                                ||",
        "   * after[...][\"moras\"] = [ {text: \"コ\"...}, {text: \"ン\"...}, {text: \"バ\"...}, {text: \"ン\"...}, {text: \"ハ\"...} ]"
      ],
      "text": "例 は等号記号を表す",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  /**",
        "   * moraPatchとafterAccentを比較し、textが一致するモーラを転写する。",
        "   *",
        "   *  <例> (「||」は等号記号を表す)",
        "   * 「こんにちは」 -> 「こんばんは」 とテキストを変更した場合、以下の例のように比較する。",
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]",
        "   *                              ||                ||                                                ||",
        "   * after[...][\"moras\"] = [ {text: \"コ\"...}, {text: \"ン\"...}, {text: \"バ\"...}, {text: \"ン\"...}, {text: \"ハ\"...} ]",
        "   *"
      ],
      "text": "こんにちは こんばんは とテキストを変更した場合 以下の例のように比較する",
      "translation": ""
    },
    {
      "neighbors": [
        "   * moraPatchとafterAccentを比較し、textが一致するモーラを転写する。",
        "   *",
        "   *  <例> (「||」は等号記号を表す)",
        "   * 「こんにちは」 -> 「こんばんは」 とテキストを変更した場合、以下の例のように比較する。",
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]",
        "   *                              ||                ||                                                ||",
        "   * after[...][\"moras\"] = [ {text: \"コ\"...}, {text: \"ン\"...}, {text: \"バ\"...}, {text: \"ン\"...}, {text: \"ハ\"...} ]",
        "   *",
        "   * あとは一致したモーラを転写するだけ。",
        "   *"
      ],
      "text": "コ ン ハ",
      "translation": ""
    },
    {
      "neighbors": [
        "   *  <例> (「||」は等号記号を表す)",
        "   * 「こんにちは」 -> 「こんばんは」 とテキストを変更した場合、以下の例のように比較する。",
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]",
        "   *                              ||                ||                                                ||",
        "   * after[...][\"moras\"] = [ {text: \"コ\"...}, {text: \"ン\"...}, {text: \"バ\"...}, {text: \"ン\"...}, {text: \"ハ\"...} ]",
        "   *",
        "   * あとは一致したモーラを転写するだけ。",
        "   *",
        "   */",
        "  private mergeAccentPhrases(moraPatch: (Mora | undefined)[]): AccentPhrase[] {"
      ],
      "text": "コ ン バ ン ハ",
      "translation": ""
    },
    {
      "neighbors": [
        "   *",
        "   *           moraPatch = [ {text: \"コ\"...}, {text: \"ン\"...}, undefined      , undefined      , {text: \"ハ\"...} ]",
        "   *                              ||                ||                                                ||",
        "   * after[...][\"moras\"] = [ {text: \"コ\"...}, {text: \"ン\"...}, {text: \"バ\"...}, {text: \"ン\"...}, {text: \"ハ\"...} ]",
        "   *",
        "   * あとは一致したモーラを転写するだけ。",
        "   *",
        "   */",
        "  private mergeAccentPhrases(moraPatch: (Mora | undefined)[]): AccentPhrase[] {",
        "    const after: AccentPhrase[] = structuredClone(this.afterAccent);",
        "    let moraPatchIndex = 0;"
      ],
      "text": "あとは一致したモーラを転写するだけ",
      "translation": ""
    },
    {
      "neighbors": [
        "    return this.mergeAccentPhrases(moraPatch as never);",
        "  }",
        "}",
        " ",
        "/**",
        " * ２つのAccentPhrasesのテキスト内容が異なるかどうかを判定",
        " */",
        "export function isAccentPhrasesTextDifferent(",
        "  beforeAccent: AccentPhrase[],",
        "  afterAccent: AccentPhrase[]",
        "): boolean {"
      ],
      "text": "つの のテキスト内容が異なるかどうかを判定",
      "translation": ""
    },
    {
      "neighbors": [
        "  });",
        "}",
        " ",
        "export const getToolbarButtonName = (tag: ToolbarButtonTagType): string => {",
        "  const tag2NameObj: Record<ToolbarButtonTagType, string> = {",
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\","
      ],
      "text": "連続再生",
      "translation": ""
    },
    {
      "neighbors": [
        "}",
        " ",
        "export const getToolbarButtonName = (tag: ToolbarButtonTagType): string => {",
        "  const tag2NameObj: Record<ToolbarButtonTagType, string> = {",
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\","
      ],
      "text": "停止",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "export const getToolbarButtonName = (tag: ToolbarButtonTagType): string => {",
        "  const tag2NameObj: Record<ToolbarButtonTagType, string> = {",
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\","
      ],
      "text": "選択音声を書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "export const getToolbarButtonName = (tag: ToolbarButtonTagType): string => {",
        "  const tag2NameObj: Record<ToolbarButtonTagType, string> = {",
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\","
      ],
      "text": "全部書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "  const tag2NameObj: Record<ToolbarButtonTagType, string> = {",
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\","
      ],
      "text": "音声を繋げて書き出し",
      "translation": ""
    },
    {
      "neighbors": [
        "    PLAY_CONTINUOUSLY: \"連続再生\",",
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\",",
        "  };"
      ],
      "text": "プロジェクト保存",
      "translation": ""
    },
    {
      "neighbors": [
        "    STOP: \"停止\",",
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\",",
        "  };",
        "  return tag2NameObj[tag];"
      ],
      "text": "元に戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "    EXPORT_AUDIO_SELECTED: \"選択音声を書き出し\",",
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\",",
        "  };",
        "  return tag2NameObj[tag];",
        "};"
      ],
      "text": "やり直す",
      "translation": ""
    },
    {
      "neighbors": [
        "    EXPORT_AUDIO_ALL: \"全部書き出し\",",
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\",",
        "  };",
        "  return tag2NameObj[tag];",
        "};",
        " "
      ],
      "text": "テキスト読み込み",
      "translation": ""
    },
    {
      "neighbors": [
        "    EXPORT_AUDIO_CONNECT_ALL: \"音声を繋げて書き出し\",",
        "    SAVE_PROJECT: \"プロジェクト保存\",",
        "    UNDO: \"元に戻す\",",
        "    REDO: \"やり直す\",",
        "    IMPORT_TEXT: \"テキスト読み込み\",",
        "    EMPTY: \"空白\",",
        "  };",
        "  return tag2NameObj[tag];",
        "};",
        " ",
        "export const createKanaRegex = (includeSeparation?: boolean): RegExp => {"
      ],
      "text": "空白",
      "translation": ""
    },
    {
      "neighbors": [
        "  });",
        "};",
        " ",
        "export const convertLongVowel = (text: string): string => {",
        "  return text",
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")"
      ],
      "text": "アカサタナハマヤラワャァガザダバパ ー ー ア",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "export const convertLongVowel = (text: string): string => {",
        "  return text",
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");"
      ],
      "text": "イキシチニヒミリィギジヂビピ ー ー イ",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "export const convertLongVowel = (text: string): string => {",
        "  return text",
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");",
        "};"
      ],
      "text": "ウクスツヌフムユルュゥヴグズヅブプ ー ー ウ",
      "translation": ""
    },
    {
      "neighbors": [
        "export const convertLongVowel = (text: string): string => {",
        "  return text",
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");",
        "};",
        " "
      ],
      "text": "エケセテネヘメレェゲゼデベペ ー ー エ",
      "translation": ""
    },
    {
      "neighbors": [
        "  return text",
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");",
        "};",
        " ",
        "// based on https://github.com/BBWeb/path-browserify/blob/win-version/index.js"
      ],
      "text": "オコソトノホモヨロヲョォゴゾドボポ ー ー オ",
      "translation": ""
    },
    {
      "neighbors": [
        "    .replace(/(?<=[アカサタナハマヤラワャァガザダバパ]ー*)ー/g, \"ア\")",
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");",
        "};",
        " ",
        "// based on https://github.com/BBWeb/path-browserify/blob/win-version/index.js",
        "export const getBaseName = (filePath: string) => {"
      ],
      "text": "ン ー ー ン",
      "translation": ""
    },
    {
      "neighbors": [
        "    .replace(/(?<=[イキシチニヒミリィギジヂビピ]ー*)ー/g, \"イ\")",
        "    .replace(/(?<=[ウクスツヌフムユルュゥヴグズヅブプ]ー*)ー/g, \"ウ\")",
        "    .replace(/(?<=[エケセテネヘメレェゲゼデベペ]ー*)ー/g, \"エ\")",
        "    .replace(/(?<=[オコソトノホモヨロヲョォゴゾドボポ]ー*)ー/g, \"オ\")",
        "    .replace(/(?<=[ン]ー*)ー/g, \"ン\")",
        "    .replace(/(?<=[ッ]ー*)ー/g, \"ッ\");",
        "};",
        " ",
        "// based on https://github.com/BBWeb/path-browserify/blob/win-version/index.js",
        "export const getBaseName = (filePath: string) => {",
        "  if (!Platform.is.win) return path.basename(filePath);"
      ],
      "text": "ッ ー ー ッ",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  return basename;",
        "};",
        " ",
        "/**",
        " * Macでの`command`キー、またはその他OSでの`Ctrl`キーが押されているなら`true`を返します。",
        " */",
        "// ctrlKey = windowsのCtrl = macのControl",
        "// metaKey = windowsのWin = macのCommand",
        "// altKey = windowsのAlt = macのOption(問題なし)",
        "export const isOnCommandOrCtrlKeyDown = (event: {"
      ],
      "text": "での キー またはその他 での キーが押されているなら を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "  metaKey: boolean;",
        "  ctrlKey: boolean;",
        "}) => (isMac && event.metaKey) || (!isMac && event.ctrlKey);",
        " ",
        "/**",
        " * AccentPhraseのtextを結合して返します。",
        " */",
        "export const joinTextsInAccentPhrases = (",
        "  accentPhrase: AccentPhrase",
        "): string => {",
        "  return accentPhrase.moras.map((mora) => mora.text).join(\"\");"
      ],
      "text": "の を結合して返します",
      "translation": ""
    }
  ],
  "command.ts": [
    {
      "neighbors": [
        "export type PayloadRecipeTree<S, M> = {",
        "  [K in keyof M]: PayloadRecipe<S, M[K]>;",
        "};",
        " ",
        "/**",
        " * レシピをプロパティに持つオブジェクトから操作を記録するMutationをプロパティにもつオブジェクトを返す関数",
        " * @param payloadRecipeTree - レシピをプロパティに持つオブジェクト",
        " * @returns Mutationを持つオブジェクト(MutationTree)",
        " */",
        "export const createCommandMutationTree = <S, M extends MutationsBase>(",
        "  payloadRecipeTree: PayloadRecipeTree<S, M>"
      ],
      "text": "レシピをプロパティに持つオブジェクトから操作を記録する をプロパティにもつオブジェクトを返す関数",
      "translation": ""
    },
    {
      "neighbors": [
        "  [K in keyof M]: PayloadRecipe<S, M[K]>;",
        "};",
        " ",
        "/**",
        " * レシピをプロパティに持つオブジェクトから操作を記録するMutationをプロパティにもつオブジェクトを返す関数",
        " * @param payloadRecipeTree - レシピをプロパティに持つオブジェクト",
        " * @returns Mutationを持つオブジェクト(MutationTree)",
        " */",
        "export const createCommandMutationTree = <S, M extends MutationsBase>(",
        "  payloadRecipeTree: PayloadRecipeTree<S, M>",
        "): MutationTree<S, M> =>"
      ],
      "text": "レシピをプロパティに持つオブジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "};",
        " ",
        "/**",
        " * レシピをプロパティに持つオブジェクトから操作を記録するMutationをプロパティにもつオブジェクトを返す関数",
        " * @param payloadRecipeTree - レシピをプロパティに持つオブジェクト",
        " * @returns Mutationを持つオブジェクト(MutationTree)",
        " */",
        "export const createCommandMutationTree = <S, M extends MutationsBase>(",
        "  payloadRecipeTree: PayloadRecipeTree<S, M>",
        "): MutationTree<S, M> =>",
        "  Object.fromEntries("
      ],
      "text": "を持つオブジェクト",
      "translation": ""
    },
    {
      "neighbors": [
        "      createCommandMutation(val),",
        "    ])",
        "  ) as MutationTree<S, M>;",
        " ",
        "/**",
        " * 与えられたレシピから操作を記録し実行後にStateに追加するMutationを返す。",
        " * @param payloadRecipe - 操作を記録するレシピ",
        " * @returns レシピと同じPayloadの型を持つMutation.",
        " */",
        "export const createCommandMutation =",
        "  <S extends State, M extends MutationsBase, K extends keyof M>("
      ],
      "text": "与えられたレシピから操作を記録し実行後に に追加する を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "    ])",
        "  ) as MutationTree<S, M>;",
        " ",
        "/**",
        " * 与えられたレシピから操作を記録し実行後にStateに追加するMutationを返す。",
        " * @param payloadRecipe - 操作を記録するレシピ",
        " * @returns レシピと同じPayloadの型を持つMutation.",
        " */",
        "export const createCommandMutation =",
        "  <S extends State, M extends MutationsBase, K extends keyof M>(",
        "    payloadRecipe: PayloadRecipe<S, M[K]>"
      ],
      "text": "操作を記録するレシピ",
      "translation": ""
    },
    {
      "neighbors": [
        "  ) as MutationTree<S, M>;",
        " ",
        "/**",
        " * 与えられたレシピから操作を記録し実行後にStateに追加するMutationを返す。",
        " * @param payloadRecipe - 操作を記録するレシピ",
        " * @returns レシピと同じPayloadの型を持つMutation.",
        " */",
        "export const createCommandMutation =",
        "  <S extends State, M extends MutationsBase, K extends keyof M>(",
        "    payloadRecipe: PayloadRecipe<S, M[K]>",
        "  ): Mutation<S, M, K> =>"
      ],
      "text": "レシピと同じ の型を持つ",
      "translation": ""
    },
    {
      "neighbors": [
        "    state.undoCommands.push(command);",
        "    state.redoCommands.splice(0);",
        "  };",
        " ",
        "/**",
        " * @param recipe - 操作を記録したいレシピ関数",
        " * @returns Function - レシピの操作を与えられたstateとpayloadを用いて記録したコマンドを返す関数。",
        " */",
        "const recordPatches =",
        "  <S, P>(recipe: PayloadRecipe<S, P>) =>",
        "  (state: S, payload: P): Command => {"
      ],
      "text": "操作を記録したいレシピ関数",
      "translation": ""
    },
    {
      "neighbors": [
        "    state.redoCommands.splice(0);",
        "  };",
        " ",
        "/**",
        " * @param recipe - 操作を記録したいレシピ関数",
        " * @returns Function - レシピの操作を与えられたstateとpayloadを用いて記録したコマンドを返す関数。",
        " */",
        "const recordPatches =",
        "  <S, P>(recipe: PayloadRecipe<S, P>) =>",
        "  (state: S, payload: P): Command => {",
        "    const [, doPatches, undoPatches] = immer.produceWithPatches("
      ],
      "text": "レシピの操作を与えられた と を用いて記録したコマンドを返す関数",
      "translation": ""
    }
  ],
  "audioPlayer.ts": [
    {
      "neighbors": [
        "/**",
        " * HTMLAudioElement周りの音声再生・停止などを担当する。",
        " */",
        "import { createPartialStore } from \"./vuex\";",
        "import { AudioPlayerStoreState, AudioPlayerStoreTypes } from \"./type\";",
        "import { AudioKey } from \"@/type/preload\";",
        " "
      ],
      "text": "周りの音声再生・停止などを担当する",
      "translation": ""
    },
    {
      "neighbors": [
        "              audioElement.removeEventListener(\"canplay\", stop);",
        "            };",
        "            audioElement.addEventListener(\"canplay\", stop);",
        "            window.electron.showMessageDialog({",
        "              type: \"error\",",
        "              title: \"エラー\",",
        "              message: \"再生デバイスが見つかりません\",",
        "            });",
        "            throw new Error(err);",
        "          });",
        "      }"
      ],
      "text": "エラー",
      "translation": ""
    },
    {
      "neighbors": [
        "            };",
        "            audioElement.addEventListener(\"canplay\", stop);",
        "            window.electron.showMessageDialog({",
        "              type: \"error\",",
        "              title: \"エラー\",",
        "              message: \"再生デバイスが見つかりません\",",
        "            });",
        "            throw new Error(err);",
        "          });",
        "      }",
        " "
      ],
      "text": "再生デバイスが見つかりません",
      "translation": ""
    }
  ],
  "preset.ts": [
    {
      "neighbors": [
        "import { createPartialStore } from \"./vuex\";",
        "import { PresetStoreState, PresetStoreTypes, State } from \"@/store/type\";",
        "import { Preset, PresetKey, Voice, VoiceId } from \"@/type/preload\";",
        " ",
        "/**",
        " * configを参照して割り当てるべきpresetKeyとそのPresetを適用すべきかどうかを返す",
        " *",
        " * generate: プロジェクト新規作成時、空のAudioItemを作成する場合",
        " * copy: 元となるAudioItemがある場合（＋ボタンで作成したとき）",
        " * changeVoice: ボイス切り替え時",
        " */"
      ],
      "text": "を参照して割り当てるべき とその を適用すべきかどうかを返す",
      "translation": ""
    },
    {
      "neighbors": [
        "import { Preset, PresetKey, Voice, VoiceId } from \"@/type/preload\";",
        " ",
        "/**",
        " * configを参照して割り当てるべきpresetKeyとそのPresetを適用すべきかどうかを返す",
        " *",
        " * generate: プロジェクト新規作成時、空のAudioItemを作成する場合",
        " * copy: 元となるAudioItemがある場合（＋ボタンで作成したとき）",
        " * changeVoice: ボイス切り替え時",
        " */",
        "export function determineNextPresetKey(",
        "  state: Pick<"
      ],
      "text": "プロジェクト新規作成時 空の を作成する場合",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "/**",
        " * configを参照して割り当てるべきpresetKeyとそのPresetを適用すべきかどうかを返す",
        " *",
        " * generate: プロジェクト新規作成時、空のAudioItemを作成する場合",
        " * copy: 元となるAudioItemがある場合（＋ボタンで作成したとき）",
        " * changeVoice: ボイス切り替え時",
        " */",
        "export function determineNextPresetKey(",
        "  state: Pick<",
        "    State,"
      ],
      "text": "元となる がある場合 ボタンで作成したとき",
      "translation": ""
    },
    {
      "neighbors": [
        "/**",
        " * configを参照して割り当てるべきpresetKeyとそのPresetを適用すべきかどうかを返す",
        " *",
        " * generate: プロジェクト新規作成時、空のAudioItemを作成する場合",
        " * copy: 元となるAudioItemがある場合（＋ボタンで作成したとき）",
        " * changeVoice: ボイス切り替え時",
        " */",
        "export function determineNextPresetKey(",
        "  state: Pick<",
        "    State,",
        "    \"defaultPresetKeys\" | \"experimentalSetting\" | \"inheritAudioInfo\""
      ],
      "text": "ボイス切り替え時",
      "translation": ""
    },
    {
      "neighbors": [
        "        }",
        " ",
        "        const characterName = getters.VOICE_NAME(voice);",
        " ",
        "        const presetData: Preset = {",
        "          name: `デフォルト：${characterName}`,",
        "          speedScale: 1.0,",
        "          pitchScale: 0.0,",
        "          intonationScale: 1.0,",
        "          volumeScale: 1.0,",
        "          prePhonemeLength: 0.1,"
      ],
      "text": "デフォルト",
      "translation": ""
    }
  ],
  "ui.ts": [
    {
      "neighbors": [
        "      commit(\"UNLOCK_MENUBAR\");",
        "    },",
        "  },",
        " ",
        "  /**",
        "   * 再読み込み中。UNLOCKされることはない。",
        "   */",
        "  LOCK_RELOADING: {",
        "    mutation(state) {",
        "      state.reloadingLock = true;",
        "    },"
      ],
      "text": "再読み込み中 されることはない",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  CHECK_EDITED_AND_NOT_SAVE: {",
        "    /**",
        "     * プロジェクトファイル未保存の場合、保存するかどうかを確認する。",
        "     * 保存後にウィンドウを閉じるか、アプリを再読み込みする。",
        "     * 保存がキャンセルされた場合は何もしない。",
        "     */",
        "    async action({ dispatch, getters }, obj) {",
        "      if (getters.IS_EDITED) {"
      ],
      "text": "プロジェクトファイル未保存の場合 保存するかどうかを確認する",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  CHECK_EDITED_AND_NOT_SAVE: {",
        "    /**",
        "     * プロジェクトファイル未保存の場合、保存するかどうかを確認する。",
        "     * 保存後にウィンドウを閉じるか、アプリを再読み込みする。",
        "     * 保存がキャンセルされた場合は何もしない。",
        "     */",
        "    async action({ dispatch, getters }, obj) {",
        "      if (getters.IS_EDITED) {",
        "        const result = await dispatch(\"SAVE_OR_DISCARD_PROJECT_FILE\", {});"
      ],
      "text": "保存後にウィンドウを閉じるか アプリを再読み込みする",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "  CHECK_EDITED_AND_NOT_SAVE: {",
        "    /**",
        "     * プロジェクトファイル未保存の場合、保存するかどうかを確認する。",
        "     * 保存後にウィンドウを閉じるか、アプリを再読み込みする。",
        "     * 保存がキャンセルされた場合は何もしない。",
        "     */",
        "    async action({ dispatch, getters }, obj) {",
        "      if (getters.IS_EDITED) {",
        "        const result = await dispatch(\"SAVE_OR_DISCARD_PROJECT_FILE\", {});",
        "        if (result == \"canceled\") {"
      ],
      "text": "保存がキャンセルされた場合は何もしない",
      "translation": ""
    }
  ],
  "type.ts": [
    {
      "neighbors": [
        "  NotifyAndNotShowAgainButtonOption,",
        "  LoadingScreenOption,",
        "} from \"@/components/Dialog\";",
        " ",
        "/**",
        " * エディタ用のAudioQuery",
        " */",
        "export type EditorAudioQuery = Omit<AudioQuery, \"outputSamplingRate\"> & {",
        "  outputSamplingRate: number | \"engineDefault\";",
        "};",
        " "
      ],
      "text": "エディタ用の",
      "translation": ""
    }
  ],
  "engine.ts": [
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  IS_INITIALIZED_ENGINE_SPEAKER: {",
        "    /**",
        "     * 指定した話者（スタイルID）がエンジン側で初期化されているか",
        "     */",
        "    async action({ dispatch }, { engineId, styleId }) {",
        "      const isInitialized = await dispatch(\"INSTANTIATE_ENGINE_CONNECTOR\", {",
        "        engineId,",
        "      }).then((instance) =>"
      ],
      "text": "指定した話者 スタイル がエンジン側で初期化されているか",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  INITIALIZE_ENGINE_SPEAKER: {",
        "    /**",
        "     * 指定した話者（スタイルID）に対してエンジン側の初期化を行い、即座に音声合成ができるようにする。",
        "     */",
        "    async action({ dispatch }, { engineId, styleId }) {",
        "      await dispatch(\"ASYNC_UI_LOCK\", {",
        "        callback: () =>",
        "          dispatch(\"INSTANTIATE_ENGINE_CONNECTOR\", {"
      ],
      "text": "指定した話者 スタイル に対してエンジン側の初期化を行い 即座に音声合成ができるようにする",
      "translation": ""
    }
  ],
  "project.ts": [
    {
      "neighbors": [
        "    ),",
        "  },",
        " ",
        "  LOAD_PROJECT_FILE: {",
        "    /**",
        "     * プロジェクトファイルを読み込む。読み込めたかの成否が返る。",
        "     * エラー発生時はダイアログが表示される。",
        "     */",
        "    action: createUILockAction(",
        "      async (",
        "        context,"
      ],
      "text": "プロジェクトファイルを読み込む 読み込めたかの成否が返る",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  LOAD_PROJECT_FILE: {",
        "    /**",
        "     * プロジェクトファイルを読み込む。読み込めたかの成否が返る。",
        "     * エラー発生時はダイアログが表示される。",
        "     */",
        "    action: createUILockAction(",
        "      async (",
        "        context,",
        "        { filePath, confirm }: { filePath?: string; confirm?: boolean }"
      ],
      "text": "エラー発生時はダイアログが表示される",
      "translation": ""
    },
    {
      "neighbors": [
        "        { filePath, confirm }: { filePath?: string; confirm?: boolean }",
        "      ) => {",
        "        if (!filePath) {",
        "          // Select and load a project File.",
        "          const ret = await window.electron.showProjectLoadDialog({",
        "            title: \"プロジェクトファイルの選択\",",
        "          });",
        "          if (ret == undefined || ret?.length == 0) {",
        "            return false;",
        "          }",
        "          filePath = ret[0];"
      ],
      "text": "プロジェクトファイルの選択",
      "translation": ""
    },
    {
      "neighbors": [
        "          if (confirm !== false && context.getters.IS_EDITED) {",
        "            const result = await context.dispatch(",
        "              \"SAVE_OR_DISCARD_PROJECT_FILE\",",
        "              {",
        "                additionalMessage:",
        "                  \"プロジェクトをロードすると現在のプロジェクトは破棄されます。\",",
        "              }",
        "            );",
        "            if (result == \"canceled\") {",
        "              return false;",
        "            }"
      ],
      "text": "プロジェクトをロードすると現在のプロジェクトは破棄されます",
      "translation": ""
    },
    {
      "neighbors": [
        "          return true;",
        "        } catch (err) {",
        "          window.electron.logError(err);",
        "          const message = (() => {",
        "            if (typeof err === \"string\") return err;",
        "            if (!(err instanceof Error)) return \"エラーが発生しました。\";",
        "            if (err instanceof ResultError && err.code === \"ENOENT\")",
        "              return \"プロジェクトファイルが見つかりませんでした。ファイルが移動、または削除された可能性があります。\";",
        "            if (err.message.startsWith(projectFileErrorMsg))",
        "              return \"ファイルフォーマットが正しくありません。\";",
        "            return err.message;"
      ],
      "text": "エラーが発生しました",
      "translation": ""
    },
    {
      "neighbors": [
        "          window.electron.logError(err);",
        "          const message = (() => {",
        "            if (typeof err === \"string\") return err;",
        "            if (!(err instanceof Error)) return \"エラーが発生しました。\";",
        "            if (err instanceof ResultError && err.code === \"ENOENT\")",
        "              return \"プロジェクトファイルが見つかりませんでした。ファイルが移動、または削除された可能性があります。\";",
        "            if (err.message.startsWith(projectFileErrorMsg))",
        "              return \"ファイルフォーマットが正しくありません。\";",
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({"
      ],
      "text": "プロジェクトファイルが見つかりませんでした ファイルが移動 または削除された可能性があります",
      "translation": ""
    },
    {
      "neighbors": [
        "            if (typeof err === \"string\") return err;",
        "            if (!(err instanceof Error)) return \"エラーが発生しました。\";",
        "            if (err instanceof ResultError && err.code === \"ENOENT\")",
        "              return \"プロジェクトファイルが見つかりませんでした。ファイルが移動、または削除された可能性があります。\";",
        "            if (err.message.startsWith(projectFileErrorMsg))",
        "              return \"ファイルフォーマットが正しくありません。\";",
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\","
      ],
      "text": "ファイルフォーマットが正しくありません",
      "translation": ""
    },
    {
      "neighbors": [
        "              return \"ファイルフォーマットが正しくありません。\";",
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\",",
        "            message: `プロジェクトファイルの読み込みに失敗しました。\\n${message}`,",
        "          });",
        "          return false;",
        "        }",
        "      }"
      ],
      "text": "エラー",
      "translation": ""
    },
    {
      "neighbors": [
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\",",
        "            message: `プロジェクトファイルの読み込みに失敗しました。\\n${message}`,",
        "          });",
        "          return false;",
        "        }",
        "      }",
        "    ),"
      ],
      "text": "プロジェクトファイルの読み込みに失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    ),",
        "  },",
        " ",
        "  SAVE_PROJECT_FILE: {",
        "    /**",
        "     * プロジェクトファイルを保存する。保存の成否が返る。",
        "     * エラー発生時はダイアログが表示される。",
        "     */",
        "    action: createUILockAction(",
        "      async (context, { overwrite }: { overwrite?: boolean }) => {",
        "        let filePath = context.state.projectFilePath;"
      ],
      "text": "プロジェクトファイルを保存する 保存の成否が返る",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  SAVE_PROJECT_FILE: {",
        "    /**",
        "     * プロジェクトファイルを保存する。保存の成否が返る。",
        "     * エラー発生時はダイアログが表示される。",
        "     */",
        "    action: createUILockAction(",
        "      async (context, { overwrite }: { overwrite?: boolean }) => {",
        "        let filePath = context.state.projectFilePath;",
        "        try {"
      ],
      "text": "エラー発生時はダイアログが表示される",
      "translation": ""
    },
    {
      "neighbors": [
        "              defaultPath = filePath;",
        "            }",
        " ",
        "            // Write the current status to a project file.",
        "            const ret = await window.electron.showProjectSaveDialog({",
        "              title: \"プロジェクトファイルの保存\",",
        "              defaultPath,",
        "            });",
        "            if (ret == undefined) {",
        "              return false;",
        "            }"
      ],
      "text": "プロジェクトファイルの保存",
      "translation": ""
    },
    {
      "neighbors": [
        "            context.state.projectFilePath &&",
        "            context.state.projectFilePath != filePath",
        "          ) {",
        "            await window.electron.showMessageDialog({",
        "              type: \"info\",",
        "              title: \"保存\",",
        "              message: `編集中のプロジェクトが ${filePath} に切り替わりました。`,",
        "            });",
        "          }",
        " ",
        "          await context.dispatch(\"APPEND_RECENTLY_USED_PROJECT\", {"
      ],
      "text": "保存",
      "translation": ""
    },
    {
      "neighbors": [
        "            context.state.projectFilePath != filePath",
        "          ) {",
        "            await window.electron.showMessageDialog({",
        "              type: \"info\",",
        "              title: \"保存\",",
        "              message: `編集中のプロジェクトが ${filePath} に切り替わりました。`,",
        "            });",
        "          }",
        " ",
        "          await context.dispatch(\"APPEND_RECENTLY_USED_PROJECT\", {",
        "            filePath,"
      ],
      "text": "編集中のプロジェクトが に切り替わりました",
      "translation": ""
    },
    {
      "neighbors": [
        "          return true;",
        "        } catch (err) {",
        "          window.electron.logError(err);",
        "          const message = (() => {",
        "            if (typeof err === \"string\") return err;",
        "            if (!(err instanceof Error)) return \"エラーが発生しました。\";",
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\","
      ],
      "text": "エラーが発生しました",
      "translation": ""
    },
    {
      "neighbors": [
        "            if (!(err instanceof Error)) return \"エラーが発生しました。\";",
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\",",
        "            message: `プロジェクトファイルの保存に失敗しました。\\n${message}`,",
        "          });",
        "          return false;",
        "        }",
        "      }"
      ],
      "text": "エラー",
      "translation": ""
    },
    {
      "neighbors": [
        "            return err.message;",
        "          })();",
        "          await window.electron.showMessageDialog({",
        "            type: \"error\",",
        "            title: \"エラー\",",
        "            message: `プロジェクトファイルの保存に失敗しました。\\n${message}`,",
        "          });",
        "          return false;",
        "        }",
        "      }",
        "    ),"
      ],
      "text": "プロジェクトファイルの保存に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "      }",
        "    ),",
        "  },",
        " ",
        "  /**",
        "   * プロジェクトファイルを保存するか破棄するかキャンセルするかのダイアログを出して、保存する場合は保存する。",
        "   * 何を選択したかが返る。",
        "   * 保存に失敗した場合はキャンセル扱いになる。",
        "   */",
        "  SAVE_OR_DISCARD_PROJECT_FILE: {",
        "    action: createUILockAction(async ({ dispatch }, { additionalMessage }) => {"
      ],
      "text": "プロジェクトファイルを保存するか破棄するかキャンセルするかのダイアログを出して 保存する場合は保存する",
      "translation": ""
    },
    {
      "neighbors": [
        "    ),",
        "  },",
        " ",
        "  /**",
        "   * プロジェクトファイルを保存するか破棄するかキャンセルするかのダイアログを出して、保存する場合は保存する。",
        "   * 何を選択したかが返る。",
        "   * 保存に失敗した場合はキャンセル扱いになる。",
        "   */",
        "  SAVE_OR_DISCARD_PROJECT_FILE: {",
        "    action: createUILockAction(async ({ dispatch }, { additionalMessage }) => {",
        "      let message = \"プロジェクトの変更が保存されていません。\";"
      ],
      "text": "何を選択したかが返る",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  /**",
        "   * プロジェクトファイルを保存するか破棄するかキャンセルするかのダイアログを出して、保存する場合は保存する。",
        "   * 何を選択したかが返る。",
        "   * 保存に失敗した場合はキャンセル扱いになる。",
        "   */",
        "  SAVE_OR_DISCARD_PROJECT_FILE: {",
        "    action: createUILockAction(async ({ dispatch }, { additionalMessage }) => {",
        "      let message = \"プロジェクトの変更が保存されていません。\";",
        "      if (additionalMessage) {"
      ],
      "text": "保存に失敗した場合はキャンセル扱いになる",
      "translation": ""
    },
    {
      "neighbors": [
        "   * 何を選択したかが返る。",
        "   * 保存に失敗した場合はキャンセル扱いになる。",
        "   */",
        "  SAVE_OR_DISCARD_PROJECT_FILE: {",
        "    action: createUILockAction(async ({ dispatch }, { additionalMessage }) => {",
        "      let message = \"プロジェクトの変更が保存されていません。\";",
        "      if (additionalMessage) {",
        "        message += \"\\n\" + additionalMessage;",
        "      }",
        "      message += \"\\n変更を保存しますか？\";",
        " "
      ],
      "text": "プロジェクトの変更が保存されていません",
      "translation": ""
    },
    {
      "neighbors": [
        "    action: createUILockAction(async ({ dispatch }, { additionalMessage }) => {",
        "      let message = \"プロジェクトの変更が保存されていません。\";",
        "      if (additionalMessage) {",
        "        message += \"\\n\" + additionalMessage;",
        "      }",
        "      message += \"\\n変更を保存しますか？\";",
        " ",
        "      const result: number = await window.electron.showQuestionDialog({",
        "        type: \"info\",",
        "        title: \"警告\",",
        "        message,"
      ],
      "text": "変更を保存しますか",
      "translation": ""
    },
    {
      "neighbors": [
        "      }",
        "      message += \"\\n変更を保存しますか？\";",
        " ",
        "      const result: number = await window.electron.showQuestionDialog({",
        "        type: \"info\",",
        "        title: \"警告\",",
        "        message,",
        "        buttons: [\"保存\", \"破棄\", \"キャンセル\"],",
        "        cancelId: 2,",
        "        defaultId: 2,",
        "      });"
      ],
      "text": "警告",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "      const result: number = await window.electron.showQuestionDialog({",
        "        type: \"info\",",
        "        title: \"警告\",",
        "        message,",
        "        buttons: [\"保存\", \"破棄\", \"キャンセル\"],",
        "        cancelId: 2,",
        "        defaultId: 2,",
        "      });",
        "      if (result == 0) {",
        "        const saved = await dispatch(\"SAVE_PROJECT_FILE\", {"
      ],
      "text": "保存 破棄 キャンセル",
      "translation": ""
    }
  ],
  "audio.ts": [
    {
      "neighbors": [
        "function generateWriteErrorMessage(writeFileResult: ResultError) {",
        "  if (writeFileResult.code) {",
        "    const code = writeFileResult.code.toUpperCase();",
        " ",
        "    if (code.startsWith(\"ENOSPC\")) {",
        "      return \"空き容量が足りません。\";",
        "    }",
        " ",
        "    if (code.startsWith(\"EACCES\")) {",
        "      return \"ファイルにアクセスする許可がありません。\";",
        "    }"
      ],
      "text": "空き容量が足りません",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (code.startsWith(\"ENOSPC\")) {",
        "      return \"空き容量が足りません。\";",
        "    }",
        " ",
        "    if (code.startsWith(\"EACCES\")) {",
        "      return \"ファイルにアクセスする許可がありません。\";",
        "    }",
        " ",
        "    if (code.startsWith(\"EBUSY\")) {",
        "      return \"ファイルが開かれています。\";",
        "    }"
      ],
      "text": "ファイルにアクセスする許可がありません",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (code.startsWith(\"EACCES\")) {",
        "      return \"ファイルにアクセスする許可がありません。\";",
        "    }",
        " ",
        "    if (code.startsWith(\"EBUSY\")) {",
        "      return \"ファイルが開かれています。\";",
        "    }",
        "  }",
        " ",
        "  return `何らかの理由で失敗しました。${writeFileResult.message}`;",
        "}"
      ],
      "text": "ファイルが開かれています",
      "translation": ""
    },
    {
      "neighbors": [
        "    if (code.startsWith(\"EBUSY\")) {",
        "      return \"ファイルが開かれています。\";",
        "    }",
        "  }",
        " ",
        "  return `何らかの理由で失敗しました。${writeFileResult.message}`;",
        "}",
        " ",
        "// TODO: GETTERに移動する。",
        "export function getCharacterInfo(",
        "  state: State,"
      ],
      "text": "何らかの理由で失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    )",
        "  );",
        "}",
        " ",
        "/**",
        " * 与えたAudioItemを元に、Presetを適用した新しいAudioItemを返す",
        " */",
        "export function applyAudioPresetToAudioItem(",
        "  audioItem: AudioItem,",
        "  presetItem: Preset",
        "): AudioItem {"
      ],
      "text": "与えた を元に を適用した新しい を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "      );",
        "    },",
        "  },",
        " ",
        "  /**",
        "   * audio elementの再生オフセット。",
        "   * 選択+削除 や 挿入+選択+元に戻す などを行った場合でも範囲外にならないようにクランプする。",
        "   * ACTIVE_AUDIO_KEYがundefinedのときはundefinedを返す。",
        "   */",
        "  AUDIO_PLAY_START_POINT: {",
        "    getter(state, getters) {"
      ],
      "text": "の再生オフセット",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  /**",
        "   * audio elementの再生オフセット。",
        "   * 選択+削除 や 挿入+選択+元に戻す などを行った場合でも範囲外にならないようにクランプする。",
        "   * ACTIVE_AUDIO_KEYがundefinedのときはundefinedを返す。",
        "   */",
        "  AUDIO_PLAY_START_POINT: {",
        "    getter(state, getters) {",
        "      const audioPlayStartPoint = state._audioPlayStartPoint;"
      ],
      "text": "選択 削除 や 挿入 選択 元に戻す などを行った場合でも範囲外にならないようにクランプする",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        " ",
        "  /**",
        "   * audio elementの再生オフセット。",
        "   * 選択+削除 や 挿入+選択+元に戻す などを行った場合でも範囲外にならないようにクランプする。",
        "   * ACTIVE_AUDIO_KEYがundefinedのときはundefinedを返す。",
        "   */",
        "  AUDIO_PLAY_START_POINT: {",
        "    getter(state, getters) {",
        "      const audioPlayStartPoint = state._audioPlayStartPoint;",
        "      if ("
      ],
      "text": "が のときは を返す",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "  },",
        " ",
        "  SETUP_SPEAKER: {",
        "    /**",
        "     * AudioItemに設定される話者（スタイルID）に対してエンジン側の初期化を行い、即座に音声合成ができるようにする。",
        "     */",
        "    async action({ commit, dispatch }, { engineId, audioKeys, styleId }) {",
        "      const isInitialized = await dispatch(\"IS_INITIALIZED_ENGINE_SPEAKER\", {",
        "        engineId,",
        "        styleId,"
      ],
      "text": "に設定される話者 スタイル に対してエンジン側の初期化を行い 即座に音声合成ができるようにする",
      "translation": ""
    },
    {
      "neighbors": [
        "            state.savingSetting.fixedExportDir,",
        "            defaultAudioFileName",
        "          );",
        "        } else {",
        "          filePath ??= await window.electron.showAudioSaveDialog({",
        "            title: \"音声を保存\",",
        "            defaultPath: defaultAudioFileName,",
        "          });",
        "        }",
        " ",
        "        if (!filePath) {"
      ],
      "text": "音声を保存",
      "translation": ""
    },
    {
      "neighbors": [
        "            blob = await dispatch(\"GENERATE_AUDIO\", { audioKey });",
        "          } catch (e) {",
        "            let errorMessage = undefined;",
        "            // FIXME: GENERATE_AUDIO_FROM_AUDIO_ITEMのエラーを変えた場合変更する",
        "            if (e instanceof Error && e.message === \"VALID_MORPHING_ERROR\") {",
        "              errorMessage = \"モーフィングの設定が無効です。\";",
        "            } else {",
        "              window.electron.logError(e);",
        "            }",
        "            return {",
        "              result: \"ENGINE_ERROR\","
      ],
      "text": "モーフィングの設定が無効です",
      "translation": ""
    },
    {
      "neighbors": [
        "            const labString = await dispatch(\"GENERATE_LAB\", { audioKey });",
        "            if (labString === undefined)",
        "              return {",
        "                result: \"WRITE_ERROR\",",
        "                path: filePath,",
        "                errorMessage: \"labの生成に失敗しました。\",",
        "              };",
        " ",
        "            await writeTextFile({",
        "              text: labString,",
        "              filePath: filePath.replace(/\\.wav$/, \".lab\"),"
      ],
      "text": "の生成に失敗しました",
      "translation": ""
    },
    {
      "neighbors": [
        "          return {",
        "            result: \"UNKNOWN_ERROR\",",
        "            path: filePath,",
        "            errorMessage:",
        "              (e instanceof Error ? e.message : String(e)) ||",
        "              \"不明なエラーが発生しました。\",",
        "          };",
        "        }",
        "      }",
        "    ),",
        "  },"
      ],
      "text": "不明なエラーが発生しました",
      "translation": ""
    },
    {
      "neighbors": [
        "      ) => {",
        "        if (state.savingSetting.fixedExportEnabled) {",
        "          dirPath = state.savingSetting.fixedExportDir;",
        "        } else {",
        "          dirPath ??= await window.electron.showOpenDirectoryDialog({",
        "            title: \"音声を保存\",",
        "          });",
        "        }",
        "        if (dirPath) {",
        "          const _dirPath = dirPath;",
        " "
      ],
      "text": "音声を保存",
      "translation": ""
    },
    {
      "neighbors": [
        "            state.savingSetting.fixedExportDir,",
        "            defaultFileName",
        "          );",
        "        } else {",
        "          filePath ??= await window.electron.showAudioSaveDialog({",
        "            title: \"音声を全て繋げて保存\",",
        "            defaultPath: defaultFileName,",
        "          });",
        "        }",
        " ",
        "        if (!filePath) {"
      ],
      "text": "音声を全て繋げて保存",
      "translation": ""
    },
    {
      "neighbors": [
        "              blob = await dispatch(\"GENERATE_AUDIO\", { audioKey });",
        "            } catch (e) {",
        "              let errorMessage = undefined;",
        "              // FIXME: GENERATE_AUDIO_FROM_AUDIO_ITEMのエラーを変えた場合変更する",
        "              if (e instanceof Error && e.message === \"VALID_MORPHING_ERROR\") {",
        "                errorMessage = \"モーフィングの設定が無効です。\";",
        "              } else {",
        "                window.electron.logError(e);",
        "              }",
        "              return {",
        "                result: \"ENGINE_ERROR\","
      ],
      "text": "モーフィングの設定が無効です",
      "translation": ""
    },
    {
      "neighbors": [
        "            state.savingSetting.fixedExportDir,",
        "            defaultFileName",
        "          );",
        "        } else {",
        "          filePath ??= await window.electron.showTextSaveDialog({",
        "            title: \"文章を全て繋げてテキストファイルに保存\",",
        "            defaultPath: defaultFileName,",
        "          });",
        "        }",
        " ",
        "        if (!filePath) {"
      ],
      "text": "文章を全て繋げてテキストファイルに保存",
      "translation": ""
    },
    {
      "neighbors": [
        "      },",
        "    },",
        " ",
        "    COMMAND_CHANGE_DISPLAY_TEXT: {",
        "      /**",
        "       * 読みを変えずにテキストだけを変える",
        "       */",
        "      action({ commit }, payload: { audioKey: AudioKey; text: string }) {",
        "        commit(\"COMMAND_CHANGE_AUDIO_TEXT\", {",
        "          audioKey: payload.audioKey,",
        "          text: payload.text,"
      ],
      "text": "読みを変えずにテキストだけを変える",
      "translation": ""
    },
    {
      "neighbors": [
        "          { state, commit, dispatch, getters },",
        "          { filePath }: { filePath?: string }",
        "        ) => {",
        "          if (!filePath) {",
        "            filePath = await window.electron.showImportFileDialog({",
        "              title: \"セリフ読み込み\",",
        "            });",
        "            if (!filePath) return;",
        "          }",
        "          let body = new TextDecoder(\"utf-8\").decode(",
        "            await window.electron.readFile({ filePath }).then(getValueOrThrow)"
      ],
      "text": "セリフ読み込み",
      "translation": ""
    }
  ],
  "EditorHome.vue": [
    {
      "neighbors": [
        " ",
        "        <!-- TODO: 複数エンジン対応 -->",
        "        <!-- TODO: allEngineStateが \"ERROR\" のときエラーになったエンジンを探してトーストで案内 -->",
        "        <div v-if=\"allEngineState === 'FAILED_STARTING'\" class=\"waiting-engine\">",
        "          <div>",
        "            エンジンの起動に失敗しました。エンジンの再起動をお試しください。",
        "          </div>",
        "        </div>",
        "        <div",
        "          v-else-if=\"",
        "            !isCompletedInitialStartup || allEngineState === 'STARTING'"
      ],
      "text": "エンジンの起動に失敗しました エンジンの再起動をお試しください",
      "translation": ""
    },
    {
      "neighbors": [
        "          <div>",
        "            <q-spinner color=\"primary\" size=\"2.5rem\" />",
        "            <div class=\"q-mt-xs\">",
        "              {{",
        "                allEngineState === \"STARTING\"",
        "                  ? \"エンジン起動中・・・\"",
        "                  : \"データ準備中・・・\"",
        "              }}",
        "            </div>",
        " ",
        "            <template v-if=\"isEngineWaitingLong\">"
      ],
      "text": "エンジン起動中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "            <q-spinner color=\"primary\" size=\"2.5rem\" />",
        "            <div class=\"q-mt-xs\">",
        "              {{",
        "                allEngineState === \"STARTING\"",
        "                  ? \"エンジン起動中・・・\"",
        "                  : \"データ準備中・・・\"",
        "              }}",
        "            </div>",
        " ",
        "            <template v-if=\"isEngineWaitingLong\">",
        "              <q-separator spaced />"
      ],
      "text": "データ準備中・・・",
      "translation": ""
    },
    {
      "neighbors": [
        "              }}",
        "            </div>",
        " ",
        "            <template v-if=\"isEngineWaitingLong\">",
        "              <q-separator spaced />",
        "              エンジン起動に時間がかかっています。<br />",
        "              <q-btn",
        "                v-if=\"isMultipleEngine\"",
        "                outline",
        "                :disable=\"reloadingLocked\"",
        "                @click=\"reloadAppWithMultiEngineOffMode\""
      ],
      "text": "エンジン起動に時間がかかっています",
      "translation": ""
    },
    {
      "neighbors": [
        "                v-if=\"isMultipleEngine\"",
        "                outline",
        "                :disable=\"reloadingLocked\"",
        "                @click=\"reloadAppWithMultiEngineOffMode\"",
        "              >",
        "                マルチエンジンをオフにして再読み込みする</q-btn",
        "              >",
        "              <q-btn v-else outline @click=\"openQa\">Q&Aを見る</q-btn>",
        "            </template>",
        "          </div>",
        "        </div>"
      ],
      "text": "マルチエンジンをオフにして再読み込みする",
      "translation": ""
    },
    {
      "neighbors": [
        "                :disable=\"reloadingLocked\"",
        "                @click=\"reloadAppWithMultiEngineOffMode\"",
        "              >",
        "                マルチエンジンをオフにして再読み込みする</q-btn",
        "              >",
        "              <q-btn v-else outline @click=\"openQa\">Q&Aを見る</q-btn>",
        "            </template>",
        "          </div>",
        "        </div>",
        "        <q-splitter",
        "          horizontal"
      ],
      "text": "を見る",
      "translation": ""
    },
    {
      "neighbors": [
        "                          fab",
        "                          icon=\"add\"",
        "                          color=\"primary\"",
        "                          text-color=\"display-on-primary\"",
        "                          :disable=\"uiLocked\"",
        "                          aria-label=\"テキストを追加\"",
        "                          @click=\"addAudioItem\"",
        "                        ></q-btn>",
        "                      </div>",
        "                    </div>",
        "                  </template>"
      ],
      "text": "テキストを追加",
      "translation": ""
    },
    {
      "neighbors": [
        "const isMultipleEngine = computed(() => store.state.engineIds.length > 1);",
        " ",
        "// hotkeys handled by Mousetrap",
        "const hotkeyMap = new Map<HotkeyAction, () => HotkeyReturnType>([",
        "  [",
        "    \"テキスト欄にフォーカスを戻す\",",
        "    () => {",
        "      if (activeAudioKey.value !== undefined) {",
        "        focusCell({ audioKey: activeAudioKey.value, focusTarget: \"textField\" });",
        "      }",
        "      return false; // this is the same with event.preventDefault()"
      ],
      "text": "テキスト欄にフォーカスを戻す",
      "translation": ""
    },
    {
      "neighbors": [
        "    },",
        "  ],",
        "  [",
        "    // FIXME: テキスト欄にフォーカスがある状態でも実行できるようにする",
        "    // https://github.com/VOICEVOX/voicevox/pull/1096#issuecomment-1378651920",
        "    \"テキスト欄を複製\",",
        "    () => {",
        "      if (activeAudioKey.value != undefined) {",
        "        duplicateAudioItem();",
        "      }",
        "      return false;"
      ],
      "text": "テキスト欄を複製",
      "translation": ""
    },
    {
      "neighbors": [
        "const hotkeyActionsNative = [",
        "  (event: KeyboardEvent) => {",
        "    if (",
        "      !event.isComposing &&",
        "      !uiLocked.value &&",
        "      parseCombo(event) == hotkeySettingsMap.value.get(\"テキスト欄を追加\")",
        "    ) {",
        "      addAudioItem();",
        "      event.preventDefault();",
        "    }",
        "  },"
      ],
      "text": "テキスト欄を追加",
      "translation": ""
    },
    {
      "neighbors": [
        "  },",
        "  (event: KeyboardEvent) => {",
        "    if (",
        "      !event.isComposing &&",
        "      !uiLocked.value &&",
        "      parseCombo(event) == hotkeySettingsMap.value.get(\"テキスト欄を削除\")",
        "    ) {",
        "      removeAudioItem();",
        "      event.preventDefault();",
        "    }",
        "  },"
      ],
      "text": "テキスト欄を削除",
      "translation": ""
    },
    {
      "neighbors": [
        "  (event: KeyboardEvent) => {",
        "    if (",
        "      !event.isComposing &&",
        "      !uiLocked.value &&",
        "      parseCombo(event) ==",
        "        hotkeySettingsMap.value.get(\"テキスト欄からフォーカスを外す\")",
        "    ) {",
        "      if (document.activeElement instanceof HTMLInputElement) {",
        "        document.activeElement.blur();",
        "      }",
        "      event.preventDefault();"
      ],
      "text": "テキスト欄からフォーカスを外す",
      "translation": ""
    },
    {
      "neighbors": [
        "      const engineName = store.state.engineInfos[engineId].name;",
        "      const altPort = store.state.altPortInfos[engineId];",
        "      if (!altPort) return;",
        " ",
        "      store.dispatch(\"SHOW_NOTIFY_AND_NOT_SHOW_AGAIN_BUTTON\", {",
        "        message: `${altPort.from}番ポートが使用中であるため ${engineName} は、${altPort.to}番ポートで起動しました`,",
        "        icon: \"compare_arrows\",",
        "        tipName: \"engineStartedOnAltPort\",",
        "      });",
        "    }",
        "  }"
      ],
      "text": "番ポートが使用中であるため は 番ポートで起動しました",
      "translation": ""
    },
    {
      "neighbors": [
        "    case \".vvproj\":",
        "      store.dispatch(\"LOAD_PROJECT_FILE\", { filePath: file.path });",
        "      break;",
        "    default:",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"対応していないファイルです\",",
        "        message:",
        "          \"テキストファイル (.txt) とVOICEVOXプロジェクトファイル (.vvproj) に対応しています。\",",
        "      });",
        "  }",
        "};"
      ],
      "text": "対応していないファイルです",
      "translation": ""
    },
    {
      "neighbors": [
        "      break;",
        "    default:",
        "      store.dispatch(\"SHOW_ALERT_DIALOG\", {",
        "        title: \"対応していないファイルです\",",
        "        message:",
        "          \"テキストファイル (.txt) とVOICEVOXプロジェクトファイル (.vvproj) に対応しています。\",",
        "      });",
        "  }",
        "};",
        " ",
        "// AudioCellの自動スクロール"
      ],
      "text": "テキストファイル と プロジェクトファイル に対応しています",
      "translation": ""
    }
  ],
  "device.ts": [
    {
      "neighbors": [
        "import si from \"systeminformation\";",
        " ",
        "/**",
        " * GPUモードがサポートされているかどうか。",
        " * windowsの場合は全GPUに対応。",
        " * linuxの場合はNVIDIAのみ対応。",
        " */",
        "export function hasSupportedGpu(platform: string): Promise<boolean> {",
        "  return si"
      ],
      "text": "モードがサポートされているかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        "import si from \"systeminformation\";",
        " ",
        "/**",
        " * GPUモードがサポートされているかどうか。",
        " * windowsの場合は全GPUに対応。",
        " * linuxの場合はNVIDIAのみ対応。",
        " */",
        "export function hasSupportedGpu(platform: string): Promise<boolean> {",
        "  return si",
        "    .graphics()"
      ],
      "text": "の場合は全 に対応",
      "translation": ""
    },
    {
      "neighbors": [
        "import si from \"systeminformation\";",
        " ",
        "/**",
        " * GPUモードがサポートされているかどうか。",
        " * windowsの場合は全GPUに対応。",
        " * linuxの場合はNVIDIAのみ対応。",
        " */",
        "export function hasSupportedGpu(platform: string): Promise<boolean> {",
        "  return si",
        "    .graphics()",
        "    .then((data) =>"
      ],
      "text": "の場合は のみ対応",
      "translation": ""
    }
  ],
  "runtime.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    }
  ],
  "DefaultApi.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * @export",
        " * @interface DefaultApiInterface",
        " */",
        "export interface DefaultApiInterface {",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * @summary テキストからアクセント句を得る",
        "     * @param {string} text",
        "     * @param {number} speaker",
        "     * @param {boolean} [isKana]",
        "     * @param {string} [coreVersion]"
      ],
      "text": "テキストからアクセント句を得ます が のとき テキストは次のような ライクな記法に従う読み仮名として処理されます デフォルトは です 全てのカナはカタカナで記述される アクセント句は または で区切る で区切った場合に限り無音区間が挿入される カナの手前に を入れるとそのカナは無声化される アクセント位置を で指定する 全てのアクセント句にはアクセント位置を つ指定する必要がある アクセント句末に 全角 を入れることにより疑問文の発音ができる",
      "translation": ""
    },
    {
      "neighbors": [
        " * @interface DefaultApiInterface",
        " */",
        "export interface DefaultApiInterface {",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * @summary テキストからアクセント句を得る",
        "     * @param {string} text",
        "     * @param {number} speaker",
        "     * @param {boolean} [isKana]",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option."
      ],
      "text": "テキストからアクセント句を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    accentPhrasesAccentPhrasesPostRaw(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>>;",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    accentPhrasesAccentPhrasesPost(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**"
      ],
      "text": "テキストからアクセント句を得ます が のとき テキストは次のような ライクな記法に従う読み仮名として処理されます デフォルトは です 全てのカナはカタカナで記述される アクセント句は または で区切る で区切った場合に限り無音区間が挿入される カナの手前に を入れるとそのカナは無声化される アクセント位置を で指定する 全てのアクセント句にはアクセント位置を つ指定する必要がある アクセント句末に 全角 を入れることにより疑問文の発音ができる",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    accentPhrasesAccentPhrasesPostRaw(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>>;",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    accentPhrasesAccentPhrasesPost(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     * 新しいプリセットを追加します  Parameters ------- preset: Preset     新しいプリセット。     プリセットIDが既存のものと重複している場合は、新規のプリセットIDが採番されます。  Returns ------- id: int     追加したプリセットのプリセットID"
      ],
      "text": "テキストからアクセント句を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * テキストからアクセント句を得る",
        "     */",
        "    accentPhrasesAccentPhrasesPost(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     * 新しいプリセットを追加します  Parameters ------- preset: Preset     新しいプリセット。     プリセットIDが既存のものと重複している場合は、新規のプリセットIDが採番されます。  Returns ------- id: int     追加したプリセットのプリセットID",
        "     * @summary Add Preset",
        "     * @param {Preset} preset",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "新しいプリセットを追加します 新しいプリセット プリセット が既存のものと重複している場合は 新規のプリセット が採番されます 追加したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    addPresetAddPresetPostRaw(requestParameters: AddPresetAddPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;",
        " ",
        "    /**",
        "     * 新しいプリセットを追加します  Parameters ------- preset: Preset     新しいプリセット。     プリセットIDが既存のものと重複している場合は、新規のプリセットIDが採番されます。  Returns ------- id: int     追加したプリセットのプリセットID",
        "     * Add Preset",
        "     */",
        "    addPresetAddPresetPost(requestParameters: AddPresetAddPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;",
        " ",
        "    /**"
      ],
      "text": "新しいプリセットを追加します 新しいプリセット プリセット が既存のものと重複している場合は 新規のプリセット が採番されます 追加したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Add Preset",
        "     */",
        "    addPresetAddPresetPost(requestParameters: AddPresetAddPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;",
        " ",
        "    /**",
        "     * ユーザー辞書に言葉を追加します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * @summary Add User Dict Word",
        "     * @param {string} surface",
        "     * @param {string} pronunciation",
        "     * @param {number} accentType",
        "     * @param {WordTypes} [wordType]"
      ],
      "text": "ユーザー辞書に言葉を追加します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    addUserDictWordUserDictWordPostRaw(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;",
        " ",
        "    /**",
        "     * ユーザー辞書に言葉を追加します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Add User Dict Word",
        "     */",
        "    addUserDictWordUserDictWordPost(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;",
        " ",
        "    /**"
      ],
      "text": "ユーザー辞書に言葉を追加します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Add User Dict Word",
        "     */",
        "    addUserDictWordUserDictWordPost(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * @summary 音声合成用のクエリを作成する",
        "     * @param {string} text",
        "     * @param {number} speaker",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option."
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    addUserDictWordUserDictWordPost(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * @summary 音声合成用のクエリを作成する",
        "     * @param {string} text",
        "     * @param {number} speaker",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "音声合成用のクエリを作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    audioQueryAudioQueryPostRaw(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    audioQueryAudioQueryPostRaw(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。"
      ],
      "text": "音声合成用のクエリを作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * @summary 音声合成用のクエリをプリセットを用いて作成する",
        "     * @param {string} text",
        "     * @param {number} presetId",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option."
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * @summary 音声合成用のクエリをプリセットを用いて作成する",
        "     * @param {string} text",
        "     * @param {number} presetId",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "音声合成用のクエリをプリセットを用いて作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    audioQueryFromPresetAudioQueryFromPresetPost(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>>;",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    audioQueryFromPresetAudioQueryFromPresetPost(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "音声合成用のクエリをプリセットを用いて作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    audioQueryFromPresetAudioQueryFromPresetPost(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery>;",
        " ",
        "    /**",
        "     *",
        "     * @summary 音声合成する（キャンセル可能）",
        "     * @param {number} speaker",
        "     * @param {AudioQuery} audioQuery",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "音声合成する キャンセル可能",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    cancellableSynthesisCancellableSynthesisPostRaw(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * 音声合成する（キャンセル可能）",
        "     */",
        "    cancellableSynthesisCancellableSynthesisPost(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。"
      ],
      "text": "音声合成する キャンセル可能",
      "translation": ""
    },
    {
      "neighbors": [
        "     * 音声合成する（キャンセル可能）",
        "     */",
        "    cancellableSynthesisCancellableSynthesisPost(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * @summary base64エンコードされた複数のwavデータを一つに結合する",
        "     * @param {Array<string>} requestBody",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "エンコードされた データを一纏めにし ファイルで返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    cancellableSynthesisCancellableSynthesisPost(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * @summary base64エンコードされた複数のwavデータを一つに結合する",
        "     * @param {Array<string>} requestBody",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "エンコードされた複数の データを一つに結合する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    connectWavesConnectWavesPostRaw(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    connectWavesConnectWavesPost(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**"
      ],
      "text": "エンコードされた データを一纏めにし ファイルで返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    connectWavesConnectWavesPostRaw(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    connectWavesConnectWavesPost(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "エンコードされた複数の データを一つに結合する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Core Versions",
        "     */",
        "    coreVersionsCoreVersionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;",
        " ",
        "    /**",
        "     * 既存のプリセットを削除します  Parameters ------- id: int     削除するプリセットのプリセットID",
        "     * @summary Delete Preset",
        "     * @param {number} id",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "既存のプリセットを削除します 削除するプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    deletePresetDeletePresetPostRaw(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * 既存のプリセットを削除します  Parameters ------- id: int     削除するプリセットのプリセットID",
        "     * Delete Preset",
        "     */",
        "    deletePresetDeletePresetPost(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "既存のプリセットを削除します 削除するプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Delete Preset",
        "     */",
        "    deletePresetDeletePresetPost(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を削除します。  Parameters ---------- word_uuid: str     削除する言葉のUUID",
        "     * @summary Delete User Dict Word",
        "     * @param {string} wordUuid",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "ユーザー辞書に登録されている言葉を削除します 削除する言葉の",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    deleteUserDictWordUserDictWordWordUuidDeleteRaw(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を削除します。  Parameters ---------- word_uuid: str     削除する言葉のUUID",
        "     * Delete User Dict Word",
        "     */",
        "    deleteUserDictWordUserDictWordWordUuidDelete(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "ユーザー辞書に登録されている言葉を削除します 削除する言葉の",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Delete User Dict Word",
        "     */",
        "    deleteUserDictWordUserDictWordWordUuidDelete(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * ダウンロード可能な音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * @summary Downloadable Libraries",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "ダウンロード可能な音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    downloadableLibrariesDownloadableLibrariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DownloadableLibrary>>>;",
        " ",
        "    /**",
        "     * ダウンロード可能な音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Downloadable Libraries",
        "     */",
        "    downloadableLibrariesDownloadableLibrariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DownloadableLibrary>>;",
        " ",
        "    /**"
      ],
      "text": "ダウンロード可能な音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Engine Manifest",
        "     */",
        "    engineManifestEngineManifestGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EngineManifest>;",
        " ",
        "    /**",
        "     * エンジンが保持しているプリセットの設定を返します  Returns ------- presets: List[Preset]     プリセットのリスト",
        "     * @summary Get Presets",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "エンジンが保持しているプリセットの設定を返します プリセットのリスト",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    getPresetsPresetsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Preset>>>;",
        " ",
        "    /**",
        "     * エンジンが保持しているプリセットの設定を返します  Returns ------- presets: List[Preset]     プリセットのリスト",
        "     * Get Presets",
        "     */",
        "    getPresetsPresetsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Preset>>;",
        " ",
        "    /**"
      ],
      "text": "エンジンが保持しているプリセットの設定を返します プリセットのリスト",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Get Presets",
        "     */",
        "    getPresetsPresetsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Preset>>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている単語の一覧を返します。 単語の表層形(surface)は正規化済みの物を返します。  Returns ------- Dict[str, UserDictWord]     単語のUUIDとその詳細",
        "     * @summary Get User Dict Words",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "ユーザー辞書に登録されている単語の一覧を返します 単語の表層形 は正規化済みの物を返します 単語の とその詳細",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    getUserDictWordsUserDictGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: UserDictWord; }>>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている単語の一覧を返します。 単語の表層形(surface)は正規化済みの物を返します。  Returns ------- Dict[str, UserDictWord]     単語のUUIDとその詳細",
        "     * Get User Dict Words",
        "     */",
        "    getUserDictWordsUserDictGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserDictWord; }>;",
        " ",
        "    /**"
      ],
      "text": "ユーザー辞書に登録されている単語の一覧を返します 単語の表層形 は正規化済みの物を返します 単語の とその詳細",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Get User Dict Words",
        "     */",
        "    getUserDictWordsUserDictGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserDictWord; }>;",
        " ",
        "    /**",
        "     * 他のユーザー辞書をインポートします。  Parameters ---------- import_dict_data: Dict[str, UserDictWord]     インポートするユーザー辞書のデータ override: bool     重複したエントリがあった場合、上書きするかどうか",
        "     * @summary Import User Dict Words",
        "     * @param {boolean} override",
        "     * @param {{ [key: string]: UserDictWord; }} requestBody",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "他のユーザー辞書をインポートします インポートするユーザー辞書のデータ 重複したエントリがあった場合 上書きするかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    importUserDictWordsImportUserDictPostRaw(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * 他のユーザー辞書をインポートします。  Parameters ---------- import_dict_data: Dict[str, UserDictWord]     インポートするユーザー辞書のデータ override: bool     重複したエントリがあった場合、上書きするかどうか",
        "     * Import User Dict Words",
        "     */",
        "    importUserDictWordsImportUserDictPost(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "他のユーザー辞書をインポートします インポートするユーザー辞書のデータ 重複したエントリがあった場合 上書きするかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Import User Dict Words",
        "     */",
        "    importUserDictWordsImportUserDictPost(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者を初期化します。 実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。",
        "     * @summary Initialize Speaker",
        "     * @param {number} speaker",
        "     * @param {boolean} [skipReinit] 既に初期化済みの話者の再初期化をスキップするかどうか",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option."
      ],
      "text": "指定された の話者を初期化します 実行しなくても他の は使用できますが 初回実行時に時間がかかることがあります",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者を初期化します。 実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。",
        "     * @summary Initialize Speaker",
        "     * @param {number} speaker",
        "     * @param {boolean} [skipReinit] 既に初期化済みの話者の再初期化をスキップするかどうか",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "既に初期化済みの話者の再初期化をスキップするかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    initializeSpeakerInitializeSpeakerPostRaw(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者を初期化します。 実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。",
        "     * Initialize Speaker",
        "     */",
        "    initializeSpeakerInitializeSpeakerPost(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "指定された の話者を初期化します 実行しなくても他の は使用できますが 初回実行時に時間がかかることがあります",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Initialize Speaker",
        "     */",
        "    initializeSpeakerInitializeSpeakerPost(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * 音声ライブラリをインストールします。 音声ライブラリのZIPファイルをリクエストボディとして送信してください。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * @summary Install Library",
        "     * @param {string} libraryUuid",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "音声ライブラリをインストールします 音声ライブラリの ファイルをリクエストボディとして送信してください 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    installLibraryInstallLibraryLibraryUuidPostRaw(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * 音声ライブラリをインストールします。 音声ライブラリのZIPファイルをリクエストボディとして送信してください。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Install Library",
        "     */",
        "    installLibraryInstallLibraryLibraryUuidPost(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "音声ライブラリをインストールします 音声ライブラリの ファイルをリクエストボディとして送信してください 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Install Library",
        "     */",
        "    installLibraryInstallLibraryLibraryUuidPost(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * インストールした音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * @summary Installed Libraries",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "インストールした音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    installedLibrariesInstalledLibrariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: InstalledLibrary; }>>;",
        " ",
        "    /**",
        "     * インストールした音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Installed Libraries",
        "     */",
        "    installedLibrariesInstalledLibrariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: InstalledLibrary; }>;",
        " ",
        "    /**"
      ],
      "text": "インストールした音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Installed Libraries",
        "     */",
        "    installedLibrariesInstalledLibrariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: InstalledLibrary; }>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者が初期化されているかどうかを返します。",
        "     * @summary Is Initialized Speaker",
        "     * @param {number} speaker",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "指定された の話者が初期化されているかどうかを返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    isInitializedSpeakerIsInitializedSpeakerGetRaw(requestParameters: IsInitializedSpeakerIsInitializedSpeakerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者が初期化されているかどうかを返します。",
        "     * Is Initialized Speaker",
        "     */",
        "    isInitializedSpeakerIsInitializedSpeakerGet(requestParameters: IsInitializedSpeakerIsInitializedSpeakerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;",
        " ",
        "    /**"
      ],
      "text": "指定された の話者が初期化されているかどうかを返します",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    isInitializedSpeakerIsInitializedSpeakerGet(requestParameters: IsInitializedSpeakerIsInitializedSpeakerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;",
        " ",
        "    /**",
        "     *",
        "     * @summary アクセント句から音高・音素長を得る",
        "     * @param {number} speaker",
        "     * @param {Array<AccentPhrase>} accentPhrase",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "アクセント句から音高・音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    moraDataMoraDataPostRaw(requestParameters: MoraDataMoraDataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>>;",
        " ",
        "    /**",
        "     * アクセント句から音高・音素長を得る",
        "     */",
        "    moraDataMoraDataPost(requestParameters: MoraDataMoraDataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "アクセント句から音高・音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    moraDataMoraDataPost(requestParameters: MoraDataMoraDataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     *",
        "     * @summary アクセント句から音素長を得る",
        "     * @param {number} speaker",
        "     * @param {Array<AccentPhrase>} accentPhrase",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "アクセント句から音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    moraLengthMoraLengthPostRaw(requestParameters: MoraLengthMoraLengthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>>;",
        " ",
        "    /**",
        "     * アクセント句から音素長を得る",
        "     */",
        "    moraLengthMoraLengthPost(requestParameters: MoraLengthMoraLengthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "アクセント句から音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    moraLengthMoraLengthPost(requestParameters: MoraLengthMoraLengthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     *",
        "     * @summary アクセント句から音高を得る",
        "     * @param {number} speaker",
        "     * @param {Array<AccentPhrase>} accentPhrase",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "アクセント句から音高を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    moraPitchMoraPitchPostRaw(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>>;",
        " ",
        "    /**",
        "     * アクセント句から音高を得る",
        "     */",
        "    moraPitchMoraPitchPost(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。"
      ],
      "text": "アクセント句から音高を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "     * アクセント句から音高を得る",
        "     */",
        "    moraPitchMoraPitchPost(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * @summary 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     * @param {Array<number>} requestBody",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します モーフィングの許可 禁止は の に記載されています プロパティが存在しない場合は モーフィングが許可されているとみなします 返り値の話者は 型なので注意",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    moraPitchMoraPitchPost(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>>;",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * @summary 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     * @param {Array<number>} requestBody",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    morphableTargetsMorphableTargetsPostRaw(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: MorphableTargetInfo; }>>>;",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    morphableTargetsMorphableTargetsPost(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: MorphableTargetInfo; }>>;",
        " ",
        "    /**"
      ],
      "text": "指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します モーフィングの許可 禁止は の に記載されています プロパティが存在しない場合は モーフィングが許可されているとみなします 返り値の話者は 型なので注意",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    morphableTargetsMorphableTargetsPostRaw(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: MorphableTargetInfo; }>>>;",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    morphableTargetsMorphableTargetsPost(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: MorphableTargetInfo; }>>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    morphableTargetsMorphableTargetsPost(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: MorphableTargetInfo; }>>;",
        " ",
        "    /**",
        "     *",
        "     * @summary 複数まとめて音声合成する",
        "     * @param {number} speaker",
        "     * @param {Array<AudioQuery>} audioQuery",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "複数まとめて音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    multiSynthesisMultiSynthesisPostRaw(requestParameters: MultiSynthesisMultiSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * 複数まとめて音声合成する",
        "     */",
        "    multiSynthesisMultiSynthesisPost(requestParameters: MultiSynthesisMultiSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を更新します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_uuid: str     更新する言葉のUUID word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨"
      ],
      "text": "複数まとめて音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * 複数まとめて音声合成する",
        "     */",
        "    multiSynthesisMultiSynthesisPost(requestParameters: MultiSynthesisMultiSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を更新します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_uuid: str     更新する言葉のUUID word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * @summary Rewrite User Dict Word",
        "     * @param {string} wordUuid",
        "     * @param {string} surface",
        "     * @param {string} pronunciation",
        "     * @param {number} accentType"
      ],
      "text": "ユーザー辞書に登録されている言葉を更新します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 更新する言葉の 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    rewriteUserDictWordUserDictWordWordUuidPutRaw(requestParameters: RewriteUserDictWordUserDictWordWordUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を更新します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_uuid: str     更新する言葉のUUID word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Rewrite User Dict Word",
        "     */",
        "    rewriteUserDictWordUserDictWordWordUuidPut(requestParameters: RewriteUserDictWordUserDictWordWordUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "ユーザー辞書に登録されている言葉を更新します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 更新する言葉の 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Setting Post",
        "     */",
        "    settingPostSettingPost(requestParameters: SettingPostSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_uuidに関する情報をjson形式で返します。 画像や音声はbase64エンコードされたものが返されます。  Returns ------- ret_data: SpeakerInfo",
        "     * @summary Speaker Info",
        "     * @param {string} speakerUuid",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}"
      ],
      "text": "指定された に関する情報を 形式で返します 画像や音声は エンコードされたものが返されます",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    speakerInfoSpeakerInfoGetRaw(requestParameters: SpeakerInfoSpeakerInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpeakerInfo>>;",
        " ",
        "    /**",
        "     * 指定されたspeaker_uuidに関する情報をjson形式で返します。 画像や音声はbase64エンコードされたものが返されます。  Returns ------- ret_data: SpeakerInfo",
        "     * Speaker Info",
        "     */",
        "    speakerInfoSpeakerInfoGet(requestParameters: SpeakerInfoSpeakerInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpeakerInfo>;",
        " ",
        "    /**"
      ],
      "text": "指定された に関する情報を 形式で返します 画像や音声は エンコードされたものが返されます",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Supported Devices",
        "     */",
        "    supportedDevicesSupportedDevicesGet(requestParameters: SupportedDevicesSupportedDevicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SupportedDevicesInfo>;",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * @summary 2人の話者でモーフィングした音声を合成する",
        "     * @param {number} baseSpeaker",
        "     * @param {number} targetSpeaker",
        "     * @param {number} morphRate",
        "     * @param {AudioQuery} audioQuery"
      ],
      "text": "指定された 人の話者で音声を合成 指定した割合でモーフィングした音声を得ます モーフィングの割合は で指定でき でベースの話者 でターゲットの話者に近づきます",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    supportedDevicesSupportedDevicesGet(requestParameters: SupportedDevicesSupportedDevicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SupportedDevicesInfo>;",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * @summary 2人の話者でモーフィングした音声を合成する",
        "     * @param {number} baseSpeaker",
        "     * @param {number} targetSpeaker",
        "     * @param {number} morphRate",
        "     * @param {AudioQuery} audioQuery",
        "     * @param {string} [coreVersion]"
      ],
      "text": "人の話者でモーフィングした音声を合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    synthesisMorphingSynthesisMorphingPostRaw(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    synthesisMorphingSynthesisMorphingPost(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**"
      ],
      "text": "指定された 人の話者で音声を合成 指定した割合でモーフィングした音声を得ます モーフィングの割合は で指定でき でベースの話者 でターゲットの話者に近づきます",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    synthesisMorphingSynthesisMorphingPostRaw(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    synthesisMorphingSynthesisMorphingPost(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "人の話者でモーフィングした音声を合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    synthesisMorphingSynthesisMorphingPost(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     *",
        "     * @summary 音声合成する",
        "     * @param {number} speaker",
        "     * @param {AudioQuery} audioQuery",
        "     * @param {boolean} [enableInterrogativeUpspeak] 疑問系のテキストが与えられたら語尾を自動調整する",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option."
      ],
      "text": "音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "    /**",
        "     *",
        "     * @summary 音声合成する",
        "     * @param {number} speaker",
        "     * @param {AudioQuery} audioQuery",
        "     * @param {boolean} [enableInterrogativeUpspeak] 疑問系のテキストが与えられたら語尾を自動調整する",
        "     * @param {string} [coreVersion]",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "疑問系のテキストが与えられたら語尾を自動調整する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    synthesisSynthesisPostRaw(requestParameters: SynthesisSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;",
        " ",
        "    /**",
        "     * 音声合成する",
        "     */",
        "    synthesisSynthesisPost(requestParameters: SynthesisSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * 音声ライブラリをアンインストールします。  Parameters ---------- library_uuid: str     音声ライブラリのID"
      ],
      "text": "音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * 音声合成する",
        "     */",
        "    synthesisSynthesisPost(requestParameters: SynthesisSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;",
        " ",
        "    /**",
        "     * 音声ライブラリをアンインストールします。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * @summary Uninstall Library",
        "     * @param {string} libraryUuid",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "音声ライブラリをアンインストールします 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    uninstallLibraryUninstallLibraryLibraryUuidPostRaw(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;",
        " ",
        "    /**",
        "     * 音声ライブラリをアンインストールします。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Uninstall Library",
        "     */",
        "    uninstallLibraryUninstallLibraryLibraryUuidPost(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**"
      ],
      "text": "音声ライブラリをアンインストールします 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Uninstall Library",
        "     */",
        "    uninstallLibraryUninstallLibraryLibraryUuidPost(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;",
        " ",
        "    /**",
        "     * 既存のプリセットを更新します  Parameters ------- preset: Preset     更新するプリセット。     プリセットIDが更新対象と一致している必要があります。  Returns ------- id: int     更新したプリセットのプリセットID",
        "     * @summary Update Preset",
        "     * @param {Preset} preset",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "既存のプリセットを更新します 更新するプリセット プリセット が更新対象と一致している必要があります 更新したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    updatePresetUpdatePresetPostRaw(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;",
        " ",
        "    /**",
        "     * 既存のプリセットを更新します  Parameters ------- preset: Preset     更新するプリセット。     プリセットIDが更新対象と一致している必要があります。  Returns ------- id: int     更新したプリセットのプリセットID",
        "     * Update Preset",
        "     */",
        "    updatePresetUpdatePresetPost(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;",
        " ",
        "    /**"
      ],
      "text": "既存のプリセットを更新します 更新するプリセット プリセット が更新対象と一致している必要があります 更新したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "     * Update Preset",
        "     */",
        "    updatePresetUpdatePresetPost(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * @summary テキストがAquesTalkライクな記法に従っているか判定する",
        "     * @param {string} text",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface"
      ],
      "text": "テキストが ライクな記法に従っているかどうかを判定します 従っていない場合はエラーが返ります 判定する対象の文字列",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    updatePresetUpdatePresetPost(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * @summary テキストがAquesTalkライクな記法に従っているか判定する",
        "     * @param {string} text",
        "     * @param {*} [options] Override http request option.",
        "     * @throws {RequiredError}",
        "     * @memberof DefaultApiInterface",
        "     */"
      ],
      "text": "テキストが ライクな記法に従っているか判定する",
      "translation": ""
    },
    {
      "neighbors": [
        "     * @memberof DefaultApiInterface",
        "     */",
        "    validateKanaValidateKanaPostRaw(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    validateKanaValidateKanaPost(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;",
        " ",
        "    /**"
      ],
      "text": "テキストが ライクな記法に従っているかどうかを判定します 従っていない場合はエラーが返ります 判定する対象の文字列",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    validateKanaValidateKanaPostRaw(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    validateKanaValidateKanaPost(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;",
        " ",
        "    /**",
        "     *"
      ],
      "text": "テキストが ライクな記法に従っているか判定する",
      "translation": ""
    },
    {
      "neighbors": [
        " *",
        " */",
        "export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    async accentPhrasesAccentPhrasesPostRaw(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling accentPhrasesAccentPhrasesPost.');"
      ],
      "text": "テキストからアクセント句を得ます が のとき テキストは次のような ライクな記法に従う読み仮名として処理されます デフォルトは です 全てのカナはカタカナで記述される アクセント句は または で区切る で区切った場合に限り無音区間が挿入される カナの手前に を入れるとそのカナは無声化される アクセント位置を で指定する 全てのアクセント句にはアクセント位置を つ指定する必要がある アクセント句末に 全角 を入れることにより疑問文の発音ができる",
      "translation": ""
    },
    {
      "neighbors": [
        " */",
        "export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    async accentPhrasesAccentPhrasesPostRaw(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling accentPhrasesAccentPhrasesPost.');",
        "        }"
      ],
      "text": "テキストからアクセント句を得る",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccentPhraseFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    async accentPhrasesAccentPhrasesPost(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>> {",
        "        const response = await this.accentPhrasesAccentPhrasesPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "テキストからアクセント句を得ます が のとき テキストは次のような ライクな記法に従う読み仮名として処理されます デフォルトは です 全てのカナはカタカナで記述される アクセント句は または で区切る で区切った場合に限り無音区間が挿入される カナの手前に を入れるとそのカナは無声化される アクセント位置を で指定する 全てのアクセント句にはアクセント位置を つ指定する必要がある アクセント句末に 全角 を入れることにより疑問文の発音ができる",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccentPhraseFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * テキストからアクセント句を得ます。 is_kanaが`true`のとき、テキストは次のようなAquesTalkライクな記法に従う読み仮名として処理されます。デフォルトは`false`です。 * 全てのカナはカタカナで記述される * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。 * カナの手前に`_`を入れるとそのカナは無声化される * アクセント位置を`\\'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。 * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。",
        "     * テキストからアクセント句を得る",
        "     */",
        "    async accentPhrasesAccentPhrasesPost(requestParameters: AccentPhrasesAccentPhrasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>> {",
        "        const response = await this.accentPhrasesAccentPhrasesPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "テキストからアクセント句を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.accentPhrasesAccentPhrasesPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 新しいプリセットを追加します  Parameters ------- preset: Preset     新しいプリセット。     プリセットIDが既存のものと重複している場合は、新規のプリセットIDが採番されます。  Returns ------- id: int     追加したプリセットのプリセットID",
        "     * Add Preset",
        "     */",
        "    async addPresetAddPresetPostRaw(requestParameters: AddPresetAddPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {",
        "        if (requestParameters.preset === null || requestParameters.preset === undefined) {",
        "            throw new runtime.RequiredError('preset','Required parameter requestParameters.preset was null or undefined when calling addPresetAddPresetPost.');"
      ],
      "text": "新しいプリセットを追加します 新しいプリセット プリセット が既存のものと重複している場合は 新規のプリセット が採番されます 追加したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "            return new runtime.TextApiResponse(response) as any;",
        "        }",
        "    }",
        " ",
        "    /**",
        "     * 新しいプリセットを追加します  Parameters ------- preset: Preset     新しいプリセット。     プリセットIDが既存のものと重複している場合は、新規のプリセットIDが採番されます。  Returns ------- id: int     追加したプリセットのプリセットID",
        "     * Add Preset",
        "     */",
        "    async addPresetAddPresetPost(requestParameters: AddPresetAddPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {",
        "        const response = await this.addPresetAddPresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "新しいプリセットを追加します 新しいプリセット プリセット が既存のものと重複している場合は 新規のプリセット が採番されます 追加したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.addPresetAddPresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に言葉を追加します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Add User Dict Word",
        "     */",
        "    async addUserDictWordUserDictWordPostRaw(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {",
        "        if (requestParameters.surface === null || requestParameters.surface === undefined) {",
        "            throw new runtime.RequiredError('surface','Required parameter requestParameters.surface was null or undefined when calling addUserDictWordUserDictWordPost.');"
      ],
      "text": "ユーザー辞書に言葉を追加します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "            return new runtime.TextApiResponse(response) as any;",
        "        }",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に言葉を追加します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Add User Dict Word",
        "     */",
        "    async addUserDictWordUserDictWordPost(requestParameters: AddUserDictWordUserDictWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {",
        "        const response = await this.addUserDictWordUserDictWordPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "ユーザー辞書に言葉を追加します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.addUserDictWordUserDictWordPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    async audioQueryAudioQueryPostRaw(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling audioQueryAudioQueryPost.');"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    async audioQueryAudioQueryPostRaw(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling audioQueryAudioQueryPost.');",
        "        }"
      ],
      "text": "音声合成用のクエリを作成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => AudioQueryFromJSON(jsonValue));",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    async audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery> {",
        "        const response = await this.audioQueryAudioQueryPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.JSONApiResponse(response, (jsonValue) => AudioQueryFromJSON(jsonValue));",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリを作成する",
        "     */",
        "    async audioQueryAudioQueryPost(requestParameters: AudioQueryAudioQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery> {",
        "        const response = await this.audioQueryAudioQueryPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "音声合成用のクエリを作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.audioQueryAudioQueryPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    async audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling audioQueryFromPresetAudioQueryFromPresetPost.');"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    async audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudioQuery>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling audioQueryFromPresetAudioQueryFromPresetPost.');",
        "        }"
      ],
      "text": "音声合成用のクエリをプリセットを用いて作成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => AudioQueryFromJSON(jsonValue));",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    async audioQueryFromPresetAudioQueryFromPresetPost(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery> {",
        "        const response = await this.audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "クエリの初期値を得ます ここで得られたクエリはそのまま音声合成に利用できます 各値の意味は を参照してください",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.JSONApiResponse(response, (jsonValue) => AudioQueryFromJSON(jsonValue));",
        "    }",
        " ",
        "    /**",
        "     * クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。",
        "     * 音声合成用のクエリをプリセットを用いて作成する",
        "     */",
        "    async audioQueryFromPresetAudioQueryFromPresetPost(requestParameters: AudioQueryFromPresetAudioQueryFromPresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudioQuery> {",
        "        const response = await this.audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "音声合成用のクエリをプリセットを用いて作成する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.audioQueryFromPresetAudioQueryFromPresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 音声合成する（キャンセル可能）",
        "     */",
        "    async cancellableSynthesisCancellableSynthesisPostRaw(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling cancellableSynthesisCancellableSynthesisPost.');",
        "        }"
      ],
      "text": "音声合成する キャンセル可能",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 音声合成する（キャンセル可能）",
        "     */",
        "    async cancellableSynthesisCancellableSynthesisPost(requestParameters: CancellableSynthesisCancellableSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.cancellableSynthesisCancellableSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "音声合成する キャンセル可能",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.cancellableSynthesisCancellableSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    async connectWavesConnectWavesPostRaw(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {",
        "            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling connectWavesConnectWavesPost.');"
      ],
      "text": "エンコードされた データを一纏めにし ファイルで返します",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    async connectWavesConnectWavesPostRaw(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {",
        "            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling connectWavesConnectWavesPost.');",
        "        }"
      ],
      "text": "エンコードされた複数の データを一つに結合する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    async connectWavesConnectWavesPost(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.connectWavesConnectWavesPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "エンコードされた データを一纏めにし ファイルで返します",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * base64エンコードされたwavデータを一纏めにし、wavファイルで返します。",
        "     * base64エンコードされた複数のwavデータを一つに結合する",
        "     */",
        "    async connectWavesConnectWavesPost(requestParameters: ConnectWavesConnectWavesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.connectWavesConnectWavesPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "エンコードされた複数の データを一つに結合する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.coreVersionsCoreVersionsGetRaw(initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 既存のプリセットを削除します  Parameters ------- id: int     削除するプリセットのプリセットID",
        "     * Delete Preset",
        "     */",
        "    async deletePresetDeletePresetPostRaw(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.id === null || requestParameters.id === undefined) {",
        "            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePresetDeletePresetPost.');"
      ],
      "text": "既存のプリセットを削除します 削除するプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 既存のプリセットを削除します  Parameters ------- id: int     削除するプリセットのプリセットID",
        "     * Delete Preset",
        "     */",
        "    async deletePresetDeletePresetPost(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.deletePresetDeletePresetPostRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "既存のプリセットを削除します 削除するプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "    async deletePresetDeletePresetPost(requestParameters: DeletePresetDeletePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.deletePresetDeletePresetPostRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を削除します。  Parameters ---------- word_uuid: str     削除する言葉のUUID",
        "     * Delete User Dict Word",
        "     */",
        "    async deleteUserDictWordUserDictWordWordUuidDeleteRaw(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.wordUuid === null || requestParameters.wordUuid === undefined) {",
        "            throw new runtime.RequiredError('wordUuid','Required parameter requestParameters.wordUuid was null or undefined when calling deleteUserDictWordUserDictWordWordUuidDelete.');"
      ],
      "text": "ユーザー辞書に登録されている言葉を削除します 削除する言葉の",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を削除します。  Parameters ---------- word_uuid: str     削除する言葉のUUID",
        "     * Delete User Dict Word",
        "     */",
        "    async deleteUserDictWordUserDictWordWordUuidDelete(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.deleteUserDictWordUserDictWordWordUuidDeleteRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "ユーザー辞書に登録されている言葉を削除します 削除する言葉の",
      "translation": ""
    },
    {
      "neighbors": [
        "    async deleteUserDictWordUserDictWordWordUuidDelete(requestParameters: DeleteUserDictWordUserDictWordWordUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.deleteUserDictWordUserDictWordWordUuidDeleteRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * ダウンロード可能な音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Downloadable Libraries",
        "     */",
        "    async downloadableLibrariesDownloadableLibrariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DownloadableLibrary>>> {",
        "        const queryParameters: any = {};",
        " "
      ],
      "text": "ダウンロード可能な音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DownloadableLibraryFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * ダウンロード可能な音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Downloadable Libraries",
        "     */",
        "    async downloadableLibrariesDownloadableLibrariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DownloadableLibrary>> {",
        "        const response = await this.downloadableLibrariesDownloadableLibrariesGetRaw(initOverrides);",
        "        return await response.value();"
      ],
      "text": "ダウンロード可能な音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.engineManifestEngineManifestGetRaw(initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * エンジンが保持しているプリセットの設定を返します  Returns ------- presets: List[Preset]     プリセットのリスト",
        "     * Get Presets",
        "     */",
        "    async getPresetsPresetsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Preset>>> {",
        "        const queryParameters: any = {};",
        " "
      ],
      "text": "エンジンが保持しているプリセットの設定を返します プリセットのリスト",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PresetFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * エンジンが保持しているプリセットの設定を返します  Returns ------- presets: List[Preset]     プリセットのリスト",
        "     * Get Presets",
        "     */",
        "    async getPresetsPresetsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Preset>> {",
        "        const response = await this.getPresetsPresetsGetRaw(initOverrides);",
        "        return await response.value();"
      ],
      "text": "エンジンが保持しているプリセットの設定を返します プリセットのリスト",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.getPresetsPresetsGetRaw(initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている単語の一覧を返します。 単語の表層形(surface)は正規化済みの物を返します。  Returns ------- Dict[str, UserDictWord]     単語のUUIDとその詳細",
        "     * Get User Dict Words",
        "     */",
        "    async getUserDictWordsUserDictGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: UserDictWord; }>> {",
        "        const queryParameters: any = {};",
        " "
      ],
      "text": "ユーザー辞書に登録されている単語の一覧を返します 単語の表層形 は正規化済みの物を返します 単語の とその詳細",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, UserDictWordFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている単語の一覧を返します。 単語の表層形(surface)は正規化済みの物を返します。  Returns ------- Dict[str, UserDictWord]     単語のUUIDとその詳細",
        "     * Get User Dict Words",
        "     */",
        "    async getUserDictWordsUserDictGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserDictWord; }> {",
        "        const response = await this.getUserDictWordsUserDictGetRaw(initOverrides);",
        "        return await response.value();"
      ],
      "text": "ユーザー辞書に登録されている単語の一覧を返します 単語の表層形 は正規化済みの物を返します 単語の とその詳細",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.getUserDictWordsUserDictGetRaw(initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 他のユーザー辞書をインポートします。  Parameters ---------- import_dict_data: Dict[str, UserDictWord]     インポートするユーザー辞書のデータ override: bool     重複したエントリがあった場合、上書きするかどうか",
        "     * Import User Dict Words",
        "     */",
        "    async importUserDictWordsImportUserDictPostRaw(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.override === null || requestParameters.override === undefined) {",
        "            throw new runtime.RequiredError('override','Required parameter requestParameters.override was null or undefined when calling importUserDictWordsImportUserDictPost.');"
      ],
      "text": "他のユーザー辞書をインポートします インポートするユーザー辞書のデータ 重複したエントリがあった場合 上書きするかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 他のユーザー辞書をインポートします。  Parameters ---------- import_dict_data: Dict[str, UserDictWord]     インポートするユーザー辞書のデータ override: bool     重複したエントリがあった場合、上書きするかどうか",
        "     * Import User Dict Words",
        "     */",
        "    async importUserDictWordsImportUserDictPost(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.importUserDictWordsImportUserDictPostRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "他のユーザー辞書をインポートします インポートするユーザー辞書のデータ 重複したエントリがあった場合 上書きするかどうか",
      "translation": ""
    },
    {
      "neighbors": [
        "    async importUserDictWordsImportUserDictPost(requestParameters: ImportUserDictWordsImportUserDictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.importUserDictWordsImportUserDictPostRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者を初期化します。 実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。",
        "     * Initialize Speaker",
        "     */",
        "    async initializeSpeakerInitializeSpeakerPostRaw(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling initializeSpeakerInitializeSpeakerPost.');"
      ],
      "text": "指定された の話者を初期化します 実行しなくても他の は使用できますが 初回実行時に時間がかかることがあります",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者を初期化します。 実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。",
        "     * Initialize Speaker",
        "     */",
        "    async initializeSpeakerInitializeSpeakerPost(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.initializeSpeakerInitializeSpeakerPostRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "指定された の話者を初期化します 実行しなくても他の は使用できますが 初回実行時に時間がかかることがあります",
      "translation": ""
    },
    {
      "neighbors": [
        "    async initializeSpeakerInitializeSpeakerPost(requestParameters: InitializeSpeakerInitializeSpeakerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.initializeSpeakerInitializeSpeakerPostRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * 音声ライブラリをインストールします。 音声ライブラリのZIPファイルをリクエストボディとして送信してください。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Install Library",
        "     */",
        "    async installLibraryInstallLibraryLibraryUuidPostRaw(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.libraryUuid === null || requestParameters.libraryUuid === undefined) {",
        "            throw new runtime.RequiredError('libraryUuid','Required parameter requestParameters.libraryUuid was null or undefined when calling installLibraryInstallLibraryLibraryUuidPost.');"
      ],
      "text": "音声ライブラリをインストールします 音声ライブラリの ファイルをリクエストボディとして送信してください 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 音声ライブラリをインストールします。 音声ライブラリのZIPファイルをリクエストボディとして送信してください。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Install Library",
        "     */",
        "    async installLibraryInstallLibraryLibraryUuidPost(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.installLibraryInstallLibraryLibraryUuidPostRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "音声ライブラリをインストールします 音声ライブラリの ファイルをリクエストボディとして送信してください 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "    async installLibraryInstallLibraryLibraryUuidPost(requestParameters: InstallLibraryInstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.installLibraryInstallLibraryLibraryUuidPostRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * インストールした音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Installed Libraries",
        "     */",
        "    async installedLibrariesInstalledLibrariesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: InstalledLibrary; }>> {",
        "        const queryParameters: any = {};",
        " "
      ],
      "text": "インストールした音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, InstalledLibraryFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * インストールした音声ライブラリの情報を返します。  Returns ------- ret_data: List[DownloadableLibrary]",
        "     * Installed Libraries",
        "     */",
        "    async installedLibrariesInstalledLibrariesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: InstalledLibrary; }> {",
        "        const response = await this.installedLibrariesInstalledLibrariesGetRaw(initOverrides);",
        "        return await response.value();"
      ],
      "text": "インストールした音声ライブラリの情報を返します",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.installedLibrariesInstalledLibrariesGetRaw(initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者が初期化されているかどうかを返します。",
        "     * Is Initialized Speaker",
        "     */",
        "    async isInitializedSpeakerIsInitializedSpeakerGetRaw(requestParameters: IsInitializedSpeakerIsInitializedSpeakerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling isInitializedSpeakerIsInitializedSpeakerGet.');"
      ],
      "text": "指定された の話者が初期化されているかどうかを返します",
      "translation": ""
    },
    {
      "neighbors": [
        "            return new runtime.TextApiResponse(response) as any;",
        "        }",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_idの話者が初期化されているかどうかを返します。",
        "     * Is Initialized Speaker",
        "     */",
        "    async isInitializedSpeakerIsInitializedSpeakerGet(requestParameters: IsInitializedSpeakerIsInitializedSpeakerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {",
        "        const response = await this.isInitializedSpeakerIsInitializedSpeakerGetRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "指定された の話者が初期化されているかどうかを返します",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.isInitializedSpeakerIsInitializedSpeakerGetRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音高・音素長を得る",
        "     */",
        "    async moraDataMoraDataPostRaw(requestParameters: MoraDataMoraDataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling moraDataMoraDataPost.');",
        "        }"
      ],
      "text": "アクセント句から音高・音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccentPhraseFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音高・音素長を得る",
        "     */",
        "    async moraDataMoraDataPost(requestParameters: MoraDataMoraDataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>> {",
        "        const response = await this.moraDataMoraDataPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "アクセント句から音高・音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.moraDataMoraDataPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音素長を得る",
        "     */",
        "    async moraLengthMoraLengthPostRaw(requestParameters: MoraLengthMoraLengthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling moraLengthMoraLengthPost.');",
        "        }"
      ],
      "text": "アクセント句から音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccentPhraseFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音素長を得る",
        "     */",
        "    async moraLengthMoraLengthPost(requestParameters: MoraLengthMoraLengthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>> {",
        "        const response = await this.moraLengthMoraLengthPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "アクセント句から音素長を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.moraLengthMoraLengthPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音高を得る",
        "     */",
        "    async moraPitchMoraPitchPostRaw(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccentPhrase>>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling moraPitchMoraPitchPost.');",
        "        }"
      ],
      "text": "アクセント句から音高を得る",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccentPhraseFromJSON));",
        "    }",
        " ",
        "    /**",
        "     * アクセント句から音高を得る",
        "     */",
        "    async moraPitchMoraPitchPost(requestParameters: MoraPitchMoraPitchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccentPhrase>> {",
        "        const response = await this.moraPitchMoraPitchPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "アクセント句から音高を得る",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.moraPitchMoraPitchPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    async morphableTargetsMorphableTargetsPostRaw(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: MorphableTargetInfo; }>>> {",
        "        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {",
        "            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling morphableTargetsMorphableTargetsPost.');"
      ],
      "text": "指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します モーフィングの許可 禁止は の に記載されています プロパティが存在しない場合は モーフィングが許可されているとみなします 返り値の話者は 型なので注意",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    async morphableTargetsMorphableTargetsPostRaw(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: MorphableTargetInfo; }>>> {",
        "        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {",
        "            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling morphableTargetsMorphableTargetsPost.');",
        "        }"
      ],
      "text": "指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse<any>(response);",
        "    }",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    async morphableTargetsMorphableTargetsPost(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: MorphableTargetInfo; }>> {",
        "        const response = await this.morphableTargetsMorphableTargetsPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します モーフィングの許可 禁止は の に記載されています プロパティが存在しない場合は モーフィングが許可されているとみなします 返り値の話者は 型なので注意",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.JSONApiResponse<any>(response);",
        "    }",
        " ",
        "    /**",
        "     * 指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。 モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。 プロパティが存在しない場合は、モーフィングが許可されているとみなします。 返り値の話者はstring型なので注意。",
        "     * 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
        "     */",
        "    async morphableTargetsMorphableTargetsPost(requestParameters: MorphableTargetsMorphableTargetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: MorphableTargetInfo; }>> {",
        "        const response = await this.morphableTargetsMorphableTargetsPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "指定した話者に対してエンジン内の話者がモーフィングが可能か判定する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.morphableTargetsMorphableTargetsPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 複数まとめて音声合成する",
        "     */",
        "    async multiSynthesisMultiSynthesisPostRaw(requestParameters: MultiSynthesisMultiSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling multiSynthesisMultiSynthesisPost.');",
        "        }"
      ],
      "text": "複数まとめて音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 複数まとめて音声合成する",
        "     */",
        "    async multiSynthesisMultiSynthesisPost(requestParameters: MultiSynthesisMultiSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.multiSynthesisMultiSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "複数まとめて音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.multiSynthesisMultiSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を更新します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_uuid: str     更新する言葉のUUID word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Rewrite User Dict Word",
        "     */",
        "    async rewriteUserDictWordUserDictWordWordUuidPutRaw(requestParameters: RewriteUserDictWordUserDictWordWordUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.wordUuid === null || requestParameters.wordUuid === undefined) {",
        "            throw new runtime.RequiredError('wordUuid','Required parameter requestParameters.wordUuid was null or undefined when calling rewriteUserDictWordUserDictWordWordUuidPut.');"
      ],
      "text": "ユーザー辞書に登録されている言葉を更新します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 更新する言葉の 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * ユーザー辞書に登録されている言葉を更新します。  Parameters ---------- surface : str     言葉の表層形 pronunciation: str     言葉の発音（カタカナ） accent_type: int     アクセント型（音が下がる場所を指す） word_uuid: str     更新する言葉のUUID word_type: WordTypes, optional     PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか priority: int, optional     単語の優先度（0から10までの整数）     数字が大きいほど優先度が高くなる     1から9までの値を指定することを推奨",
        "     * Rewrite User Dict Word",
        "     */",
        "    async rewriteUserDictWordUserDictWordWordUuidPut(requestParameters: RewriteUserDictWordUserDictWordWordUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.rewriteUserDictWordUserDictWordWordUuidPutRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "ユーザー辞書に登録されている言葉を更新します 言葉の表層形 言葉の発音 カタカナ アクセント型 音が下がる場所を指す 更新する言葉の 固有名詞 普通名詞 動詞 形容詞 語尾 のいずれか 単語の優先度 から までの整数 数字が大きいほど優先度が高くなる から までの値を指定することを推奨",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.settingPostSettingPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_uuidに関する情報をjson形式で返します。 画像や音声はbase64エンコードされたものが返されます。  Returns ------- ret_data: SpeakerInfo",
        "     * Speaker Info",
        "     */",
        "    async speakerInfoSpeakerInfoGetRaw(requestParameters: SpeakerInfoSpeakerInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpeakerInfo>> {",
        "        if (requestParameters.speakerUuid === null || requestParameters.speakerUuid === undefined) {",
        "            throw new runtime.RequiredError('speakerUuid','Required parameter requestParameters.speakerUuid was null or undefined when calling speakerInfoSpeakerInfoGet.');"
      ],
      "text": "指定された に関する情報を 形式で返します 画像や音声は エンコードされたものが返されます",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.JSONApiResponse(response, (jsonValue) => SpeakerInfoFromJSON(jsonValue));",
        "    }",
        " ",
        "    /**",
        "     * 指定されたspeaker_uuidに関する情報をjson形式で返します。 画像や音声はbase64エンコードされたものが返されます。  Returns ------- ret_data: SpeakerInfo",
        "     * Speaker Info",
        "     */",
        "    async speakerInfoSpeakerInfoGet(requestParameters: SpeakerInfoSpeakerInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpeakerInfo> {",
        "        const response = await this.speakerInfoSpeakerInfoGetRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "指定された に関する情報を 形式で返します 画像や音声は エンコードされたものが返されます",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.supportedDevicesSupportedDevicesGetRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    async synthesisMorphingSynthesisMorphingPostRaw(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.baseSpeaker === null || requestParameters.baseSpeaker === undefined) {",
        "            throw new runtime.RequiredError('baseSpeaker','Required parameter requestParameters.baseSpeaker was null or undefined when calling synthesisMorphingSynthesisMorphingPost.');"
      ],
      "text": "指定された 人の話者で音声を合成 指定した割合でモーフィングした音声を得ます モーフィングの割合は で指定でき でベースの話者 でターゲットの話者に近づきます",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    async synthesisMorphingSynthesisMorphingPostRaw(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.baseSpeaker === null || requestParameters.baseSpeaker === undefined) {",
        "            throw new runtime.RequiredError('baseSpeaker','Required parameter requestParameters.baseSpeaker was null or undefined when calling synthesisMorphingSynthesisMorphingPost.');",
        "        }"
      ],
      "text": "人の話者でモーフィングした音声を合成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    async synthesisMorphingSynthesisMorphingPost(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.synthesisMorphingSynthesisMorphingPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "指定された 人の話者で音声を合成 指定した割合でモーフィングした音声を得ます モーフィングの割合は で指定でき でベースの話者 でターゲットの話者に近づきます",
      "translation": ""
    },
    {
      "neighbors": [
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。 モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。",
        "     * 2人の話者でモーフィングした音声を合成する",
        "     */",
        "    async synthesisMorphingSynthesisMorphingPost(requestParameters: SynthesisMorphingSynthesisMorphingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.synthesisMorphingSynthesisMorphingPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "人の話者でモーフィングした音声を合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.synthesisMorphingSynthesisMorphingPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 音声合成する",
        "     */",
        "    async synthesisSynthesisPostRaw(requestParameters: SynthesisSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {",
        "        if (requestParameters.speaker === null || requestParameters.speaker === undefined) {",
        "            throw new runtime.RequiredError('speaker','Required parameter requestParameters.speaker was null or undefined when calling synthesisSynthesisPost.');",
        "        }"
      ],
      "text": "音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.BlobApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 音声合成する",
        "     */",
        "    async synthesisSynthesisPost(requestParameters: SynthesisSynthesisPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {",
        "        const response = await this.synthesisSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "音声合成する",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.synthesisSynthesisPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * 音声ライブラリをアンインストールします。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Uninstall Library",
        "     */",
        "    async uninstallLibraryUninstallLibraryLibraryUuidPostRaw(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {",
        "        if (requestParameters.libraryUuid === null || requestParameters.libraryUuid === undefined) {",
        "            throw new runtime.RequiredError('libraryUuid','Required parameter requestParameters.libraryUuid was null or undefined when calling uninstallLibraryUninstallLibraryLibraryUuidPost.');"
      ],
      "text": "音声ライブラリをアンインストールします 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        " ",
        "        return new runtime.VoidApiResponse(response);",
        "    }",
        " ",
        "    /**",
        "     * 音声ライブラリをアンインストールします。  Parameters ---------- library_uuid: str     音声ライブラリのID",
        "     * Uninstall Library",
        "     */",
        "    async uninstallLibraryUninstallLibraryLibraryUuidPost(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.uninstallLibraryUninstallLibraryLibraryUuidPostRaw(requestParameters, initOverrides);",
        "    }"
      ],
      "text": "音声ライブラリをアンインストールします 音声ライブラリの",
      "translation": ""
    },
    {
      "neighbors": [
        "    async uninstallLibraryUninstallLibraryLibraryUuidPost(requestParameters: UninstallLibraryUninstallLibraryLibraryUuidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {",
        "        await this.uninstallLibraryUninstallLibraryLibraryUuidPostRaw(requestParameters, initOverrides);",
        "    }",
        " ",
        "    /**",
        "     * 既存のプリセットを更新します  Parameters ------- preset: Preset     更新するプリセット。     プリセットIDが更新対象と一致している必要があります。  Returns ------- id: int     更新したプリセットのプリセットID",
        "     * Update Preset",
        "     */",
        "    async updatePresetUpdatePresetPostRaw(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {",
        "        if (requestParameters.preset === null || requestParameters.preset === undefined) {",
        "            throw new runtime.RequiredError('preset','Required parameter requestParameters.preset was null or undefined when calling updatePresetUpdatePresetPost.');"
      ],
      "text": "既存のプリセットを更新します 更新するプリセット プリセット が更新対象と一致している必要があります 更新したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "            return new runtime.TextApiResponse(response) as any;",
        "        }",
        "    }",
        " ",
        "    /**",
        "     * 既存のプリセットを更新します  Parameters ------- preset: Preset     更新するプリセット。     プリセットIDが更新対象と一致している必要があります。  Returns ------- id: int     更新したプリセットのプリセットID",
        "     * Update Preset",
        "     */",
        "    async updatePresetUpdatePresetPost(requestParameters: UpdatePresetUpdatePresetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {",
        "        const response = await this.updatePresetUpdatePresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "既存のプリセットを更新します 更新するプリセット プリセット が更新対象と一致している必要があります 更新したプリセットのプリセット",
      "translation": ""
    },
    {
      "neighbors": [
        "        const response = await this.updatePresetUpdatePresetPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    async validateKanaValidateKanaPostRaw(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling validateKanaValidateKanaPost.');"
      ],
      "text": "テキストが ライクな記法に従っているかどうかを判定します 従っていない場合はエラーが返ります 判定する対象の文字列",
      "translation": ""
    },
    {
      "neighbors": [
        "        return await response.value();",
        "    }",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    async validateKanaValidateKanaPostRaw(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {",
        "        if (requestParameters.text === null || requestParameters.text === undefined) {",
        "            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling validateKanaValidateKanaPost.');",
        "        }"
      ],
      "text": "テキストが ライクな記法に従っているか判定する",
      "translation": ""
    },
    {
      "neighbors": [
        "            return new runtime.TextApiResponse(response) as any;",
        "        }",
        "    }",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    async validateKanaValidateKanaPost(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {",
        "        const response = await this.validateKanaValidateKanaPostRaw(requestParameters, initOverrides);",
        "        return await response.value();"
      ],
      "text": "テキストが ライクな記法に従っているかどうかを判定します 従っていない場合はエラーが返ります 判定する対象の文字列",
      "translation": ""
    },
    {
      "neighbors": [
        "        }",
        "    }",
        " ",
        "    /**",
        "     * テキストがAquesTalkライクな記法に従っているかどうかを判定します。 従っていない場合はエラーが返ります。  Parameters ---------- text: str     判定する対象の文字列",
        "     * テキストがAquesTalkライクな記法に従っているか判定する",
        "     */",
        "    async validateKanaValidateKanaPost(requestParameters: ValidateKanaValidateKanaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {",
        "        const response = await this.validateKanaValidateKanaPostRaw(requestParameters, initOverrides);",
        "        return await response.value();",
        "    }"
      ],
      "text": "テキストが ライクな記法に従っているか判定する",
      "translation": ""
    }
  ],
  "StyleInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * スタイルの追加情報",
        " * @export",
        " * @interface StyleInfo",
        " */",
        "export interface StyleInfo {",
        "    /**"
      ],
      "text": "スタイルの追加情報",
      "translation": ""
    }
  ],
  "AccentPhrase.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    MoraFromJSONTyped,",
        "    MoraToJSON,",
        "} from './Mora';",
        " ",
        "/**",
        " * アクセント句ごとの情報",
        " * @export",
        " * @interface AccentPhrase",
        " */",
        "export interface AccentPhrase {",
        "    /**"
      ],
      "text": "アクセント句ごとの情報",
      "translation": ""
    }
  ],
  "UpdateInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * エンジンのアップデート情報",
        " * @export",
        " * @interface UpdateInfo",
        " */",
        "export interface UpdateInfo {",
        "    /**"
      ],
      "text": "エンジンのアップデート情報",
      "translation": ""
    }
  ],
  "LicenseInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * 依存ライブラリのライセンス情報",
        " * @export",
        " * @interface LicenseInfo",
        " */",
        "export interface LicenseInfo {",
        "    /**"
      ],
      "text": "依存ライブラリのライセンス情報",
      "translation": ""
    }
  ],
  "SpeakerSupportPermittedSynthesisMorphing.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    }
  ],
  "SupportedDevicesInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * 対応しているデバイスの情報",
        " * @export",
        " * @interface SupportedDevicesInfo",
        " */",
        "export interface SupportedDevicesInfo {",
        "    /**"
      ],
      "text": "対応しているデバイスの情報",
      "translation": ""
    }
  ],
  "Mora.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * モーラ（子音＋母音）ごとの情報",
        " * @export",
        " * @interface Mora",
        " */",
        "export interface Mora {",
        "    /**"
      ],
      "text": "モーラ 子音 母音 ごとの情報",
      "translation": ""
    }
  ],
  "DownloadableLibrary.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    LibrarySpeakerFromJSONTyped,",
        "    LibrarySpeakerToJSON,",
        "} from './LibrarySpeaker';",
        " ",
        "/**",
        " * ダウンロード可能な音声ライブラリの情報",
        " * @export",
        " * @interface DownloadableLibrary",
        " */",
        "export interface DownloadableLibrary {",
        "    /**"
      ],
      "text": "ダウンロード可能な音声ライブラリの情報",
      "translation": ""
    }
  ],
  "SpeakerInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    StyleInfoFromJSONTyped,",
        "    StyleInfoToJSON,",
        "} from './StyleInfo';",
        " ",
        "/**",
        " * 話者の追加情報",
        " * @export",
        " * @interface SpeakerInfo",
        " */",
        "export interface SpeakerInfo {",
        "    /**"
      ],
      "text": "話者の追加情報",
      "translation": ""
    }
  ],
  "Preset.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * プリセット情報",
        " * @export",
        " * @interface Preset",
        " */",
        "export interface Preset {",
        "    /**"
      ],
      "text": "プリセット情報",
      "translation": ""
    }
  ],
  "UserDictWord.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * 辞書のコンパイルに使われる情報",
        " * @export",
        " * @interface UserDictWord",
        " */",
        "export interface UserDictWord {",
        "    /**"
      ],
      "text": "辞書のコンパイルに使われる情報",
      "translation": ""
    }
  ],
  "MorphableTargetInfo.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    }
  ],
  "LibrarySpeaker.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    SpeakerInfoFromJSONTyped,",
        "    SpeakerInfoToJSON,",
        "} from './SpeakerInfo';",
        " ",
        "/**",
        " * 音声ライブラリに含まれる話者の情報",
        " * @export",
        " * @interface LibrarySpeaker",
        " */",
        "export interface LibrarySpeaker {",
        "    /**"
      ],
      "text": "音声ライブラリに含まれる話者の情報",
      "translation": ""
    }
  ],
  "SpeakerSupportedFeatures.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    SpeakerSupportPermittedSynthesisMorphingFromJSONTyped,",
        "    SpeakerSupportPermittedSynthesisMorphingToJSON,",
        "} from './SpeakerSupportPermittedSynthesisMorphing';",
        " ",
        "/**",
        " * 話者の対応機能の情報",
        " * @export",
        " * @interface SpeakerSupportedFeatures",
        " */",
        "export interface SpeakerSupportedFeatures {",
        "    /**"
      ],
      "text": "話者の対応機能の情報",
      "translation": ""
    }
  ],
  "HTTPValidationError.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    }
  ],
  "EngineManifest.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    UpdateInfoFromJSONTyped,",
        "    UpdateInfoToJSON,",
        "} from './UpdateInfo';",
        " ",
        "/**",
        " * エンジン自体に関する情報",
        " * @export",
        " * @interface EngineManifest",
        " */",
        "export interface EngineManifest {",
        "    /**"
      ],
      "text": "エンジン自体に関する情報",
      "translation": ""
    }
  ],
  "WordTypes.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " */",
        " ",
        " ",
        "/**",
        " *",
        " *     fastapiでword_type引数を検証する時に使用するクラス",
        " *",
        " * @export",
        " */",
        "export const WordTypes = {",
        "    ProperNoun: 'PROPER_NOUN',"
      ],
      "text": "で 引数を検証する時に使用するクラス",
      "translation": ""
    }
  ],
  "InstalledLibrary.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    LibrarySpeakerFromJSONTyped,",
        "    LibrarySpeakerToJSON,",
        "} from './LibrarySpeaker';",
        " ",
        "/**",
        " * インストール済み音声ライブラリの情報",
        " * @export",
        " * @interface InstalledLibrary",
        " */",
        "export interface InstalledLibrary {",
        "    /**"
      ],
      "text": "インストール済み音声ライブラリの情報",
      "translation": ""
    }
  ],
  "AudioQuery.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    AccentPhraseFromJSONTyped,",
        "    AccentPhraseToJSON,",
        "} from './AccentPhrase';",
        " ",
        "/**",
        " * 音声合成用のクエリ",
        " * @export",
        " * @interface AudioQuery",
        " */",
        "export interface AudioQuery {",
        "    /**"
      ],
      "text": "音声合成用のクエリ",
      "translation": ""
    }
  ],
  "ValidationError.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    }
  ],
  "SupportedFeatures.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * エンジンが持つ機能の一覧",
        " * @export",
        " * @interface SupportedFeatures",
        " */",
        "export interface SupportedFeatures {",
        "    /**"
      ],
      "text": "エンジンが持つ機能の一覧",
      "translation": ""
    }
  ],
  "SpeakerStyle.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * スピーカーのスタイル情報",
        " * @export",
        " * @interface SpeakerStyle",
        " */",
        "export interface SpeakerStyle {",
        "    /**"
      ],
      "text": "スピーカーのスタイル情報",
      "translation": ""
    }
  ],
  "VvlibManifest.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        " * Do not edit the class manually.",
        " */",
        " ",
        "import { exists, mapValues } from '../runtime';",
        "/**",
        " * vvlib(VOICEVOX Library)に関する情報",
        " * @export",
        " * @interface VvlibManifest",
        " */",
        "export interface VvlibManifest {",
        "    /**"
      ],
      "text": "に関する情報",
      "translation": ""
    }
  ],
  "Speaker.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "    SpeakerSupportedFeaturesFromJSONTyped,",
        "    SpeakerSupportedFeaturesToJSON,",
        "} from './SpeakerSupportedFeatures';",
        " ",
        "/**",
        " * スピーカー情報",
        " * @export",
        " * @interface Speaker",
        " */",
        "export interface Speaker {",
        "    /**"
      ],
      "text": "スピーカー情報",
      "translation": ""
    }
  ],
  "ParseKanaBadRequest.ts": [
    {
      "neighbors": [
        "/* tslint:disable */",
        "/* eslint-disable */",
        "/**",
        " * VOICEVOX Engine",
        " * VOICEVOXの音声合成エンジンです。",
        " *",
        " * The version of the OpenAPI document: latest",
        " *",
        " *",
        " * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."
      ],
      "text": "の音声合成エンジンです",
      "translation": ""
    },
    {
      "neighbors": [
        "     */",
        "    text: string;",
        "    /**",
        "     * |name|description|",
        "     * |---|---|",
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |"
      ],
      "text": "判別できない読み仮名があります",
      "translation": ""
    },
    {
      "neighbors": [
        "    text: string;",
        "    /**",
        "     * |name|description|",
        "     * |---|---|",
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |"
      ],
      "text": "句頭にアクセントは置けません",
      "translation": ""
    },
    {
      "neighbors": [
        "    /**",
        "     * |name|description|",
        "     * |---|---|",
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |",
        "     * @type {string}"
      ],
      "text": "つのアクセント句に二つ以上のアクセントは置けません",
      "translation": ""
    },
    {
      "neighbors": [
        "     * |name|description|",
        "     * |---|---|",
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |",
        "     * @type {string}",
        "     * @memberof ParseKanaBadRequest"
      ],
      "text": "アクセントを指定していないアクセント句があります",
      "translation": ""
    },
    {
      "neighbors": [
        "     * |---|---|",
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |",
        "     * @type {string}",
        "     * @memberof ParseKanaBadRequest",
        "     */"
      ],
      "text": "番目のアクセント句が空白です",
      "translation": ""
    },
    {
      "neighbors": [
        "     * | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |",
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |",
        "     * @type {string}",
        "     * @memberof ParseKanaBadRequest",
        "     */",
        "    errorName: string;"
      ],
      "text": "アクセント句末以外に は置けません",
      "translation": ""
    },
    {
      "neighbors": [
        "     * | ACCENT_TOP | 句頭にアクセントは置けません: {text} |",
        "     * | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |",
        "     * | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |",
        "     * | EMPTY_PHRASE | {position}番目のアクセント句が空白です |",
        "     * | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |",
        "     * | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |",
        "     * @type {string}",
        "     * @memberof ParseKanaBadRequest",
        "     */",
        "    errorName: string;",
        "    /**"
      ],
      "text": "処理時に無限ループになってしまいました バグ報告をお願いします",
      "translation": ""
    }
  ]
}
